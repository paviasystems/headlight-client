"use strict";
/**
 * HeadlightAPI
 * Pavia Headlight API Server
 *
 * OpenAPI spec version: 0.0.12
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const localVarRequest = require("request");
const DEFAULT_TIMEOUT = 30 * 1000; //default to 30 second request timeout
let defaultBasePath = 'https://localhost/1.0';
// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================
/* tslint:disable:no-unused-variable */
let primitives = [
    "string",
    "boolean",
    "double",
    "integer",
    "long",
    "float",
    "number",
    "any"
];
class ObjectSerializer {
    static findCorrectType(data, expectedType) {
        if (data == undefined) {
            return expectedType;
        }
        else if (primitives.indexOf(expectedType.toLowerCase()) !== -1) {
            return expectedType;
        }
        else if (expectedType === "Date") {
            return expectedType;
        }
        else {
            if (enumsMap[expectedType]) {
                return expectedType;
            }
            if (!typeMap[expectedType]) {
                return expectedType; // w/e we don't know the type
            }
            // Check the discriminator
            let discriminatorProperty = typeMap[expectedType].discriminator;
            if (discriminatorProperty == null) {
                return expectedType; // the type does not have a discriminator. use it.
            }
            else {
                if (data[discriminatorProperty]) {
                    return data[discriminatorProperty]; // use the type given in the discriminator
                }
                else {
                    return expectedType; // discriminator was not present (or an empty string)
                }
            }
        }
    }
    static serialize(data, type) {
        if (data == undefined) {
            return data;
        }
        else if (primitives.indexOf(type.toLowerCase()) !== -1) {
            return data;
        }
        else if (type.lastIndexOf("Array<", 0) === 0) { // string.startsWith pre es6
            let subType = type.replace("Array<", ""); // Array<Type> => Type>
            subType = subType.substring(0, subType.length - 1); // Type> => Type
            let transformedData = [];
            for (let index in data) {
                let date = data[index];
                transformedData.push(ObjectSerializer.serialize(date, subType));
            }
            return transformedData;
        }
        else if (type === "Date") {
            return data.toString();
        }
        else {
            if (enumsMap[type]) {
                return data;
            }
            if (!typeMap[type]) { // in case we dont know the type
                return data;
            }
            // get the map for the correct type.
            let attributeTypes = typeMap[type].getAttributeTypeMap();
            let instance = {};
            for (let index in attributeTypes) {
                let attributeType = attributeTypes[index];
                instance[attributeType.baseName] = ObjectSerializer.serialize(data[attributeType.name], attributeType.type);
            }
            return instance;
        }
    }
    static deserialize(data, type) {
        // polymorphism may change the actual type.
        type = ObjectSerializer.findCorrectType(data, type);
        if (data == undefined) {
            return data;
        }
        else if (primitives.indexOf(type.toLowerCase()) !== -1) {
            return data;
        }
        else if (type.lastIndexOf("Array<", 0) === 0) { // string.startsWith pre es6
            let subType = type.replace("Array<", ""); // Array<Type> => Type>
            subType = subType.substring(0, subType.length - 1); // Type> => Type
            let transformedData = [];
            for (let index in data) {
                let date = data[index];
                transformedData.push(ObjectSerializer.deserialize(date, subType));
            }
            return transformedData;
        }
        else if (type === "Date") {
            return new Date(data);
        }
        else {
            if (enumsMap[type]) { // is Enum
                return data;
            }
            if (!typeMap[type]) { // dont know the type
                return data;
            }
            let instance = new typeMap[type]();
            let attributeTypes = typeMap[type].getAttributeTypeMap();
            for (let index in attributeTypes) {
                let attributeType = attributeTypes[index];
                instance[attributeType.name] = ObjectSerializer.deserialize(data[attributeType.baseName], attributeType.type);
            }
            //directly forward any non-defined properties
            for (let key in data) {
                if (!instance[key]) {
                    instance[key] = data[key];
                }
            }
            return instance;
        }
    }
}
/**
*
*/
class Artifact {
    static getAttributeTypeMap() {
        return Artifact.attributeTypeMap;
    }
}
Artifact.discriminator = undefined;
Artifact.attributeTypeMap = [
    {
        "name": "IDArtifact",
        "baseName": "IDArtifact",
        "type": "number"
    },
    {
        "name": "GUIDArtifact",
        "baseName": "GUIDArtifact",
        "type": "string"
    },
    {
        "name": "CreateDate",
        "baseName": "CreateDate",
        "type": "Date"
    },
    {
        "name": "CreatingIDUser",
        "baseName": "CreatingIDUser",
        "type": "number"
    },
    {
        "name": "UpdateDate",
        "baseName": "UpdateDate",
        "type": "Date"
    },
    {
        "name": "UpdatingIDUser",
        "baseName": "UpdatingIDUser",
        "type": "number"
    },
    {
        "name": "Deleted",
        "baseName": "Deleted",
        "type": "number"
    },
    {
        "name": "DeleteDate",
        "baseName": "DeleteDate",
        "type": "Date"
    },
    {
        "name": "DeletingIDUser",
        "baseName": "DeletingIDUser",
        "type": "number"
    },
    {
        "name": "ArtifactType",
        "baseName": "ArtifactType",
        "type": "string"
    },
    {
        "name": "Datum",
        "baseName": "Datum",
        "type": "string"
    },
    {
        "name": "Version",
        "baseName": "Version",
        "type": "number"
    },
    {
        "name": "Invalid",
        "baseName": "Invalid",
        "type": "number"
    },
    {
        "name": "IDDevice",
        "baseName": "IDDevice",
        "type": "number"
    },
    {
        "name": "Sync",
        "baseName": "Sync",
        "type": "number"
    }
];
exports.Artifact = Artifact;
/**
*
*/
class ArtifactModel {
    static getAttributeTypeMap() {
        return ArtifactModel.attributeTypeMap;
    }
}
ArtifactModel.discriminator = undefined;
ArtifactModel.attributeTypeMap = [
    {
        "name": "Datum",
        "baseName": "Datum",
        "type": "any"
    },
    {
        "name": "FileName",
        "baseName": "FileName",
        "type": "any"
    },
    {
        "name": "IDObservationRequirementSpecification",
        "baseName": "IDObservationRequirementSpecification",
        "type": "any"
    },
    {
        "name": "IDArtifact",
        "baseName": "IDArtifact",
        "type": "number"
    },
    {
        "name": "GUIDArtifact",
        "baseName": "GUIDArtifact",
        "type": "string"
    },
    {
        "name": "CreateDate",
        "baseName": "CreateDate",
        "type": "Date"
    },
    {
        "name": "CreatingIDUser",
        "baseName": "CreatingIDUser",
        "type": "number"
    },
    {
        "name": "UpdateDate",
        "baseName": "UpdateDate",
        "type": "Date"
    },
    {
        "name": "UpdatingIDUser",
        "baseName": "UpdatingIDUser",
        "type": "number"
    },
    {
        "name": "Deleted",
        "baseName": "Deleted",
        "type": "number"
    },
    {
        "name": "DeleteDate",
        "baseName": "DeleteDate",
        "type": "Date"
    },
    {
        "name": "DeletingIDUser",
        "baseName": "DeletingIDUser",
        "type": "number"
    },
    {
        "name": "ArtifactType",
        "baseName": "ArtifactType",
        "type": "string"
    },
    {
        "name": "Version",
        "baseName": "Version",
        "type": "number"
    },
    {
        "name": "Invalid",
        "baseName": "Invalid",
        "type": "number"
    },
    {
        "name": "IDDevice",
        "baseName": "IDDevice",
        "type": "number"
    },
    {
        "name": "Sync",
        "baseName": "Sync",
        "type": "number"
    }
];
exports.ArtifactModel = ArtifactModel;
/**
*
*/
class BidItem {
    static getAttributeTypeMap() {
        return BidItem.attributeTypeMap;
    }
}
BidItem.discriminator = undefined;
BidItem.attributeTypeMap = [
    {
        "name": "IDBidItem",
        "baseName": "IDBidItem",
        "type": "number"
    },
    {
        "name": "GUIDBidItem",
        "baseName": "GUIDBidItem",
        "type": "string"
    },
    {
        "name": "CreateDate",
        "baseName": "CreateDate",
        "type": "Date"
    },
    {
        "name": "CreatingIDUser",
        "baseName": "CreatingIDUser",
        "type": "number"
    },
    {
        "name": "UpdateDate",
        "baseName": "UpdateDate",
        "type": "Date"
    },
    {
        "name": "UpdatingIDUser",
        "baseName": "UpdatingIDUser",
        "type": "number"
    },
    {
        "name": "Name",
        "baseName": "Name",
        "type": "string"
    },
    {
        "name": "Description",
        "baseName": "Description",
        "type": "string"
    },
    {
        "name": "IDContract",
        "baseName": "IDContract",
        "type": "number"
    },
    {
        "name": "IDProject",
        "baseName": "IDProject",
        "type": "number"
    },
    {
        "name": "IDCustomer",
        "baseName": "IDCustomer",
        "type": "number"
    },
    {
        "name": "IDPayItem",
        "baseName": "IDPayItem",
        "type": "number"
    },
    {
        "name": "ExternalSyncDate",
        "baseName": "ExternalSyncDate",
        "type": "Date"
    }
];
exports.BidItem = BidItem;
/**
*
*/
class ChangePasswordRequest {
    static getAttributeTypeMap() {
        return ChangePasswordRequest.attributeTypeMap;
    }
}
ChangePasswordRequest.discriminator = undefined;
ChangePasswordRequest.attributeTypeMap = [
    {
        "name": "NewPassword",
        "baseName": "NewPassword",
        "type": "string"
    }
];
exports.ChangePasswordRequest = ChangePasswordRequest;
/**
*
*/
class CommentModel {
    static getAttributeTypeMap() {
        return CommentModel.attributeTypeMap;
    }
}
CommentModel.discriminator = undefined;
CommentModel.attributeTypeMap = [
    {
        "name": "Metadata",
        "baseName": "Metadata",
        "type": "any"
    },
    {
        "name": "IDComment",
        "baseName": "IDComment",
        "type": "number"
    },
    {
        "name": "GUIDComment",
        "baseName": "GUIDComment",
        "type": "string"
    },
    {
        "name": "IDParent",
        "baseName": "IDParent",
        "type": "number"
    },
    {
        "name": "CreateDate",
        "baseName": "CreateDate",
        "type": "Date"
    },
    {
        "name": "CreatingIDUser",
        "baseName": "CreatingIDUser",
        "type": "number"
    },
    {
        "name": "UpdateDate",
        "baseName": "UpdateDate",
        "type": "Date"
    },
    {
        "name": "UpdatingIDUser",
        "baseName": "UpdatingIDUser",
        "type": "number"
    },
    {
        "name": "Deleted",
        "baseName": "Deleted",
        "type": "number"
    },
    {
        "name": "DeleteDate",
        "baseName": "DeleteDate",
        "type": "Date"
    },
    {
        "name": "DeletingIDUser",
        "baseName": "DeletingIDUser",
        "type": "number"
    },
    {
        "name": "Comment",
        "baseName": "Comment",
        "type": "string"
    },
    {
        "name": "CommentHtml",
        "baseName": "CommentHtml",
        "type": "string"
    }
];
exports.CommentModel = CommentModel;
/**
*
*/
class Contract {
    static getAttributeTypeMap() {
        return Contract.attributeTypeMap;
    }
}
Contract.discriminator = undefined;
Contract.attributeTypeMap = [
    {
        "name": "IDContract",
        "baseName": "IDContract",
        "type": "number"
    },
    {
        "name": "GUIDContract",
        "baseName": "GUIDContract",
        "type": "string"
    },
    {
        "name": "CreateDate",
        "baseName": "CreateDate",
        "type": "Date"
    },
    {
        "name": "CreatingIDUser",
        "baseName": "CreatingIDUser",
        "type": "number"
    },
    {
        "name": "UpdateDate",
        "baseName": "UpdateDate",
        "type": "Date"
    },
    {
        "name": "UpdatingIDUser",
        "baseName": "UpdatingIDUser",
        "type": "number"
    },
    {
        "name": "Deleted",
        "baseName": "Deleted",
        "type": "number"
    },
    {
        "name": "DeleteDate",
        "baseName": "DeleteDate",
        "type": "Date"
    },
    {
        "name": "DeletingIDUser",
        "baseName": "DeletingIDUser",
        "type": "number"
    },
    {
        "name": "Name",
        "baseName": "Name",
        "type": "string"
    },
    {
        "name": "Description",
        "baseName": "Description",
        "type": "string"
    },
    {
        "name": "IDOrganization",
        "baseName": "IDOrganization",
        "type": "number"
    },
    {
        "name": "IDCustomer",
        "baseName": "IDCustomer",
        "type": "number"
    },
    {
        "name": "ExternalSyncDate",
        "baseName": "ExternalSyncDate",
        "type": "Date"
    },
    {
        "name": "PrimaryProjectNumber",
        "baseName": "PrimaryProjectNumber",
        "type": "string"
    },
    {
        "name": "CountyProjectNumber",
        "baseName": "CountyProjectNumber",
        "type": "string"
    },
    {
        "name": "StateProjectNumber",
        "baseName": "StateProjectNumber",
        "type": "string"
    },
    {
        "name": "FederalProjectNumber",
        "baseName": "FederalProjectNumber",
        "type": "string"
    },
    {
        "name": "Status",
        "baseName": "Status",
        "type": "string"
    },
    {
        "name": "DBEStructure",
        "baseName": "DBEStructure",
        "type": "string"
    },
    {
        "name": "RouteNumber",
        "baseName": "RouteNumber",
        "type": "string"
    },
    {
        "name": "HighwayNumber",
        "baseName": "HighwayNumber",
        "type": "string"
    },
    {
        "name": "PavingMaterial",
        "baseName": "PavingMaterial",
        "type": "string"
    },
    {
        "name": "StationBegin",
        "baseName": "StationBegin",
        "type": "string"
    },
    {
        "name": "TerminusBegin",
        "baseName": "TerminusBegin",
        "type": "string"
    },
    {
        "name": "TerminusEnd",
        "baseName": "TerminusEnd",
        "type": "string"
    },
    {
        "name": "StationEnd",
        "baseName": "StationEnd",
        "type": "string"
    },
    {
        "name": "TotalBidAmount",
        "baseName": "TotalBidAmount",
        "type": "string"
    },
    {
        "name": "NetChangeOrderAmount",
        "baseName": "NetChangeOrderAmount",
        "type": "string"
    }
];
exports.Contract = Contract;
/**
*
*/
class Customer {
    static getAttributeTypeMap() {
        return Customer.attributeTypeMap;
    }
}
Customer.discriminator = undefined;
Customer.attributeTypeMap = [
    {
        "name": "IDCustomer",
        "baseName": "IDCustomer",
        "type": "number"
    },
    {
        "name": "GUIDCustomer",
        "baseName": "GUIDCustomer",
        "type": "string"
    },
    {
        "name": "CreateDate",
        "baseName": "CreateDate",
        "type": "Date"
    },
    {
        "name": "CreatingIDUser",
        "baseName": "CreatingIDUser",
        "type": "number"
    },
    {
        "name": "UpdateDate",
        "baseName": "UpdateDate",
        "type": "Date"
    },
    {
        "name": "UpdatingIDUser",
        "baseName": "UpdatingIDUser",
        "type": "number"
    },
    {
        "name": "Deleted",
        "baseName": "Deleted",
        "type": "number"
    },
    {
        "name": "DeleteDate",
        "baseName": "DeleteDate",
        "type": "Date"
    },
    {
        "name": "DeletingIDUser",
        "baseName": "DeletingIDUser",
        "type": "number"
    },
    {
        "name": "Name",
        "baseName": "Name",
        "type": "string"
    },
    {
        "name": "Code",
        "baseName": "Code",
        "type": "string"
    },
    {
        "name": "Enabled",
        "baseName": "Enabled",
        "type": "number"
    },
    {
        "name": "CustomProperties",
        "baseName": "CustomProperties",
        "type": "string"
    },
    {
        "name": "Timezone",
        "baseName": "Timezone",
        "type": "string"
    }
];
exports.Customer = Customer;
/**
*
*/
class DocumentModel {
    static getAttributeTypeMap() {
        return DocumentModel.attributeTypeMap;
    }
}
DocumentModel.discriminator = undefined;
DocumentModel.attributeTypeMap = [
    {
        "name": "Observations",
        "baseName": "Observations",
        "type": "Array<number>"
    },
    {
        "name": "Comments",
        "baseName": "Comments",
        "type": "Array<number>"
    },
    {
        "name": "ElectronicSignatures",
        "baseName": "ElectronicSignatures",
        "type": "Array<ElectronicSignature>"
    },
    {
        "name": "FormData",
        "baseName": "FormData",
        "type": "any"
    },
    {
        "name": "IDDocument",
        "baseName": "IDDocument",
        "type": "number"
    },
    {
        "name": "GUIDDocument",
        "baseName": "GUIDDocument",
        "type": "string"
    },
    {
        "name": "CreateDate",
        "baseName": "CreateDate",
        "type": "Date"
    },
    {
        "name": "CreatingIDUser",
        "baseName": "CreatingIDUser",
        "type": "number"
    },
    {
        "name": "UpdateDate",
        "baseName": "UpdateDate",
        "type": "Date"
    },
    {
        "name": "UpdatingIDUser",
        "baseName": "UpdatingIDUser",
        "type": "number"
    },
    {
        "name": "Deleted",
        "baseName": "Deleted",
        "type": "number"
    },
    {
        "name": "DeleteDate",
        "baseName": "DeleteDate",
        "type": "Date"
    },
    {
        "name": "DeletingIDUser",
        "baseName": "DeletingIDUser",
        "type": "number"
    },
    {
        "name": "Name",
        "baseName": "Name",
        "type": "string"
    },
    {
        "name": "DocumentType",
        "baseName": "DocumentType",
        "type": "string"
    },
    {
        "name": "DocumentDate",
        "baseName": "DocumentDate",
        "type": "Date"
    },
    {
        "name": "Status",
        "baseName": "Status",
        "type": "string"
    },
    {
        "name": "Version",
        "baseName": "Version",
        "type": "number"
    },
    {
        "name": "IDProject",
        "baseName": "IDProject",
        "type": "number"
    },
    {
        "name": "Description",
        "baseName": "Description",
        "type": "string"
    },
    {
        "name": "IDDevice",
        "baseName": "IDDevice",
        "type": "number"
    },
    {
        "name": "AppHash",
        "baseName": "AppHash",
        "type": "string"
    },
    {
        "name": "Timezone",
        "baseName": "Timezone",
        "type": "string"
    },
    {
        "name": "Shift",
        "baseName": "Shift",
        "type": "string"
    },
    {
        "name": "StateName",
        "baseName": "StateName",
        "type": "string"
    },
    {
        "name": "StateStep",
        "baseName": "StateStep",
        "type": "number"
    },
    {
        "name": "Locked",
        "baseName": "Locked",
        "type": "number"
    },
    {
        "name": "ExternalSyncDate",
        "baseName": "ExternalSyncDate",
        "type": "Date"
    },
    {
        "name": "SequenceNumber",
        "baseName": "SequenceNumber",
        "type": "number"
    },
    {
        "name": "ExternalSyncGUID",
        "baseName": "ExternalSyncGUID",
        "type": "string"
    },
    {
        "name": "Form",
        "baseName": "Form",
        "type": "number"
    }
];
exports.DocumentModel = DocumentModel;
/**
*
*/
class DocumentStateChangeRequest {
    static getAttributeTypeMap() {
        return DocumentStateChangeRequest.attributeTypeMap;
    }
}
DocumentStateChangeRequest.discriminator = undefined;
DocumentStateChangeRequest.attributeTypeMap = [
    {
        "name": "IDDocument",
        "baseName": "IDDocument",
        "type": "number"
    },
    {
        "name": "Action",
        "baseName": "Action",
        "type": "string"
    },
    {
        "name": "IDElectronicSignature",
        "baseName": "IDElectronicSignature",
        "type": "number"
    }
];
exports.DocumentStateChangeRequest = DocumentStateChangeRequest;
/**
*
*/
class ElectronicSignature {
    static getAttributeTypeMap() {
        return ElectronicSignature.attributeTypeMap;
    }
}
ElectronicSignature.discriminator = undefined;
ElectronicSignature.attributeTypeMap = [
    {
        "name": "IDElectronicSignature",
        "baseName": "IDElectronicSignature",
        "type": "number"
    },
    {
        "name": "GUIDElectronicSignature",
        "baseName": "GUIDElectronicSignature",
        "type": "string"
    },
    {
        "name": "CreateDate",
        "baseName": "CreateDate",
        "type": "Date"
    },
    {
        "name": "CreatingIDUser",
        "baseName": "CreatingIDUser",
        "type": "number"
    },
    {
        "name": "UpdateDate",
        "baseName": "UpdateDate",
        "type": "Date"
    },
    {
        "name": "UpdatingIDUser",
        "baseName": "UpdatingIDUser",
        "type": "number"
    },
    {
        "name": "Deleted",
        "baseName": "Deleted",
        "type": "number"
    },
    {
        "name": "DeleteDate",
        "baseName": "DeleteDate",
        "type": "Date"
    },
    {
        "name": "DeletingIDUser",
        "baseName": "DeletingIDUser",
        "type": "number"
    },
    {
        "name": "Signer",
        "baseName": "Signer",
        "type": "string"
    },
    {
        "name": "IDContact",
        "baseName": "IDContact",
        "type": "number"
    },
    {
        "name": "SignatureType",
        "baseName": "SignatureType",
        "type": "string"
    },
    {
        "name": "IDArtifact",
        "baseName": "IDArtifact",
        "type": "number"
    },
    {
        "name": "Approved",
        "baseName": "Approved",
        "type": "number"
    }
];
exports.ElectronicSignature = ElectronicSignature;
/**
*
*/
class ElectronicSignatureModel {
    static getAttributeTypeMap() {
        return ElectronicSignatureModel.attributeTypeMap;
    }
}
ElectronicSignatureModel.discriminator = undefined;
ElectronicSignatureModel.attributeTypeMap = [
    {
        "name": "Comments",
        "baseName": "Comments",
        "type": "Array<number>"
    },
    {
        "name": "IDElectronicSignature",
        "baseName": "IDElectronicSignature",
        "type": "number"
    },
    {
        "name": "GUIDElectronicSignature",
        "baseName": "GUIDElectronicSignature",
        "type": "string"
    },
    {
        "name": "CreateDate",
        "baseName": "CreateDate",
        "type": "Date"
    },
    {
        "name": "CreatingIDUser",
        "baseName": "CreatingIDUser",
        "type": "number"
    },
    {
        "name": "UpdateDate",
        "baseName": "UpdateDate",
        "type": "Date"
    },
    {
        "name": "UpdatingIDUser",
        "baseName": "UpdatingIDUser",
        "type": "number"
    },
    {
        "name": "Deleted",
        "baseName": "Deleted",
        "type": "number"
    },
    {
        "name": "DeleteDate",
        "baseName": "DeleteDate",
        "type": "Date"
    },
    {
        "name": "DeletingIDUser",
        "baseName": "DeletingIDUser",
        "type": "number"
    },
    {
        "name": "Signer",
        "baseName": "Signer",
        "type": "string"
    },
    {
        "name": "IDContact",
        "baseName": "IDContact",
        "type": "number"
    },
    {
        "name": "SignatureType",
        "baseName": "SignatureType",
        "type": "string"
    },
    {
        "name": "IDArtifact",
        "baseName": "IDArtifact",
        "type": "number"
    },
    {
        "name": "Approved",
        "baseName": "Approved",
        "type": "number"
    }
];
exports.ElectronicSignatureModel = ElectronicSignatureModel;
/**
*
*/
class Equipment {
    static getAttributeTypeMap() {
        return Equipment.attributeTypeMap;
    }
}
Equipment.discriminator = undefined;
Equipment.attributeTypeMap = [
    {
        "name": "IDEquipment",
        "baseName": "IDEquipment",
        "type": "number"
    },
    {
        "name": "GUIDEquipment",
        "baseName": "GUIDEquipment",
        "type": "string"
    },
    {
        "name": "CreateDate",
        "baseName": "CreateDate",
        "type": "Date"
    },
    {
        "name": "CreatingIDUser",
        "baseName": "CreatingIDUser",
        "type": "number"
    },
    {
        "name": "UpdateDate",
        "baseName": "UpdateDate",
        "type": "Date"
    },
    {
        "name": "UpdatingIDUser",
        "baseName": "UpdatingIDUser",
        "type": "number"
    },
    {
        "name": "Deleted",
        "baseName": "Deleted",
        "type": "number"
    },
    {
        "name": "DeleteDate",
        "baseName": "DeleteDate",
        "type": "Date"
    },
    {
        "name": "DeletingIDUser",
        "baseName": "DeletingIDUser",
        "type": "number"
    },
    {
        "name": "ExternalSyncDate",
        "baseName": "ExternalSyncDate",
        "type": "Date"
    },
    {
        "name": "IDCustomer",
        "baseName": "IDCustomer",
        "type": "number"
    },
    {
        "name": "Name",
        "baseName": "Name",
        "type": "string"
    },
    {
        "name": "Description",
        "baseName": "Description",
        "type": "string"
    },
    {
        "name": "Notes",
        "baseName": "Notes",
        "type": "string"
    },
    {
        "name": "SpecificationYear",
        "baseName": "SpecificationYear",
        "type": "number"
    },
    {
        "name": "Code",
        "baseName": "Code",
        "type": "string"
    },
    {
        "name": "Status",
        "baseName": "Status",
        "type": "string"
    }
];
exports.Equipment = Equipment;
/**
*
*/
class FormProcessorRequest {
    static getAttributeTypeMap() {
        return FormProcessorRequest.attributeTypeMap;
    }
}
FormProcessorRequest.discriminator = undefined;
FormProcessorRequest.attributeTypeMap = [
    {
        "name": "IDDocument",
        "baseName": "IDDocument",
        "type": "number"
    },
    {
        "name": "Observations",
        "baseName": "Observations",
        "type": "Array<ObservationModel>"
    },
    {
        "name": "Samples",
        "baseName": "Samples",
        "type": "Array<Sample>"
    },
    {
        "name": "SampleLogs",
        "baseName": "SampleLogs",
        "type": "Array<SampleLog>"
    }
];
exports.FormProcessorRequest = FormProcessorRequest;
/**
*
*/
class ISession {
    static getAttributeTypeMap() {
        return ISession.attributeTypeMap;
    }
}
ISession.discriminator = undefined;
ISession.attributeTypeMap = [
    {
        "name": "SessionID",
        "baseName": "SessionID",
        "type": "string"
    },
    {
        "name": "LoggedIn",
        "baseName": "LoggedIn",
        "type": "boolean"
    },
    {
        "name": "UserRole",
        "baseName": "UserRole",
        "type": "string"
    },
    {
        "name": "UserRoleIndex",
        "baseName": "UserRoleIndex",
        "type": "number"
    },
    {
        "name": "UserID",
        "baseName": "UserID",
        "type": "number"
    },
    {
        "name": "CustomerID",
        "baseName": "CustomerID",
        "type": "number"
    },
    {
        "name": "Title",
        "baseName": "Title",
        "type": "string"
    },
    {
        "name": "NameFirst",
        "baseName": "NameFirst",
        "type": "string"
    },
    {
        "name": "NameLast",
        "baseName": "NameLast",
        "type": "string"
    },
    {
        "name": "Email",
        "baseName": "Email",
        "type": "string"
    },
    {
        "name": "LoginID",
        "baseName": "LoginID",
        "type": "string"
    },
    {
        "name": "UIHash",
        "baseName": "UIHash",
        "type": "string"
    },
    {
        "name": "Timezone",
        "baseName": "Timezone",
        "type": "string"
    },
    {
        "name": "Settings",
        "baseName": "Settings",
        "type": "any"
    },
    {
        "name": "DeviceID",
        "baseName": "DeviceID",
        "type": "string"
    },
    {
        "name": "IDDevice",
        "baseName": "IDDevice",
        "type": "number"
    },
    {
        "name": "ServerHostURL",
        "baseName": "ServerHostURL",
        "type": "string"
    }
];
exports.ISession = ISession;
class InlineResponse200 {
    static getAttributeTypeMap() {
        return InlineResponse200.attributeTypeMap;
    }
}
InlineResponse200.discriminator = undefined;
InlineResponse200.attributeTypeMap = [
    {
        "name": "Count",
        "baseName": "Count",
        "type": "number"
    }
];
exports.InlineResponse200 = InlineResponse200;
class InlineResponse2001 {
    static getAttributeTypeMap() {
        return InlineResponse2001.attributeTypeMap;
    }
}
InlineResponse2001.discriminator = undefined;
InlineResponse2001.attributeTypeMap = [
    {
        "name": "Token",
        "baseName": "Token",
        "type": "string"
    }
];
exports.InlineResponse2001 = InlineResponse2001;
class InlineResponse2002 {
    static getAttributeTypeMap() {
        return InlineResponse2002.attributeTypeMap;
    }
}
InlineResponse2002.discriminator = undefined;
InlineResponse2002.attributeTypeMap = [
    {
        "name": "Success",
        "baseName": "Success",
        "type": "boolean"
    }
];
exports.InlineResponse2002 = InlineResponse2002;
/**
*
*/
class Lab {
    static getAttributeTypeMap() {
        return Lab.attributeTypeMap;
    }
}
Lab.discriminator = undefined;
Lab.attributeTypeMap = [
    {
        "name": "IDLab",
        "baseName": "IDLab",
        "type": "number"
    },
    {
        "name": "GUIDLab",
        "baseName": "GUIDLab",
        "type": "string"
    },
    {
        "name": "CreateDate",
        "baseName": "CreateDate",
        "type": "Date"
    },
    {
        "name": "CreatingIDUser",
        "baseName": "CreatingIDUser",
        "type": "number"
    },
    {
        "name": "UpdateDate",
        "baseName": "UpdateDate",
        "type": "Date"
    },
    {
        "name": "UpdatingIDUser",
        "baseName": "UpdatingIDUser",
        "type": "number"
    },
    {
        "name": "Deleted",
        "baseName": "Deleted",
        "type": "number"
    },
    {
        "name": "DeleteDate",
        "baseName": "DeleteDate",
        "type": "Date"
    },
    {
        "name": "DeletingIDUser",
        "baseName": "DeletingIDUser",
        "type": "number"
    },
    {
        "name": "ExternalSyncDate",
        "baseName": "ExternalSyncDate",
        "type": "Date"
    },
    {
        "name": "IDCustomer",
        "baseName": "IDCustomer",
        "type": "number"
    },
    {
        "name": "Name",
        "baseName": "Name",
        "type": "string"
    },
    {
        "name": "IDOrganization",
        "baseName": "IDOrganization",
        "type": "number"
    },
    {
        "name": "IDOrganizationAddress",
        "baseName": "IDOrganizationAddress",
        "type": "number"
    },
    {
        "name": "ExternalOrganization",
        "baseName": "ExternalOrganization",
        "type": "number"
    },
    {
        "name": "Notes",
        "baseName": "Notes",
        "type": "string"
    },
    {
        "name": "IDLabParent",
        "baseName": "IDLabParent",
        "type": "number"
    }
];
exports.Lab = Lab;
/**
*
*/
class LabMaterialAssignment {
    static getAttributeTypeMap() {
        return LabMaterialAssignment.attributeTypeMap;
    }
}
LabMaterialAssignment.discriminator = undefined;
LabMaterialAssignment.attributeTypeMap = [
    {
        "name": "IDLabMaterialAssignment",
        "baseName": "IDLabMaterialAssignment",
        "type": "number"
    },
    {
        "name": "GUIDLabMaterialAssignment",
        "baseName": "GUIDLabMaterialAssignment",
        "type": "string"
    },
    {
        "name": "CreateDate",
        "baseName": "CreateDate",
        "type": "Date"
    },
    {
        "name": "CreatingIDUser",
        "baseName": "CreatingIDUser",
        "type": "number"
    },
    {
        "name": "UpdateDate",
        "baseName": "UpdateDate",
        "type": "Date"
    },
    {
        "name": "UpdatingIDUser",
        "baseName": "UpdatingIDUser",
        "type": "number"
    },
    {
        "name": "Deleted",
        "baseName": "Deleted",
        "type": "number"
    },
    {
        "name": "DeleteDate",
        "baseName": "DeleteDate",
        "type": "Date"
    },
    {
        "name": "DeletingIDUser",
        "baseName": "DeletingIDUser",
        "type": "number"
    },
    {
        "name": "ExternalSyncDate",
        "baseName": "ExternalSyncDate",
        "type": "Date"
    },
    {
        "name": "IDCustomer",
        "baseName": "IDCustomer",
        "type": "number"
    },
    {
        "name": "IDLab",
        "baseName": "IDLab",
        "type": "number"
    },
    {
        "name": "IDLabParent",
        "baseName": "IDLabParent",
        "type": "number"
    },
    {
        "name": "IDMaterial",
        "baseName": "IDMaterial",
        "type": "number"
    },
    {
        "name": "SampleType",
        "baseName": "SampleType",
        "type": "string"
    },
    {
        "name": "ProductGroup",
        "baseName": "ProductGroup",
        "type": "string"
    }
];
exports.LabMaterialAssignment = LabMaterialAssignment;
/**
*
*/
class LabTestApproval {
    static getAttributeTypeMap() {
        return LabTestApproval.attributeTypeMap;
    }
}
LabTestApproval.discriminator = undefined;
LabTestApproval.attributeTypeMap = [
    {
        "name": "IDLabTestApproval",
        "baseName": "IDLabTestApproval",
        "type": "number"
    },
    {
        "name": "GUIDLabTestApproval",
        "baseName": "GUIDLabTestApproval",
        "type": "string"
    },
    {
        "name": "CreateDate",
        "baseName": "CreateDate",
        "type": "Date"
    },
    {
        "name": "CreatingIDUser",
        "baseName": "CreatingIDUser",
        "type": "number"
    },
    {
        "name": "UpdateDate",
        "baseName": "UpdateDate",
        "type": "Date"
    },
    {
        "name": "UpdatingIDUser",
        "baseName": "UpdatingIDUser",
        "type": "number"
    },
    {
        "name": "Deleted",
        "baseName": "Deleted",
        "type": "number"
    },
    {
        "name": "DeleteDate",
        "baseName": "DeleteDate",
        "type": "Date"
    },
    {
        "name": "DeletingIDUser",
        "baseName": "DeletingIDUser",
        "type": "number"
    },
    {
        "name": "ExternalSyncDate",
        "baseName": "ExternalSyncDate",
        "type": "Date"
    },
    {
        "name": "IDCustomer",
        "baseName": "IDCustomer",
        "type": "number"
    },
    {
        "name": "IDLab",
        "baseName": "IDLab",
        "type": "number"
    },
    {
        "name": "IDTest",
        "baseName": "IDTest",
        "type": "number"
    },
    {
        "name": "DateStart",
        "baseName": "DateStart",
        "type": "Date"
    },
    {
        "name": "DateEnd",
        "baseName": "DateEnd",
        "type": "Date"
    },
    {
        "name": "Notes",
        "baseName": "Notes",
        "type": "string"
    }
];
exports.LabTestApproval = LabTestApproval;
/**
*
*/
class LabTestDefault {
    static getAttributeTypeMap() {
        return LabTestDefault.attributeTypeMap;
    }
}
LabTestDefault.discriminator = undefined;
LabTestDefault.attributeTypeMap = [
    {
        "name": "IDLabTestDefault",
        "baseName": "IDLabTestDefault",
        "type": "number"
    },
    {
        "name": "GUIDLabTestDefault",
        "baseName": "GUIDLabTestDefault",
        "type": "string"
    },
    {
        "name": "CreateDate",
        "baseName": "CreateDate",
        "type": "Date"
    },
    {
        "name": "CreatingIDUser",
        "baseName": "CreatingIDUser",
        "type": "number"
    },
    {
        "name": "UpdateDate",
        "baseName": "UpdateDate",
        "type": "Date"
    },
    {
        "name": "UpdatingIDUser",
        "baseName": "UpdatingIDUser",
        "type": "number"
    },
    {
        "name": "Deleted",
        "baseName": "Deleted",
        "type": "number"
    },
    {
        "name": "DeleteDate",
        "baseName": "DeleteDate",
        "type": "Date"
    },
    {
        "name": "DeletingIDUser",
        "baseName": "DeletingIDUser",
        "type": "number"
    },
    {
        "name": "ExternalSyncDate",
        "baseName": "ExternalSyncDate",
        "type": "Date"
    },
    {
        "name": "IDCustomer",
        "baseName": "IDCustomer",
        "type": "number"
    },
    {
        "name": "IDLab",
        "baseName": "IDLab",
        "type": "number"
    },
    {
        "name": "IDMaterial",
        "baseName": "IDMaterial",
        "type": "number"
    },
    {
        "name": "IDTest",
        "baseName": "IDTest",
        "type": "number"
    },
    {
        "name": "SampleType",
        "baseName": "SampleType",
        "type": "string"
    },
    {
        "name": "StartStatus",
        "baseName": "StartStatus",
        "type": "number"
    },
    {
        "name": "RequiredAssign",
        "baseName": "RequiredAssign",
        "type": "number"
    },
    {
        "name": "Autofinalize",
        "baseName": "Autofinalize",
        "type": "number"
    },
    {
        "name": "DefinedTest",
        "baseName": "DefinedTest",
        "type": "number"
    },
    {
        "name": "TestRuns",
        "baseName": "TestRuns",
        "type": "number"
    }
];
exports.LabTestDefault = LabTestDefault;
/**
*
*/
class LineItem {
    static getAttributeTypeMap() {
        return LineItem.attributeTypeMap;
    }
}
LineItem.discriminator = undefined;
LineItem.attributeTypeMap = [
    {
        "name": "IDLineItem",
        "baseName": "IDLineItem",
        "type": "number"
    },
    {
        "name": "GUIDLineItem",
        "baseName": "GUIDLineItem",
        "type": "string"
    },
    {
        "name": "CreateDate",
        "baseName": "CreateDate",
        "type": "Date"
    },
    {
        "name": "CreatingIDUser",
        "baseName": "CreatingIDUser",
        "type": "number"
    },
    {
        "name": "UpdateDate",
        "baseName": "UpdateDate",
        "type": "Date"
    },
    {
        "name": "UpdatingIDUser",
        "baseName": "UpdatingIDUser",
        "type": "number"
    },
    {
        "name": "Name",
        "baseName": "Name",
        "type": "string"
    },
    {
        "name": "Description",
        "baseName": "Description",
        "type": "string"
    },
    {
        "name": "Units",
        "baseName": "Units",
        "type": "string"
    },
    {
        "name": "CostPerUnit",
        "baseName": "CostPerUnit",
        "type": "string"
    },
    {
        "name": "ExpectedQuantity",
        "baseName": "ExpectedQuantity",
        "type": "string"
    },
    {
        "name": "ActualQuantity",
        "baseName": "ActualQuantity",
        "type": "string"
    },
    {
        "name": "PercentComplete",
        "baseName": "PercentComplete",
        "type": "number"
    },
    {
        "name": "IDBidItem",
        "baseName": "IDBidItem",
        "type": "number"
    },
    {
        "name": "IDProject",
        "baseName": "IDProject",
        "type": "number"
    },
    {
        "name": "IDCustomer",
        "baseName": "IDCustomer",
        "type": "number"
    },
    {
        "name": "ExternalSyncDate",
        "baseName": "ExternalSyncDate",
        "type": "Date"
    },
    {
        "name": "ContractQuantity",
        "baseName": "ContractQuantity",
        "type": "string"
    },
    {
        "name": "InstalledQuantity",
        "baseName": "InstalledQuantity",
        "type": "string"
    },
    {
        "name": "Status",
        "baseName": "Status",
        "type": "string"
    },
    {
        "name": "ProposalIdentifier",
        "baseName": "ProposalIdentifier",
        "type": "string"
    },
    {
        "name": "Notes",
        "baseName": "Notes",
        "type": "string"
    },
    {
        "name": "SpecificationYear",
        "baseName": "SpecificationYear",
        "type": "number"
    },
    {
        "name": "ItemCode",
        "baseName": "ItemCode",
        "type": "string"
    },
    {
        "name": "ChangeOrderQuantity",
        "baseName": "ChangeOrderQuantity",
        "type": "string"
    },
    {
        "name": "ChangeOrderQuantityPending",
        "baseName": "ChangeOrderQuantityPending",
        "type": "string"
    },
    {
        "name": "ChangeOrderNumber",
        "baseName": "ChangeOrderNumber",
        "type": "string"
    },
    {
        "name": "FundingCategory",
        "baseName": "FundingCategory",
        "type": "string"
    },
    {
        "name": "CategoryNumber",
        "baseName": "CategoryNumber",
        "type": "string"
    },
    {
        "name": "Tax",
        "baseName": "Tax",
        "type": "string"
    }
];
exports.LineItem = LineItem;
/**
*
*/
class LoginRequest {
    static getAttributeTypeMap() {
        return LoginRequest.attributeTypeMap;
    }
}
LoginRequest.discriminator = undefined;
LoginRequest.attributeTypeMap = [
    {
        "name": "UserName",
        "baseName": "UserName",
        "type": "string"
    },
    {
        "name": "Password",
        "baseName": "Password",
        "type": "string"
    }
];
exports.LoginRequest = LoginRequest;
/**
*
*/
class MappedArrayArtifact {
    static getAttributeTypeMap() {
        return MappedArrayArtifact.attributeTypeMap;
    }
}
MappedArrayArtifact.discriminator = undefined;
MappedArrayArtifact.attributeTypeMap = [];
exports.MappedArrayArtifact = MappedArrayArtifact;
/**
*
*/
class Material {
    static getAttributeTypeMap() {
        return Material.attributeTypeMap;
    }
}
Material.discriminator = undefined;
Material.attributeTypeMap = [
    {
        "name": "IDMaterial",
        "baseName": "IDMaterial",
        "type": "number"
    },
    {
        "name": "GUIDMaterial",
        "baseName": "GUIDMaterial",
        "type": "string"
    },
    {
        "name": "CreateDate",
        "baseName": "CreateDate",
        "type": "Date"
    },
    {
        "name": "CreatingIDUser",
        "baseName": "CreatingIDUser",
        "type": "number"
    },
    {
        "name": "UpdateDate",
        "baseName": "UpdateDate",
        "type": "Date"
    },
    {
        "name": "UpdatingIDUser",
        "baseName": "UpdatingIDUser",
        "type": "number"
    },
    {
        "name": "Deleted",
        "baseName": "Deleted",
        "type": "number"
    },
    {
        "name": "DeleteDate",
        "baseName": "DeleteDate",
        "type": "Date"
    },
    {
        "name": "DeletingIDUser",
        "baseName": "DeletingIDUser",
        "type": "number"
    },
    {
        "name": "ExternalSyncDate",
        "baseName": "ExternalSyncDate",
        "type": "Date"
    },
    {
        "name": "IDCustomer",
        "baseName": "IDCustomer",
        "type": "number"
    },
    {
        "name": "Name",
        "baseName": "Name",
        "type": "string"
    },
    {
        "name": "NameAbbreviated",
        "baseName": "NameAbbreviated",
        "type": "string"
    },
    {
        "name": "Type",
        "baseName": "Type",
        "type": "string"
    },
    {
        "name": "Description",
        "baseName": "Description",
        "type": "string"
    },
    {
        "name": "CatalogCode",
        "baseName": "CatalogCode",
        "type": "string"
    },
    {
        "name": "UnitsMetric",
        "baseName": "UnitsMetric",
        "type": "string"
    },
    {
        "name": "UnitsImperial",
        "baseName": "UnitsImperial",
        "type": "string"
    },
    {
        "name": "Active",
        "baseName": "Active",
        "type": "number"
    },
    {
        "name": "BrandNameRequired",
        "baseName": "BrandNameRequired",
        "type": "number"
    }
];
exports.Material = Material;
/**
*
*/
class MaterialLineItemJoin {
    static getAttributeTypeMap() {
        return MaterialLineItemJoin.attributeTypeMap;
    }
}
MaterialLineItemJoin.discriminator = undefined;
MaterialLineItemJoin.attributeTypeMap = [
    {
        "name": "IDMaterialLineItemJoin",
        "baseName": "IDMaterialLineItemJoin",
        "type": "number"
    },
    {
        "name": "GUIDMaterialLineItemJoin",
        "baseName": "GUIDMaterialLineItemJoin",
        "type": "string"
    },
    {
        "name": "CreateDate",
        "baseName": "CreateDate",
        "type": "Date"
    },
    {
        "name": "CreatingIDUser",
        "baseName": "CreatingIDUser",
        "type": "number"
    },
    {
        "name": "UpdateDate",
        "baseName": "UpdateDate",
        "type": "Date"
    },
    {
        "name": "UpdatingIDUser",
        "baseName": "UpdatingIDUser",
        "type": "number"
    },
    {
        "name": "Deleted",
        "baseName": "Deleted",
        "type": "number"
    },
    {
        "name": "DeleteDate",
        "baseName": "DeleteDate",
        "type": "Date"
    },
    {
        "name": "DeletingIDUser",
        "baseName": "DeletingIDUser",
        "type": "number"
    },
    {
        "name": "ExternalSyncDate",
        "baseName": "ExternalSyncDate",
        "type": "Date"
    },
    {
        "name": "IDCustomer",
        "baseName": "IDCustomer",
        "type": "number"
    },
    {
        "name": "IDLineItem",
        "baseName": "IDLineItem",
        "type": "number"
    },
    {
        "name": "IDMaterial",
        "baseName": "IDMaterial",
        "type": "number"
    },
    {
        "name": "ConversionFactor",
        "baseName": "ConversionFactor",
        "type": "string"
    },
    {
        "name": "ApprovedSourceRequired",
        "baseName": "ApprovedSourceRequired",
        "type": "number"
    },
    {
        "name": "SpecialInstructions",
        "baseName": "SpecialInstructions",
        "type": "string"
    },
    {
        "name": "Units",
        "baseName": "Units",
        "type": "string"
    }
];
exports.MaterialLineItemJoin = MaterialLineItemJoin;
/**
*
*/
class MaterialPayItemJoin {
    static getAttributeTypeMap() {
        return MaterialPayItemJoin.attributeTypeMap;
    }
}
MaterialPayItemJoin.discriminator = undefined;
MaterialPayItemJoin.attributeTypeMap = [
    {
        "name": "IDMaterialPayItemJoin",
        "baseName": "IDMaterialPayItemJoin",
        "type": "number"
    },
    {
        "name": "GUIDMaterialPayItemJoin",
        "baseName": "GUIDMaterialPayItemJoin",
        "type": "string"
    },
    {
        "name": "CreateDate",
        "baseName": "CreateDate",
        "type": "Date"
    },
    {
        "name": "CreatingIDUser",
        "baseName": "CreatingIDUser",
        "type": "number"
    },
    {
        "name": "UpdateDate",
        "baseName": "UpdateDate",
        "type": "Date"
    },
    {
        "name": "UpdatingIDUser",
        "baseName": "UpdatingIDUser",
        "type": "number"
    },
    {
        "name": "Deleted",
        "baseName": "Deleted",
        "type": "number"
    },
    {
        "name": "DeleteDate",
        "baseName": "DeleteDate",
        "type": "Date"
    },
    {
        "name": "DeletingIDUser",
        "baseName": "DeletingIDUser",
        "type": "number"
    },
    {
        "name": "ExternalSyncDate",
        "baseName": "ExternalSyncDate",
        "type": "Date"
    },
    {
        "name": "IDCustomer",
        "baseName": "IDCustomer",
        "type": "number"
    },
    {
        "name": "Approved",
        "baseName": "Approved",
        "type": "number"
    },
    {
        "name": "IDPayItem",
        "baseName": "IDPayItem",
        "type": "number"
    },
    {
        "name": "IDMaterial",
        "baseName": "IDMaterial",
        "type": "number"
    }
];
exports.MaterialPayItemJoin = MaterialPayItemJoin;
/**
*
*/
class MaterialRecordOfMaterialEntryJoin {
    static getAttributeTypeMap() {
        return MaterialRecordOfMaterialEntryJoin.attributeTypeMap;
    }
}
MaterialRecordOfMaterialEntryJoin.discriminator = undefined;
MaterialRecordOfMaterialEntryJoin.attributeTypeMap = [
    {
        "name": "IDMaterialRecordOfMaterialEntryJoin",
        "baseName": "IDMaterialRecordOfMaterialEntryJoin",
        "type": "number"
    },
    {
        "name": "GUIDMaterialRecordOfMaterialEntryJoin",
        "baseName": "GUIDMaterialRecordOfMaterialEntryJoin",
        "type": "string"
    },
    {
        "name": "CreateDate",
        "baseName": "CreateDate",
        "type": "Date"
    },
    {
        "name": "CreatingIDUser",
        "baseName": "CreatingIDUser",
        "type": "number"
    },
    {
        "name": "UpdateDate",
        "baseName": "UpdateDate",
        "type": "Date"
    },
    {
        "name": "UpdatingIDUser",
        "baseName": "UpdatingIDUser",
        "type": "number"
    },
    {
        "name": "Deleted",
        "baseName": "Deleted",
        "type": "number"
    },
    {
        "name": "DeleteDate",
        "baseName": "DeleteDate",
        "type": "Date"
    },
    {
        "name": "DeletingIDUser",
        "baseName": "DeletingIDUser",
        "type": "number"
    },
    {
        "name": "ExternalSyncDate",
        "baseName": "ExternalSyncDate",
        "type": "Date"
    },
    {
        "name": "IDCustomer",
        "baseName": "IDCustomer",
        "type": "number"
    },
    {
        "name": "IDMaterial",
        "baseName": "IDMaterial",
        "type": "number"
    },
    {
        "name": "IDRecordOfMaterialEntry",
        "baseName": "IDRecordOfMaterialEntry",
        "type": "number"
    }
];
exports.MaterialRecordOfMaterialEntryJoin = MaterialRecordOfMaterialEntryJoin;
/**
*
*/
class MixSpecification {
    static getAttributeTypeMap() {
        return MixSpecification.attributeTypeMap;
    }
}
MixSpecification.discriminator = undefined;
MixSpecification.attributeTypeMap = [
    {
        "name": "IDMixSpecification",
        "baseName": "IDMixSpecification",
        "type": "number"
    },
    {
        "name": "GUIDMixSpecification",
        "baseName": "GUIDMixSpecification",
        "type": "string"
    },
    {
        "name": "CreateDate",
        "baseName": "CreateDate",
        "type": "Date"
    },
    {
        "name": "CreatingIDUser",
        "baseName": "CreatingIDUser",
        "type": "number"
    },
    {
        "name": "UpdateDate",
        "baseName": "UpdateDate",
        "type": "Date"
    },
    {
        "name": "UpdatingIDUser",
        "baseName": "UpdatingIDUser",
        "type": "number"
    },
    {
        "name": "Deleted",
        "baseName": "Deleted",
        "type": "number"
    },
    {
        "name": "DeleteDate",
        "baseName": "DeleteDate",
        "type": "Date"
    },
    {
        "name": "DeletingIDUser",
        "baseName": "DeletingIDUser",
        "type": "number"
    },
    {
        "name": "ExternalSyncDate",
        "baseName": "ExternalSyncDate",
        "type": "Date"
    },
    {
        "name": "IDCustomer",
        "baseName": "IDCustomer",
        "type": "number"
    },
    {
        "name": "Name",
        "baseName": "Name",
        "type": "string"
    },
    {
        "name": "Description",
        "baseName": "Description",
        "type": "string"
    },
    {
        "name": "Code",
        "baseName": "Code",
        "type": "string"
    },
    {
        "name": "MaterialType",
        "baseName": "MaterialType",
        "type": "string"
    },
    {
        "name": "EffectiveDate",
        "baseName": "EffectiveDate",
        "type": "Date"
    },
    {
        "name": "ExpirationDate",
        "baseName": "ExpirationDate",
        "type": "Date"
    },
    {
        "name": "ApprovalDate",
        "baseName": "ApprovalDate",
        "type": "Date"
    },
    {
        "name": "ApprovingIDUser",
        "baseName": "ApprovingIDUser",
        "type": "number"
    }
];
exports.MixSpecification = MixSpecification;
/**
*
*/
class MixSpecificationMaterialJoin {
    static getAttributeTypeMap() {
        return MixSpecificationMaterialJoin.attributeTypeMap;
    }
}
MixSpecificationMaterialJoin.discriminator = undefined;
MixSpecificationMaterialJoin.attributeTypeMap = [
    {
        "name": "IDMixSpecificationMaterialJoin",
        "baseName": "IDMixSpecificationMaterialJoin",
        "type": "number"
    },
    {
        "name": "GUIDMixSpecificationMaterialJoin",
        "baseName": "GUIDMixSpecificationMaterialJoin",
        "type": "string"
    },
    {
        "name": "CreateDate",
        "baseName": "CreateDate",
        "type": "Date"
    },
    {
        "name": "CreatingIDUser",
        "baseName": "CreatingIDUser",
        "type": "number"
    },
    {
        "name": "UpdateDate",
        "baseName": "UpdateDate",
        "type": "Date"
    },
    {
        "name": "UpdatingIDUser",
        "baseName": "UpdatingIDUser",
        "type": "number"
    },
    {
        "name": "Deleted",
        "baseName": "Deleted",
        "type": "number"
    },
    {
        "name": "DeleteDate",
        "baseName": "DeleteDate",
        "type": "Date"
    },
    {
        "name": "DeletingIDUser",
        "baseName": "DeletingIDUser",
        "type": "number"
    },
    {
        "name": "ExternalSyncDate",
        "baseName": "ExternalSyncDate",
        "type": "Date"
    },
    {
        "name": "IDCustomer",
        "baseName": "IDCustomer",
        "type": "number"
    },
    {
        "name": "IDMixSpecification",
        "baseName": "IDMixSpecification",
        "type": "number"
    },
    {
        "name": "IDMaterial",
        "baseName": "IDMaterial",
        "type": "number"
    }
];
exports.MixSpecificationMaterialJoin = MixSpecificationMaterialJoin;
/**
*
*/
class ModuleModel {
    static getAttributeTypeMap() {
        return ModuleModel.attributeTypeMap;
    }
}
ModuleModel.discriminator = undefined;
ModuleModel.attributeTypeMap = [
    {
        "name": "IDCustomer",
        "baseName": "IDCustomer",
        "type": "number"
    },
    {
        "name": "Settings",
        "baseName": "Settings",
        "type": "any"
    },
    {
        "name": "Configuration",
        "baseName": "Configuration",
        "type": "any"
    },
    {
        "name": "IDModule",
        "baseName": "IDModule",
        "type": "number"
    },
    {
        "name": "GUIDModule",
        "baseName": "GUIDModule",
        "type": "string"
    },
    {
        "name": "CreateDate",
        "baseName": "CreateDate",
        "type": "Date"
    },
    {
        "name": "CreatingIDUser",
        "baseName": "CreatingIDUser",
        "type": "number"
    },
    {
        "name": "UpdateDate",
        "baseName": "UpdateDate",
        "type": "Date"
    },
    {
        "name": "UpdatingIDUser",
        "baseName": "UpdatingIDUser",
        "type": "number"
    },
    {
        "name": "Deleted",
        "baseName": "Deleted",
        "type": "number"
    },
    {
        "name": "DeleteDate",
        "baseName": "DeleteDate",
        "type": "Date"
    },
    {
        "name": "DeletingIDUser",
        "baseName": "DeletingIDUser",
        "type": "number"
    },
    {
        "name": "Name",
        "baseName": "Name",
        "type": "string"
    },
    {
        "name": "Management",
        "baseName": "Management",
        "type": "number"
    },
    {
        "name": "ModuleHash",
        "baseName": "ModuleHash",
        "type": "string"
    },
    {
        "name": "Ordinal",
        "baseName": "Ordinal",
        "type": "number"
    }
];
exports.ModuleModel = ModuleModel;
/**
*
*/
class Notification {
    static getAttributeTypeMap() {
        return Notification.attributeTypeMap;
    }
}
Notification.discriminator = undefined;
Notification.attributeTypeMap = [
    {
        "name": "IDNotification",
        "baseName": "IDNotification",
        "type": "number"
    },
    {
        "name": "GUIDNotification",
        "baseName": "GUIDNotification",
        "type": "string"
    },
    {
        "name": "CreateDate",
        "baseName": "CreateDate",
        "type": "Date"
    },
    {
        "name": "CreatingIDUser",
        "baseName": "CreatingIDUser",
        "type": "number"
    },
    {
        "name": "UpdateDate",
        "baseName": "UpdateDate",
        "type": "Date"
    },
    {
        "name": "UpdatingIDUser",
        "baseName": "UpdatingIDUser",
        "type": "number"
    },
    {
        "name": "IDNotificationRule",
        "baseName": "IDNotificationRule",
        "type": "number"
    },
    {
        "name": "RecipientIDUser",
        "baseName": "RecipientIDUser",
        "type": "number"
    },
    {
        "name": "NotificationMessage",
        "baseName": "NotificationMessage",
        "type": "string"
    },
    {
        "name": "Unread",
        "baseName": "Unread",
        "type": "number"
    },
    {
        "name": "NotificationType",
        "baseName": "NotificationType",
        "type": "string"
    }
];
exports.Notification = Notification;
/**
*
*/
class ObservationArchive {
    static getAttributeTypeMap() {
        return ObservationArchive.attributeTypeMap;
    }
}
ObservationArchive.discriminator = undefined;
ObservationArchive.attributeTypeMap = [
    {
        "name": "IDObservationArchive",
        "baseName": "IDObservationArchive",
        "type": "number"
    },
    {
        "name": "GUIDObservationArchive",
        "baseName": "GUIDObservationArchive",
        "type": "string"
    },
    {
        "name": "IDObservation",
        "baseName": "IDObservation",
        "type": "number"
    },
    {
        "name": "GUIDObservation",
        "baseName": "GUIDObservation",
        "type": "string"
    },
    {
        "name": "CreateDate",
        "baseName": "CreateDate",
        "type": "Date"
    },
    {
        "name": "CreatingIDUser",
        "baseName": "CreatingIDUser",
        "type": "number"
    },
    {
        "name": "UpdateDate",
        "baseName": "UpdateDate",
        "type": "Date"
    },
    {
        "name": "UpdatingIDUser",
        "baseName": "UpdatingIDUser",
        "type": "number"
    },
    {
        "name": "Deleted",
        "baseName": "Deleted",
        "type": "number"
    },
    {
        "name": "DeleteDate",
        "baseName": "DeleteDate",
        "type": "Date"
    },
    {
        "name": "DeletingIDUser",
        "baseName": "DeletingIDUser",
        "type": "number"
    },
    {
        "name": "Name",
        "baseName": "Name",
        "type": "string"
    },
    {
        "name": "Description",
        "baseName": "Description",
        "type": "string"
    },
    {
        "name": "IDDevice",
        "baseName": "IDDevice",
        "type": "number"
    },
    {
        "name": "CaptureLatitude",
        "baseName": "CaptureLatitude",
        "type": "string"
    },
    {
        "name": "CaptureLongitude",
        "baseName": "CaptureLongitude",
        "type": "string"
    },
    {
        "name": "IDProject",
        "baseName": "IDProject",
        "type": "number"
    },
    {
        "name": "Priority",
        "baseName": "Priority",
        "type": "string"
    },
    {
        "name": "Tags",
        "baseName": "Tags",
        "type": "string"
    },
    {
        "name": "Contractors",
        "baseName": "Contractors",
        "type": "string"
    },
    {
        "name": "BidItems",
        "baseName": "BidItems",
        "type": "string"
    },
    {
        "name": "Version",
        "baseName": "Version",
        "type": "number"
    },
    {
        "name": "SpritePage",
        "baseName": "SpritePage",
        "type": "number"
    },
    {
        "name": "DesignatedTime",
        "baseName": "DesignatedTime",
        "type": "Date"
    },
    {
        "name": "ObservationType",
        "baseName": "ObservationType",
        "type": "string"
    },
    {
        "name": "UserLatitude",
        "baseName": "UserLatitude",
        "type": "string"
    },
    {
        "name": "UserLongitude",
        "baseName": "UserLongitude",
        "type": "string"
    },
    {
        "name": "AlignmentStation",
        "baseName": "AlignmentStation",
        "type": "string"
    },
    {
        "name": "AlignmentOffset",
        "baseName": "AlignmentOffset",
        "type": "string"
    },
    {
        "name": "SnapshotJSON",
        "baseName": "SnapshotJSON",
        "type": "string"
    },
    {
        "name": "AppHash",
        "baseName": "AppHash",
        "type": "string"
    },
    {
        "name": "Locked",
        "baseName": "Locked",
        "type": "number"
    },
    {
        "name": "Transcoded",
        "baseName": "Transcoded",
        "type": "number"
    },
    {
        "name": "Status",
        "baseName": "Status",
        "type": "string"
    },
    {
        "name": "StateName",
        "baseName": "StateName",
        "type": "string"
    },
    {
        "name": "StateStep",
        "baseName": "StateStep",
        "type": "number"
    },
    {
        "name": "LineItems",
        "baseName": "LineItems",
        "type": "string"
    },
    {
        "name": "ExternalSyncDate",
        "baseName": "ExternalSyncDate",
        "type": "Date"
    },
    {
        "name": "Equipment",
        "baseName": "Equipment",
        "type": "string"
    },
    {
        "name": "ExternalSyncGUID",
        "baseName": "ExternalSyncGUID",
        "type": "string"
    }
];
exports.ObservationArchive = ObservationArchive;
/**
*
*/
class ObservationCloneRequest {
    static getAttributeTypeMap() {
        return ObservationCloneRequest.attributeTypeMap;
    }
}
ObservationCloneRequest.discriminator = undefined;
ObservationCloneRequest.attributeTypeMap = [
    {
        "name": "IDObservations",
        "baseName": "IDObservations",
        "type": "Array<number>"
    },
    {
        "name": "IDProject",
        "baseName": "IDProject",
        "type": "number"
    },
    {
        "name": "OffsetFromSpecificTime",
        "baseName": "OffsetFromSpecificTime",
        "type": "Date"
    },
    {
        "name": "OffsetFromCurrentTime",
        "baseName": "OffsetFromCurrentTime",
        "type": "Date"
    }
];
exports.ObservationCloneRequest = ObservationCloneRequest;
/**
*
*/
class ObservationFilterRequest {
    static getAttributeTypeMap() {
        return ObservationFilterRequest.attributeTypeMap;
    }
}
ObservationFilterRequest.discriminator = undefined;
ObservationFilterRequest.attributeTypeMap = [
    {
        "name": "SearchText",
        "baseName": "SearchText",
        "type": "string"
    },
    {
        "name": "Priority",
        "baseName": "Priority",
        "type": "ObservationFilterRequestPriority"
    },
    {
        "name": "ObservationType",
        "baseName": "ObservationType",
        "type": "Array<string>"
    },
    {
        "name": "Contractors",
        "baseName": "Contractors",
        "type": "Array<string>"
    },
    {
        "name": "DesignatedTime",
        "baseName": "DesignatedTime",
        "type": "ObservationFilterRequestDesignatedTime"
    },
    {
        "name": "IDProject",
        "baseName": "IDProject",
        "type": "number"
    },
    {
        "name": "DocumentCount",
        "baseName": "DocumentCount",
        "type": "ObservationFilterRequestPriority"
    },
    {
        "name": "IDArtifact",
        "baseName": "IDArtifact",
        "type": "Array<number>"
    }
];
exports.ObservationFilterRequest = ObservationFilterRequest;
/**
*
*/
class ObservationFilterRequestDesignatedTime {
    static getAttributeTypeMap() {
        return ObservationFilterRequestDesignatedTime.attributeTypeMap;
    }
}
ObservationFilterRequestDesignatedTime.discriminator = undefined;
ObservationFilterRequestDesignatedTime.attributeTypeMap = [
    {
        "name": "From",
        "baseName": "From",
        "type": "Date"
    },
    {
        "name": "To",
        "baseName": "To",
        "type": "Date"
    }
];
exports.ObservationFilterRequestDesignatedTime = ObservationFilterRequestDesignatedTime;
/**
*
*/
class ObservationFilterRequestPriority {
    static getAttributeTypeMap() {
        return ObservationFilterRequestPriority.attributeTypeMap;
    }
}
ObservationFilterRequestPriority.discriminator = undefined;
ObservationFilterRequestPriority.attributeTypeMap = [
    {
        "name": "Compare",
        "baseName": "Compare",
        "type": "string"
    },
    {
        "name": "Value",
        "baseName": "Value",
        "type": "number"
    }
];
exports.ObservationFilterRequestPriority = ObservationFilterRequestPriority;
/**
*
*/
class ObservationModel {
    static getAttributeTypeMap() {
        return ObservationModel.attributeTypeMap;
    }
}
ObservationModel.discriminator = undefined;
ObservationModel.attributeTypeMap = [
    {
        "name": "Labels",
        "baseName": "Labels",
        "type": "ObservationModelLabels"
    },
    {
        "name": "Details",
        "baseName": "Details",
        "type": "MappedArrayArtifact"
    },
    {
        "name": "Statistics",
        "baseName": "Statistics",
        "type": "any"
    },
    {
        "name": "IDObservation",
        "baseName": "IDObservation",
        "type": "number"
    },
    {
        "name": "GUIDObservation",
        "baseName": "GUIDObservation",
        "type": "string"
    },
    {
        "name": "CreateDate",
        "baseName": "CreateDate",
        "type": "Date"
    },
    {
        "name": "CreatingIDUser",
        "baseName": "CreatingIDUser",
        "type": "number"
    },
    {
        "name": "UpdateDate",
        "baseName": "UpdateDate",
        "type": "Date"
    },
    {
        "name": "UpdatingIDUser",
        "baseName": "UpdatingIDUser",
        "type": "number"
    },
    {
        "name": "Deleted",
        "baseName": "Deleted",
        "type": "number"
    },
    {
        "name": "DeleteDate",
        "baseName": "DeleteDate",
        "type": "Date"
    },
    {
        "name": "DeletingIDUser",
        "baseName": "DeletingIDUser",
        "type": "number"
    },
    {
        "name": "Name",
        "baseName": "Name",
        "type": "string"
    },
    {
        "name": "Description",
        "baseName": "Description",
        "type": "string"
    },
    {
        "name": "IDDevice",
        "baseName": "IDDevice",
        "type": "number"
    },
    {
        "name": "CaptureLatitude",
        "baseName": "CaptureLatitude",
        "type": "string"
    },
    {
        "name": "CaptureLongitude",
        "baseName": "CaptureLongitude",
        "type": "string"
    },
    {
        "name": "IDProject",
        "baseName": "IDProject",
        "type": "number"
    },
    {
        "name": "Priority",
        "baseName": "Priority",
        "type": "string"
    },
    {
        "name": "Version",
        "baseName": "Version",
        "type": "number"
    },
    {
        "name": "SpritePage",
        "baseName": "SpritePage",
        "type": "number"
    },
    {
        "name": "DesignatedTime",
        "baseName": "DesignatedTime",
        "type": "Date"
    },
    {
        "name": "ObservationType",
        "baseName": "ObservationType",
        "type": "string"
    },
    {
        "name": "UserLatitude",
        "baseName": "UserLatitude",
        "type": "string"
    },
    {
        "name": "UserLongitude",
        "baseName": "UserLongitude",
        "type": "string"
    },
    {
        "name": "AlignmentStation",
        "baseName": "AlignmentStation",
        "type": "string"
    },
    {
        "name": "AlignmentOffset",
        "baseName": "AlignmentOffset",
        "type": "string"
    },
    {
        "name": "AppHash",
        "baseName": "AppHash",
        "type": "string"
    },
    {
        "name": "Locked",
        "baseName": "Locked",
        "type": "number"
    },
    {
        "name": "Transcoded",
        "baseName": "Transcoded",
        "type": "number"
    },
    {
        "name": "Status",
        "baseName": "Status",
        "type": "string"
    },
    {
        "name": "StateName",
        "baseName": "StateName",
        "type": "string"
    },
    {
        "name": "StateStep",
        "baseName": "StateStep",
        "type": "number"
    },
    {
        "name": "ExternalSyncDate",
        "baseName": "ExternalSyncDate",
        "type": "Date"
    },
    {
        "name": "ExternalSyncGUID",
        "baseName": "ExternalSyncGUID",
        "type": "string"
    }
];
exports.ObservationModel = ObservationModel;
/**
*
*/
class ObservationModelLabels {
    static getAttributeTypeMap() {
        return ObservationModelLabels.attributeTypeMap;
    }
}
ObservationModelLabels.discriminator = undefined;
ObservationModelLabels.attributeTypeMap = [
    {
        "name": "SAVE",
        "baseName": "SAVE",
        "type": "boolean"
    }
];
exports.ObservationModelLabels = ObservationModelLabels;
/**
*
*/
class Organization {
    static getAttributeTypeMap() {
        return Organization.attributeTypeMap;
    }
}
Organization.discriminator = undefined;
Organization.attributeTypeMap = [
    {
        "name": "IDOrganization",
        "baseName": "IDOrganization",
        "type": "number"
    },
    {
        "name": "GUIDOrganization",
        "baseName": "GUIDOrganization",
        "type": "string"
    },
    {
        "name": "CreateDate",
        "baseName": "CreateDate",
        "type": "Date"
    },
    {
        "name": "CreatingIDUser",
        "baseName": "CreatingIDUser",
        "type": "number"
    },
    {
        "name": "UpdateDate",
        "baseName": "UpdateDate",
        "type": "Date"
    },
    {
        "name": "UpdatingIDUser",
        "baseName": "UpdatingIDUser",
        "type": "number"
    },
    {
        "name": "Deleted",
        "baseName": "Deleted",
        "type": "number"
    },
    {
        "name": "DeleteDate",
        "baseName": "DeleteDate",
        "type": "Date"
    },
    {
        "name": "DeletingIDUser",
        "baseName": "DeletingIDUser",
        "type": "number"
    },
    {
        "name": "Name",
        "baseName": "Name",
        "type": "string"
    },
    {
        "name": "DisadvantagedBusiness",
        "baseName": "DisadvantagedBusiness",
        "type": "number"
    },
    {
        "name": "Address",
        "baseName": "Address",
        "type": "string"
    },
    {
        "name": "City",
        "baseName": "City",
        "type": "string"
    },
    {
        "name": "State",
        "baseName": "State",
        "type": "string"
    },
    {
        "name": "Zip",
        "baseName": "Zip",
        "type": "string"
    },
    {
        "name": "Phone",
        "baseName": "Phone",
        "type": "string"
    },
    {
        "name": "Approved",
        "baseName": "Approved",
        "type": "number"
    },
    {
        "name": "IDCustomer",
        "baseName": "IDCustomer",
        "type": "number"
    },
    {
        "name": "ExternalSyncDate",
        "baseName": "ExternalSyncDate",
        "type": "Date"
    },
    {
        "name": "Email",
        "baseName": "Email",
        "type": "string"
    },
    {
        "name": "Type",
        "baseName": "Type",
        "type": "string"
    }
];
exports.Organization = Organization;
/**
*
*/
class OrganizationMaterialJoin {
    static getAttributeTypeMap() {
        return OrganizationMaterialJoin.attributeTypeMap;
    }
}
OrganizationMaterialJoin.discriminator = undefined;
OrganizationMaterialJoin.attributeTypeMap = [
    {
        "name": "IDOrganizationMaterialJoin",
        "baseName": "IDOrganizationMaterialJoin",
        "type": "number"
    },
    {
        "name": "GUIDOrganizationMaterialJoin",
        "baseName": "GUIDOrganizationMaterialJoin",
        "type": "string"
    },
    {
        "name": "CreateDate",
        "baseName": "CreateDate",
        "type": "Date"
    },
    {
        "name": "CreatingIDUser",
        "baseName": "CreatingIDUser",
        "type": "number"
    },
    {
        "name": "UpdateDate",
        "baseName": "UpdateDate",
        "type": "Date"
    },
    {
        "name": "UpdatingIDUser",
        "baseName": "UpdatingIDUser",
        "type": "number"
    },
    {
        "name": "Deleted",
        "baseName": "Deleted",
        "type": "number"
    },
    {
        "name": "DeleteDate",
        "baseName": "DeleteDate",
        "type": "Date"
    },
    {
        "name": "DeletingIDUser",
        "baseName": "DeletingIDUser",
        "type": "number"
    },
    {
        "name": "ExternalSyncDate",
        "baseName": "ExternalSyncDate",
        "type": "Date"
    },
    {
        "name": "IDCustomer",
        "baseName": "IDCustomer",
        "type": "number"
    },
    {
        "name": "IDOrganization",
        "baseName": "IDOrganization",
        "type": "number"
    },
    {
        "name": "IDMaterial",
        "baseName": "IDMaterial",
        "type": "number"
    },
    {
        "name": "EffectiveDate",
        "baseName": "EffectiveDate",
        "type": "Date"
    },
    {
        "name": "ExpirationDate",
        "baseName": "ExpirationDate",
        "type": "Date"
    },
    {
        "name": "ApprovedStatusType",
        "baseName": "ApprovedStatusType",
        "type": "string"
    },
    {
        "name": "SourceType",
        "baseName": "SourceType",
        "type": "string"
    }
];
exports.OrganizationMaterialJoin = OrganizationMaterialJoin;
/**
*
*/
class PayItemModel {
    static getAttributeTypeMap() {
        return PayItemModel.attributeTypeMap;
    }
}
PayItemModel.discriminator = undefined;
PayItemModel.attributeTypeMap = [
    {
        "name": "Extended",
        "baseName": "Extended",
        "type": "any"
    },
    {
        "name": "IDPayItem",
        "baseName": "IDPayItem",
        "type": "number"
    },
    {
        "name": "GUIDPayItem",
        "baseName": "GUIDPayItem",
        "type": "string"
    },
    {
        "name": "CreateDate",
        "baseName": "CreateDate",
        "type": "Date"
    },
    {
        "name": "CreatingIDUser",
        "baseName": "CreatingIDUser",
        "type": "number"
    },
    {
        "name": "UpdateDate",
        "baseName": "UpdateDate",
        "type": "Date"
    },
    {
        "name": "UpdatingIDUser",
        "baseName": "UpdatingIDUser",
        "type": "number"
    },
    {
        "name": "Deleted",
        "baseName": "Deleted",
        "type": "number"
    },
    {
        "name": "DeleteDate",
        "baseName": "DeleteDate",
        "type": "Date"
    },
    {
        "name": "DeletingIDUser",
        "baseName": "DeletingIDUser",
        "type": "number"
    },
    {
        "name": "Name",
        "baseName": "Name",
        "type": "string"
    },
    {
        "name": "Description",
        "baseName": "Description",
        "type": "string"
    },
    {
        "name": "Units",
        "baseName": "Units",
        "type": "string"
    },
    {
        "name": "Amount",
        "baseName": "Amount",
        "type": "string"
    },
    {
        "name": "IDCustomer",
        "baseName": "IDCustomer",
        "type": "number"
    },
    {
        "name": "ExternalSyncDate",
        "baseName": "ExternalSyncDate",
        "type": "Date"
    }
];
exports.PayItemModel = PayItemModel;
/**
*
*/
class Product {
    static getAttributeTypeMap() {
        return Product.attributeTypeMap;
    }
}
Product.discriminator = undefined;
Product.attributeTypeMap = [
    {
        "name": "IDProduct",
        "baseName": "IDProduct",
        "type": "number"
    },
    {
        "name": "GUIDProduct",
        "baseName": "GUIDProduct",
        "type": "string"
    },
    {
        "name": "CreateDate",
        "baseName": "CreateDate",
        "type": "Date"
    },
    {
        "name": "CreatingIDUser",
        "baseName": "CreatingIDUser",
        "type": "number"
    },
    {
        "name": "UpdateDate",
        "baseName": "UpdateDate",
        "type": "Date"
    },
    {
        "name": "UpdatingIDUser",
        "baseName": "UpdatingIDUser",
        "type": "number"
    },
    {
        "name": "Deleted",
        "baseName": "Deleted",
        "type": "number"
    },
    {
        "name": "DeleteDate",
        "baseName": "DeleteDate",
        "type": "Date"
    },
    {
        "name": "DeletingIDUser",
        "baseName": "DeletingIDUser",
        "type": "number"
    },
    {
        "name": "IDCustomer",
        "baseName": "IDCustomer",
        "type": "number"
    },
    {
        "name": "Name",
        "baseName": "Name",
        "type": "string"
    },
    {
        "name": "ManufacturerCode",
        "baseName": "ManufacturerCode",
        "type": "string"
    },
    {
        "name": "AcceptanceMethod",
        "baseName": "AcceptanceMethod",
        "type": "string"
    },
    {
        "name": "ProductCategory",
        "baseName": "ProductCategory",
        "type": "string"
    },
    {
        "name": "CatalogCode",
        "baseName": "CatalogCode",
        "type": "string"
    },
    {
        "name": "EffectiveDate",
        "baseName": "EffectiveDate",
        "type": "Date"
    },
    {
        "name": "ExpirationDate",
        "baseName": "ExpirationDate",
        "type": "Date"
    },
    {
        "name": "Comments",
        "baseName": "Comments",
        "type": "string"
    },
    {
        "name": "IDMaterial",
        "baseName": "IDMaterial",
        "type": "number"
    },
    {
        "name": "IDOrganization",
        "baseName": "IDOrganization",
        "type": "number"
    }
];
exports.Product = Product;
/**
*
*/
class ProductionPlant {
    static getAttributeTypeMap() {
        return ProductionPlant.attributeTypeMap;
    }
}
ProductionPlant.discriminator = undefined;
ProductionPlant.attributeTypeMap = [
    {
        "name": "IDProductionPlant",
        "baseName": "IDProductionPlant",
        "type": "number"
    },
    {
        "name": "GUIDProductionPlant",
        "baseName": "GUIDProductionPlant",
        "type": "string"
    },
    {
        "name": "CreateDate",
        "baseName": "CreateDate",
        "type": "Date"
    },
    {
        "name": "CreatingIDUser",
        "baseName": "CreatingIDUser",
        "type": "number"
    },
    {
        "name": "UpdateDate",
        "baseName": "UpdateDate",
        "type": "Date"
    },
    {
        "name": "UpdatingIDUser",
        "baseName": "UpdatingIDUser",
        "type": "number"
    },
    {
        "name": "Deleted",
        "baseName": "Deleted",
        "type": "number"
    },
    {
        "name": "DeleteDate",
        "baseName": "DeleteDate",
        "type": "Date"
    },
    {
        "name": "DeletingIDUser",
        "baseName": "DeletingIDUser",
        "type": "number"
    },
    {
        "name": "ExternalSyncDate",
        "baseName": "ExternalSyncDate",
        "type": "Date"
    },
    {
        "name": "IDCustomer",
        "baseName": "IDCustomer",
        "type": "number"
    },
    {
        "name": "Name",
        "baseName": "Name",
        "type": "string"
    },
    {
        "name": "IDOrganization",
        "baseName": "IDOrganization",
        "type": "number"
    },
    {
        "name": "IDOrganizationAddress",
        "baseName": "IDOrganizationAddress",
        "type": "number"
    },
    {
        "name": "Notes",
        "baseName": "Notes",
        "type": "string"
    }
];
exports.ProductionPlant = ProductionPlant;
/**
*
*/
class ProductionPlantMaterialApproval {
    static getAttributeTypeMap() {
        return ProductionPlantMaterialApproval.attributeTypeMap;
    }
}
ProductionPlantMaterialApproval.discriminator = undefined;
ProductionPlantMaterialApproval.attributeTypeMap = [
    {
        "name": "IDProductionPlantMaterialApproval",
        "baseName": "IDProductionPlantMaterialApproval",
        "type": "number"
    },
    {
        "name": "GUIDProductionPlantMaterialApproval",
        "baseName": "GUIDProductionPlantMaterialApproval",
        "type": "string"
    },
    {
        "name": "CreateDate",
        "baseName": "CreateDate",
        "type": "Date"
    },
    {
        "name": "CreatingIDUser",
        "baseName": "CreatingIDUser",
        "type": "number"
    },
    {
        "name": "UpdateDate",
        "baseName": "UpdateDate",
        "type": "Date"
    },
    {
        "name": "UpdatingIDUser",
        "baseName": "UpdatingIDUser",
        "type": "number"
    },
    {
        "name": "Deleted",
        "baseName": "Deleted",
        "type": "number"
    },
    {
        "name": "DeleteDate",
        "baseName": "DeleteDate",
        "type": "Date"
    },
    {
        "name": "DeletingIDUser",
        "baseName": "DeletingIDUser",
        "type": "number"
    },
    {
        "name": "ExternalSyncDate",
        "baseName": "ExternalSyncDate",
        "type": "Date"
    },
    {
        "name": "IDCustomer",
        "baseName": "IDCustomer",
        "type": "number"
    },
    {
        "name": "IDMaterial",
        "baseName": "IDMaterial",
        "type": "number"
    },
    {
        "name": "IDMixSpecification",
        "baseName": "IDMixSpecification",
        "type": "number"
    },
    {
        "name": "IDProductionPlant",
        "baseName": "IDProductionPlant",
        "type": "number"
    },
    {
        "name": "StartDate",
        "baseName": "StartDate",
        "type": "Date"
    },
    {
        "name": "EndDate",
        "baseName": "EndDate",
        "type": "Date"
    },
    {
        "name": "Notes",
        "baseName": "Notes",
        "type": "string"
    }
];
exports.ProductionPlantMaterialApproval = ProductionPlantMaterialApproval;
/**
*
*/
class ProjectModel {
    static getAttributeTypeMap() {
        return ProjectModel.attributeTypeMap;
    }
}
ProjectModel.discriminator = undefined;
ProjectModel.attributeTypeMap = [
    {
        "name": "Tags",
        "baseName": "Tags",
        "type": "Array<string>"
    },
    {
        "name": "BidItems",
        "baseName": "BidItems",
        "type": "Array<string>"
    },
    {
        "name": "LineItems",
        "baseName": "LineItems",
        "type": "Array<string>"
    },
    {
        "name": "Contractors",
        "baseName": "Contractors",
        "type": "Array<string>"
    },
    {
        "name": "TagTypes",
        "baseName": "TagTypes",
        "type": "Array<string>"
    },
    {
        "name": "LabelTypes",
        "baseName": "LabelTypes",
        "type": "any"
    },
    {
        "name": "CustomProperties",
        "baseName": "CustomProperties",
        "type": "any"
    },
    {
        "name": "IDProject",
        "baseName": "IDProject",
        "type": "number"
    },
    {
        "name": "GUIDProject",
        "baseName": "GUIDProject",
        "type": "string"
    },
    {
        "name": "CreateDate",
        "baseName": "CreateDate",
        "type": "Date"
    },
    {
        "name": "CreatingIDUser",
        "baseName": "CreatingIDUser",
        "type": "number"
    },
    {
        "name": "UpdateDate",
        "baseName": "UpdateDate",
        "type": "Date"
    },
    {
        "name": "UpdatingIDUser",
        "baseName": "UpdatingIDUser",
        "type": "number"
    },
    {
        "name": "Name",
        "baseName": "Name",
        "type": "string"
    },
    {
        "name": "Description",
        "baseName": "Description",
        "type": "string"
    },
    {
        "name": "Deleted",
        "baseName": "Deleted",
        "type": "number"
    },
    {
        "name": "DeleteDate",
        "baseName": "DeleteDate",
        "type": "Date"
    },
    {
        "name": "DeletingIDUser",
        "baseName": "DeletingIDUser",
        "type": "number"
    },
    {
        "name": "Latitude",
        "baseName": "Latitude",
        "type": "string"
    },
    {
        "name": "Longitude",
        "baseName": "Longitude",
        "type": "string"
    },
    {
        "name": "IDCustomer",
        "baseName": "IDCustomer",
        "type": "number"
    },
    {
        "name": "IDContract",
        "baseName": "IDContract",
        "type": "number"
    },
    {
        "name": "ExternalSyncDate",
        "baseName": "ExternalSyncDate",
        "type": "Date"
    },
    {
        "name": "Timezone",
        "baseName": "Timezone",
        "type": "string"
    },
    {
        "name": "Status",
        "baseName": "Status",
        "type": "string"
    }
];
exports.ProjectModel = ProjectModel;
/**
*
*/
class QueryRequest {
    static getAttributeTypeMap() {
        return QueryRequest.attributeTypeMap;
    }
}
QueryRequest.discriminator = undefined;
QueryRequest.attributeTypeMap = [
    {
        "name": "Filters",
        "baseName": "Filters",
        "type": "Array<any>"
    },
    {
        "name": "SelectFields",
        "baseName": "SelectFields",
        "type": "Array<any>"
    },
    {
        "name": "Joins",
        "baseName": "Joins",
        "type": "Array<any>"
    },
    {
        "name": "SortFields",
        "baseName": "SortFields",
        "type": "Array<any>"
    },
    {
        "name": "Begin",
        "baseName": "Begin",
        "type": "number"
    },
    {
        "name": "Cap",
        "baseName": "Cap",
        "type": "number"
    }
];
exports.QueryRequest = QueryRequest;
/**
*
*/
class RecordOfMaterial {
    static getAttributeTypeMap() {
        return RecordOfMaterial.attributeTypeMap;
    }
}
RecordOfMaterial.discriminator = undefined;
RecordOfMaterial.attributeTypeMap = [
    {
        "name": "IDRecordOfMaterial",
        "baseName": "IDRecordOfMaterial",
        "type": "number"
    },
    {
        "name": "GUIDRecordOfMaterial",
        "baseName": "GUIDRecordOfMaterial",
        "type": "string"
    },
    {
        "name": "CreateDate",
        "baseName": "CreateDate",
        "type": "Date"
    },
    {
        "name": "CreatingIDUser",
        "baseName": "CreatingIDUser",
        "type": "number"
    },
    {
        "name": "UpdateDate",
        "baseName": "UpdateDate",
        "type": "Date"
    },
    {
        "name": "UpdatingIDUser",
        "baseName": "UpdatingIDUser",
        "type": "number"
    },
    {
        "name": "Deleted",
        "baseName": "Deleted",
        "type": "number"
    },
    {
        "name": "DeleteDate",
        "baseName": "DeleteDate",
        "type": "Date"
    },
    {
        "name": "DeletingIDUser",
        "baseName": "DeletingIDUser",
        "type": "number"
    },
    {
        "name": "ExternalSyncDate",
        "baseName": "ExternalSyncDate",
        "type": "Date"
    },
    {
        "name": "IDCustomer",
        "baseName": "IDCustomer",
        "type": "number"
    },
    {
        "name": "IDProject",
        "baseName": "IDProject",
        "type": "number"
    },
    {
        "name": "Notes",
        "baseName": "Notes",
        "type": "string"
    }
];
exports.RecordOfMaterial = RecordOfMaterial;
/**
*
*/
class RecordOfMaterialEntry {
    static getAttributeTypeMap() {
        return RecordOfMaterialEntry.attributeTypeMap;
    }
}
RecordOfMaterialEntry.discriminator = undefined;
RecordOfMaterialEntry.attributeTypeMap = [
    {
        "name": "IDRecordOfMaterialEntry",
        "baseName": "IDRecordOfMaterialEntry",
        "type": "number"
    },
    {
        "name": "GUIDRecordOfMaterialEntry",
        "baseName": "GUIDRecordOfMaterialEntry",
        "type": "string"
    },
    {
        "name": "CreateDate",
        "baseName": "CreateDate",
        "type": "Date"
    },
    {
        "name": "CreatingIDUser",
        "baseName": "CreatingIDUser",
        "type": "number"
    },
    {
        "name": "UpdateDate",
        "baseName": "UpdateDate",
        "type": "Date"
    },
    {
        "name": "UpdatingIDUser",
        "baseName": "UpdatingIDUser",
        "type": "number"
    },
    {
        "name": "Deleted",
        "baseName": "Deleted",
        "type": "number"
    },
    {
        "name": "DeleteDate",
        "baseName": "DeleteDate",
        "type": "Date"
    },
    {
        "name": "DeletingIDUser",
        "baseName": "DeletingIDUser",
        "type": "number"
    },
    {
        "name": "ExternalSyncDate",
        "baseName": "ExternalSyncDate",
        "type": "Date"
    },
    {
        "name": "IDCustomer",
        "baseName": "IDCustomer",
        "type": "number"
    },
    {
        "name": "IDProject",
        "baseName": "IDProject",
        "type": "number"
    },
    {
        "name": "IDRecordOfMaterial",
        "baseName": "IDRecordOfMaterial",
        "type": "number"
    },
    {
        "name": "IDBidItem",
        "baseName": "IDBidItem",
        "type": "number"
    },
    {
        "name": "IDLineItem",
        "baseName": "IDLineItem",
        "type": "number"
    },
    {
        "name": "Notes",
        "baseName": "Notes",
        "type": "string"
    }
];
exports.RecordOfMaterialEntry = RecordOfMaterialEntry;
/**
*
*/
class RecordOfMaterialEntryArchive {
    static getAttributeTypeMap() {
        return RecordOfMaterialEntryArchive.attributeTypeMap;
    }
}
RecordOfMaterialEntryArchive.discriminator = undefined;
RecordOfMaterialEntryArchive.attributeTypeMap = [
    {
        "name": "IDRecordOfMaterialEntryArchive",
        "baseName": "IDRecordOfMaterialEntryArchive",
        "type": "number"
    },
    {
        "name": "GUIDRecordOfMaterialEntryArchive",
        "baseName": "GUIDRecordOfMaterialEntryArchive",
        "type": "string"
    },
    {
        "name": "CreateDate",
        "baseName": "CreateDate",
        "type": "Date"
    },
    {
        "name": "CreatingIDUser",
        "baseName": "CreatingIDUser",
        "type": "number"
    },
    {
        "name": "UpdateDate",
        "baseName": "UpdateDate",
        "type": "Date"
    },
    {
        "name": "UpdatingIDUser",
        "baseName": "UpdatingIDUser",
        "type": "number"
    },
    {
        "name": "Deleted",
        "baseName": "Deleted",
        "type": "number"
    },
    {
        "name": "DeleteDate",
        "baseName": "DeleteDate",
        "type": "Date"
    },
    {
        "name": "DeletingIDUser",
        "baseName": "DeletingIDUser",
        "type": "number"
    },
    {
        "name": "ExternalSyncDate",
        "baseName": "ExternalSyncDate",
        "type": "Date"
    },
    {
        "name": "IDCustomer",
        "baseName": "IDCustomer",
        "type": "number"
    },
    {
        "name": "IDRecordOfMaterialEntry",
        "baseName": "IDRecordOfMaterialEntry",
        "type": "number"
    },
    {
        "name": "RecordOfMaterialEntry",
        "baseName": "RecordOfMaterialEntry",
        "type": "string"
    }
];
exports.RecordOfMaterialEntryArchive = RecordOfMaterialEntryArchive;
/**
*
*/
class ReportModel {
    static getAttributeTypeMap() {
        return ReportModel.attributeTypeMap;
    }
}
ReportModel.discriminator = undefined;
ReportModel.attributeTypeMap = [
    {
        "name": "Options",
        "baseName": "Options",
        "type": "any"
    },
    {
        "name": "IDReportArchetype",
        "baseName": "IDReportArchetype",
        "type": "number"
    },
    {
        "name": "GUIDReportArchetype",
        "baseName": "GUIDReportArchetype",
        "type": "string"
    },
    {
        "name": "CreateDate",
        "baseName": "CreateDate",
        "type": "Date"
    },
    {
        "name": "CreatingIDUser",
        "baseName": "CreatingIDUser",
        "type": "number"
    },
    {
        "name": "UpdateDate",
        "baseName": "UpdateDate",
        "type": "Date"
    },
    {
        "name": "UpdatingIDUser",
        "baseName": "UpdatingIDUser",
        "type": "number"
    },
    {
        "name": "Deleted",
        "baseName": "Deleted",
        "type": "number"
    },
    {
        "name": "DeleteDate",
        "baseName": "DeleteDate",
        "type": "Date"
    },
    {
        "name": "DeletingIDUser",
        "baseName": "DeletingIDUser",
        "type": "number"
    },
    {
        "name": "Archetype",
        "baseName": "Archetype",
        "type": "string"
    },
    {
        "name": "IDCustomer",
        "baseName": "IDCustomer",
        "type": "number"
    }
];
exports.ReportModel = ReportModel;
/**
*
*/
class ReportNamedInstanceModel {
    static getAttributeTypeMap() {
        return ReportNamedInstanceModel.attributeTypeMap;
    }
}
ReportNamedInstanceModel.discriminator = undefined;
ReportNamedInstanceModel.attributeTypeMap = [
    {
        "name": "Archetype",
        "baseName": "Archetype",
        "type": "string"
    },
    {
        "name": "Options",
        "baseName": "Options",
        "type": "any"
    },
    {
        "name": "IDReportNamedInstance",
        "baseName": "IDReportNamedInstance",
        "type": "number"
    },
    {
        "name": "GUIDReportNamedInstance",
        "baseName": "GUIDReportNamedInstance",
        "type": "string"
    },
    {
        "name": "CreateDate",
        "baseName": "CreateDate",
        "type": "Date"
    },
    {
        "name": "CreatingIDUser",
        "baseName": "CreatingIDUser",
        "type": "number"
    },
    {
        "name": "UpdateDate",
        "baseName": "UpdateDate",
        "type": "Date"
    },
    {
        "name": "UpdatingIDUser",
        "baseName": "UpdatingIDUser",
        "type": "number"
    },
    {
        "name": "Deleted",
        "baseName": "Deleted",
        "type": "number"
    },
    {
        "name": "DeleteDate",
        "baseName": "DeleteDate",
        "type": "Date"
    },
    {
        "name": "DeletingIDUser",
        "baseName": "DeletingIDUser",
        "type": "number"
    },
    {
        "name": "Name",
        "baseName": "Name",
        "type": "string"
    },
    {
        "name": "Hash",
        "baseName": "Hash",
        "type": "string"
    },
    {
        "name": "OptionsJSON",
        "baseName": "OptionsJSON",
        "type": "string"
    },
    {
        "name": "IDReportArchetype",
        "baseName": "IDReportArchetype",
        "type": "number"
    },
    {
        "name": "IDCustomer",
        "baseName": "IDCustomer",
        "type": "number"
    }
];
exports.ReportNamedInstanceModel = ReportNamedInstanceModel;
/**
*
*/
class ReportRenderResult {
    static getAttributeTypeMap() {
        return ReportRenderResult.attributeTypeMap;
    }
}
ReportRenderResult.discriminator = undefined;
ReportRenderResult.attributeTypeMap = [
    {
        "name": "GUIDReportDescription",
        "baseName": "GUIDReportDescription",
        "type": "string"
    }
];
exports.ReportRenderResult = ReportRenderResult;
/**
*
*/
class Sample {
    static getAttributeTypeMap() {
        return Sample.attributeTypeMap;
    }
}
Sample.discriminator = undefined;
Sample.attributeTypeMap = [
    {
        "name": "IDSample",
        "baseName": "IDSample",
        "type": "number"
    },
    {
        "name": "GUIDSample",
        "baseName": "GUIDSample",
        "type": "string"
    },
    {
        "name": "CreateDate",
        "baseName": "CreateDate",
        "type": "Date"
    },
    {
        "name": "CreatingIDUser",
        "baseName": "CreatingIDUser",
        "type": "number"
    },
    {
        "name": "UpdateDate",
        "baseName": "UpdateDate",
        "type": "Date"
    },
    {
        "name": "UpdatingIDUser",
        "baseName": "UpdatingIDUser",
        "type": "number"
    },
    {
        "name": "Deleted",
        "baseName": "Deleted",
        "type": "number"
    },
    {
        "name": "DeleteDate",
        "baseName": "DeleteDate",
        "type": "Date"
    },
    {
        "name": "DeletingIDUser",
        "baseName": "DeletingIDUser",
        "type": "number"
    },
    {
        "name": "ExternalSyncDate",
        "baseName": "ExternalSyncDate",
        "type": "Date"
    },
    {
        "name": "IDCustomer",
        "baseName": "IDCustomer",
        "type": "number"
    },
    {
        "name": "QRCode",
        "baseName": "QRCode",
        "type": "string"
    },
    {
        "name": "CaptureLatitude",
        "baseName": "CaptureLatitude",
        "type": "string"
    },
    {
        "name": "CaptureLongitude",
        "baseName": "CaptureLongitude",
        "type": "string"
    },
    {
        "name": "Name",
        "baseName": "Name",
        "type": "string"
    },
    {
        "name": "IDProject",
        "baseName": "IDProject",
        "type": "number"
    },
    {
        "name": "ParentIDSample",
        "baseName": "ParentIDSample",
        "type": "number"
    },
    {
        "name": "IDMaterial",
        "baseName": "IDMaterial",
        "type": "number"
    },
    {
        "name": "Notes",
        "baseName": "Notes",
        "type": "string"
    },
    {
        "name": "IDProductionPlant",
        "baseName": "IDProductionPlant",
        "type": "number"
    },
    {
        "name": "IDLineItem",
        "baseName": "IDLineItem",
        "type": "number"
    },
    {
        "name": "RepresentedQuantityUnits",
        "baseName": "RepresentedQuantityUnits",
        "type": "string"
    },
    {
        "name": "SampledQuantityUnits",
        "baseName": "SampledQuantityUnits",
        "type": "string"
    },
    {
        "name": "LabControlNumber",
        "baseName": "LabControlNumber",
        "type": "string"
    },
    {
        "name": "LabReferenceNumber",
        "baseName": "LabReferenceNumber",
        "type": "string"
    },
    {
        "name": "ProductName",
        "baseName": "ProductName",
        "type": "string"
    },
    {
        "name": "MaterialType",
        "baseName": "MaterialType",
        "type": "string"
    },
    {
        "name": "IDOrganization",
        "baseName": "IDOrganization",
        "type": "number"
    },
    {
        "name": "IDMixDesign",
        "baseName": "IDMixDesign",
        "type": "number"
    },
    {
        "name": "ManufacturerCode",
        "baseName": "ManufacturerCode",
        "type": "string"
    },
    {
        "name": "IntendedUse",
        "baseName": "IntendedUse",
        "type": "string"
    },
    {
        "name": "BuyUSA",
        "baseName": "BuyUSA",
        "type": "number"
    },
    {
        "name": "ReceivedFrom",
        "baseName": "ReceivedFrom",
        "type": "string"
    },
    {
        "name": "GeographicalArea",
        "baseName": "GeographicalArea",
        "type": "string"
    },
    {
        "name": "Station",
        "baseName": "Station",
        "type": "string"
    },
    {
        "name": "Offset",
        "baseName": "Offset",
        "type": "string"
    },
    {
        "name": "RepresentedQuantity",
        "baseName": "RepresentedQuantity",
        "type": "string"
    },
    {
        "name": "SampledQuantity",
        "baseName": "SampledQuantity",
        "type": "string"
    },
    {
        "name": "Units",
        "baseName": "Units",
        "type": "string"
    },
    {
        "name": "RequestedBy",
        "baseName": "RequestedBy",
        "type": "string"
    },
    {
        "name": "Status",
        "baseName": "Status",
        "type": "string"
    },
    {
        "name": "ExternalSyncGUID",
        "baseName": "ExternalSyncGUID",
        "type": "string"
    },
    {
        "name": "IDLab",
        "baseName": "IDLab",
        "type": "number"
    },
    {
        "name": "IDProduct",
        "baseName": "IDProduct",
        "type": "number"
    },
    {
        "name": "SampledByIDUser",
        "baseName": "SampledByIDUser",
        "type": "number"
    },
    {
        "name": "WitnessIDUser",
        "baseName": "WitnessIDUser",
        "type": "number"
    },
    {
        "name": "AuthorizedIDUser",
        "baseName": "AuthorizedIDUser",
        "type": "number"
    },
    {
        "name": "CMSIDUser",
        "baseName": "CMSIDUser",
        "type": "number"
    },
    {
        "name": "Datum",
        "baseName": "Datum",
        "type": "string"
    }
];
exports.Sample = Sample;
/**
*
*/
class SampleLabJoin {
    static getAttributeTypeMap() {
        return SampleLabJoin.attributeTypeMap;
    }
}
SampleLabJoin.discriminator = undefined;
SampleLabJoin.attributeTypeMap = [
    {
        "name": "IDSampleLabJoin",
        "baseName": "IDSampleLabJoin",
        "type": "number"
    },
    {
        "name": "GUIDSampleLabJoin",
        "baseName": "GUIDSampleLabJoin",
        "type": "string"
    },
    {
        "name": "CreateDate",
        "baseName": "CreateDate",
        "type": "Date"
    },
    {
        "name": "CreatingIDUser",
        "baseName": "CreatingIDUser",
        "type": "number"
    },
    {
        "name": "UpdateDate",
        "baseName": "UpdateDate",
        "type": "Date"
    },
    {
        "name": "UpdatingIDUser",
        "baseName": "UpdatingIDUser",
        "type": "number"
    },
    {
        "name": "IDCustomer",
        "baseName": "IDCustomer",
        "type": "number"
    },
    {
        "name": "IDLab",
        "baseName": "IDLab",
        "type": "number"
    },
    {
        "name": "IDSample",
        "baseName": "IDSample",
        "type": "number"
    },
    {
        "name": "Received",
        "baseName": "Received",
        "type": "number"
    }
];
exports.SampleLabJoin = SampleLabJoin;
/**
*
*/
class SampleLineItemJoin {
    static getAttributeTypeMap() {
        return SampleLineItemJoin.attributeTypeMap;
    }
}
SampleLineItemJoin.discriminator = undefined;
SampleLineItemJoin.attributeTypeMap = [
    {
        "name": "IDSampleLineItemJoin",
        "baseName": "IDSampleLineItemJoin",
        "type": "number"
    },
    {
        "name": "GUIDSampleLineItemJoin",
        "baseName": "GUIDSampleLineItemJoin",
        "type": "string"
    },
    {
        "name": "CreateDate",
        "baseName": "CreateDate",
        "type": "Date"
    },
    {
        "name": "CreatingIDUser",
        "baseName": "CreatingIDUser",
        "type": "number"
    },
    {
        "name": "UpdateDate",
        "baseName": "UpdateDate",
        "type": "Date"
    },
    {
        "name": "UpdatingIDUser",
        "baseName": "UpdatingIDUser",
        "type": "number"
    },
    {
        "name": "IDLineItem",
        "baseName": "IDLineItem",
        "type": "number"
    },
    {
        "name": "IDSample",
        "baseName": "IDSample",
        "type": "number"
    },
    {
        "name": "RepresentedQuantity",
        "baseName": "RepresentedQuantity",
        "type": "string"
    }
];
exports.SampleLineItemJoin = SampleLineItemJoin;
/**
*
*/
class SampleLog {
    static getAttributeTypeMap() {
        return SampleLog.attributeTypeMap;
    }
}
SampleLog.discriminator = undefined;
SampleLog.attributeTypeMap = [
    {
        "name": "IDSampleLog",
        "baseName": "IDSampleLog",
        "type": "number"
    },
    {
        "name": "GUIDSampleLog",
        "baseName": "GUIDSampleLog",
        "type": "string"
    },
    {
        "name": "CreateDate",
        "baseName": "CreateDate",
        "type": "Date"
    },
    {
        "name": "CreatingIDUser",
        "baseName": "CreatingIDUser",
        "type": "number"
    },
    {
        "name": "UpdateDate",
        "baseName": "UpdateDate",
        "type": "Date"
    },
    {
        "name": "UpdatingIDUser",
        "baseName": "UpdatingIDUser",
        "type": "number"
    },
    {
        "name": "Deleted",
        "baseName": "Deleted",
        "type": "number"
    },
    {
        "name": "DeleteDate",
        "baseName": "DeleteDate",
        "type": "Date"
    },
    {
        "name": "DeletingIDUser",
        "baseName": "DeletingIDUser",
        "type": "number"
    },
    {
        "name": "ExternalSyncDate",
        "baseName": "ExternalSyncDate",
        "type": "Date"
    },
    {
        "name": "IDCustomer",
        "baseName": "IDCustomer",
        "type": "number"
    },
    {
        "name": "IDSample",
        "baseName": "IDSample",
        "type": "number"
    },
    {
        "name": "CaptureLatitude",
        "baseName": "CaptureLatitude",
        "type": "string"
    },
    {
        "name": "CaptureLongitude",
        "baseName": "CaptureLongitude",
        "type": "string"
    },
    {
        "name": "UserLatitude",
        "baseName": "UserLatitude",
        "type": "string"
    },
    {
        "name": "UserLongitude",
        "baseName": "UserLongitude",
        "type": "string"
    },
    {
        "name": "AlignmentStation",
        "baseName": "AlignmentStation",
        "type": "string"
    },
    {
        "name": "AlignmentOffset",
        "baseName": "AlignmentOffset",
        "type": "string"
    },
    {
        "name": "Notes",
        "baseName": "Notes",
        "type": "string"
    },
    {
        "name": "CaptureDate",
        "baseName": "CaptureDate",
        "type": "Date"
    },
    {
        "name": "IDLab",
        "baseName": "IDLab",
        "type": "number"
    },
    {
        "name": "Received",
        "baseName": "Received",
        "type": "number"
    },
    {
        "name": "ExternalSyncGUID",
        "baseName": "ExternalSyncGUID",
        "type": "string"
    }
];
exports.SampleLog = SampleLog;
/**
*
*/
class SendToEmailRequest {
    static getAttributeTypeMap() {
        return SendToEmailRequest.attributeTypeMap;
    }
}
SendToEmailRequest.discriminator = undefined;
SendToEmailRequest.attributeTypeMap = [
    {
        "name": "IDDocument",
        "baseName": "IDDocument",
        "type": "number"
    },
    {
        "name": "EmailAddressList",
        "baseName": "EmailAddressList",
        "type": "Array<string>"
    },
    {
        "name": "Subject",
        "baseName": "Subject",
        "type": "string"
    },
    {
        "name": "Message",
        "baseName": "Message",
        "type": "string"
    }
];
exports.SendToEmailRequest = SendToEmailRequest;
/**
*
*/
class Test {
    static getAttributeTypeMap() {
        return Test.attributeTypeMap;
    }
}
Test.discriminator = undefined;
Test.attributeTypeMap = [
    {
        "name": "IDTest",
        "baseName": "IDTest",
        "type": "number"
    },
    {
        "name": "GUIDTest",
        "baseName": "GUIDTest",
        "type": "string"
    },
    {
        "name": "CreateDate",
        "baseName": "CreateDate",
        "type": "Date"
    },
    {
        "name": "CreatingIDUser",
        "baseName": "CreatingIDUser",
        "type": "number"
    },
    {
        "name": "UpdateDate",
        "baseName": "UpdateDate",
        "type": "Date"
    },
    {
        "name": "UpdatingIDUser",
        "baseName": "UpdatingIDUser",
        "type": "number"
    },
    {
        "name": "Deleted",
        "baseName": "Deleted",
        "type": "number"
    },
    {
        "name": "DeleteDate",
        "baseName": "DeleteDate",
        "type": "Date"
    },
    {
        "name": "DeletingIDUser",
        "baseName": "DeletingIDUser",
        "type": "number"
    },
    {
        "name": "ExternalSyncDate",
        "baseName": "ExternalSyncDate",
        "type": "Date"
    },
    {
        "name": "IDCustomer",
        "baseName": "IDCustomer",
        "type": "number"
    },
    {
        "name": "Name",
        "baseName": "Name",
        "type": "string"
    },
    {
        "name": "Notes",
        "baseName": "Notes",
        "type": "string"
    }
];
exports.Test = Test;
/**
*
*/
class TestData {
    static getAttributeTypeMap() {
        return TestData.attributeTypeMap;
    }
}
TestData.discriminator = undefined;
TestData.attributeTypeMap = [
    {
        "name": "IDTestData",
        "baseName": "IDTestData",
        "type": "number"
    },
    {
        "name": "GUIDTestData",
        "baseName": "GUIDTestData",
        "type": "string"
    },
    {
        "name": "CreateDate",
        "baseName": "CreateDate",
        "type": "Date"
    },
    {
        "name": "CreatingIDUser",
        "baseName": "CreatingIDUser",
        "type": "number"
    },
    {
        "name": "UpdateDate",
        "baseName": "UpdateDate",
        "type": "Date"
    },
    {
        "name": "UpdatingIDUser",
        "baseName": "UpdatingIDUser",
        "type": "number"
    },
    {
        "name": "Deleted",
        "baseName": "Deleted",
        "type": "number"
    },
    {
        "name": "DeleteDate",
        "baseName": "DeleteDate",
        "type": "Date"
    },
    {
        "name": "DeletingIDUser",
        "baseName": "DeletingIDUser",
        "type": "number"
    },
    {
        "name": "ExternalSyncDate",
        "baseName": "ExternalSyncDate",
        "type": "Date"
    },
    {
        "name": "IDCustomer",
        "baseName": "IDCustomer",
        "type": "number"
    },
    {
        "name": "Hash",
        "baseName": "Hash",
        "type": "string"
    },
    {
        "name": "DisplayName",
        "baseName": "DisplayName",
        "type": "string"
    },
    {
        "name": "Type",
        "baseName": "Type",
        "type": "string"
    },
    {
        "name": "Required",
        "baseName": "Required",
        "type": "number"
    }
];
exports.TestData = TestData;
/**
*
*/
class TestInstance {
    static getAttributeTypeMap() {
        return TestInstance.attributeTypeMap;
    }
}
TestInstance.discriminator = undefined;
TestInstance.attributeTypeMap = [
    {
        "name": "IDTestInstance",
        "baseName": "IDTestInstance",
        "type": "number"
    },
    {
        "name": "GUIDTestInstance",
        "baseName": "GUIDTestInstance",
        "type": "string"
    },
    {
        "name": "CreateDate",
        "baseName": "CreateDate",
        "type": "Date"
    },
    {
        "name": "CreatingIDUser",
        "baseName": "CreatingIDUser",
        "type": "number"
    },
    {
        "name": "UpdateDate",
        "baseName": "UpdateDate",
        "type": "Date"
    },
    {
        "name": "UpdatingIDUser",
        "baseName": "UpdatingIDUser",
        "type": "number"
    },
    {
        "name": "Deleted",
        "baseName": "Deleted",
        "type": "number"
    },
    {
        "name": "DeleteDate",
        "baseName": "DeleteDate",
        "type": "Date"
    },
    {
        "name": "DeletingIDUser",
        "baseName": "DeletingIDUser",
        "type": "number"
    },
    {
        "name": "ExternalSyncDate",
        "baseName": "ExternalSyncDate",
        "type": "Date"
    },
    {
        "name": "IDCustomer",
        "baseName": "IDCustomer",
        "type": "number"
    },
    {
        "name": "IDTestPlan",
        "baseName": "IDTestPlan",
        "type": "number"
    },
    {
        "name": "IDTest",
        "baseName": "IDTest",
        "type": "number"
    },
    {
        "name": "IDLab",
        "baseName": "IDLab",
        "type": "number"
    },
    {
        "name": "IDProject",
        "baseName": "IDProject",
        "type": "number"
    },
    {
        "name": "IDBidItem",
        "baseName": "IDBidItem",
        "type": "number"
    },
    {
        "name": "IDLineItem",
        "baseName": "IDLineItem",
        "type": "number"
    },
    {
        "name": "Name",
        "baseName": "Name",
        "type": "string"
    },
    {
        "name": "Notes",
        "baseName": "Notes",
        "type": "string"
    },
    {
        "name": "StartDate",
        "baseName": "StartDate",
        "type": "Date"
    },
    {
        "name": "EstimatedCompletionDate",
        "baseName": "EstimatedCompletionDate",
        "type": "Date"
    },
    {
        "name": "ActualCompletionDate",
        "baseName": "ActualCompletionDate",
        "type": "Date"
    },
    {
        "name": "ExternalSyncGUID",
        "baseName": "ExternalSyncGUID",
        "type": "string"
    }
];
exports.TestInstance = TestInstance;
/**
*
*/
class TestInstanceData {
    static getAttributeTypeMap() {
        return TestInstanceData.attributeTypeMap;
    }
}
TestInstanceData.discriminator = undefined;
TestInstanceData.attributeTypeMap = [
    {
        "name": "IDTestInstanceData",
        "baseName": "IDTestInstanceData",
        "type": "number"
    },
    {
        "name": "GUIDTestInstanceData",
        "baseName": "GUIDTestInstanceData",
        "type": "string"
    },
    {
        "name": "CreateDate",
        "baseName": "CreateDate",
        "type": "Date"
    },
    {
        "name": "CreatingIDUser",
        "baseName": "CreatingIDUser",
        "type": "number"
    },
    {
        "name": "UpdateDate",
        "baseName": "UpdateDate",
        "type": "Date"
    },
    {
        "name": "UpdatingIDUser",
        "baseName": "UpdatingIDUser",
        "type": "number"
    },
    {
        "name": "Deleted",
        "baseName": "Deleted",
        "type": "number"
    },
    {
        "name": "DeleteDate",
        "baseName": "DeleteDate",
        "type": "Date"
    },
    {
        "name": "DeletingIDUser",
        "baseName": "DeletingIDUser",
        "type": "number"
    },
    {
        "name": "ExternalSyncDate",
        "baseName": "ExternalSyncDate",
        "type": "Date"
    },
    {
        "name": "IDCustomer",
        "baseName": "IDCustomer",
        "type": "number"
    },
    {
        "name": "Hash",
        "baseName": "Hash",
        "type": "string"
    },
    {
        "name": "Value",
        "baseName": "Value",
        "type": "string"
    },
    {
        "name": "Comments",
        "baseName": "Comments",
        "type": "string"
    },
    {
        "name": "Valid",
        "baseName": "Valid",
        "type": "number"
    },
    {
        "name": "ExternalSyncGUID",
        "baseName": "ExternalSyncGUID",
        "type": "string"
    }
];
exports.TestInstanceData = TestInstanceData;
/**
*
*/
class TestInstanceDataArchive {
    static getAttributeTypeMap() {
        return TestInstanceDataArchive.attributeTypeMap;
    }
}
TestInstanceDataArchive.discriminator = undefined;
TestInstanceDataArchive.attributeTypeMap = [
    {
        "name": "IDTestInstanceDataArchive",
        "baseName": "IDTestInstanceDataArchive",
        "type": "number"
    },
    {
        "name": "GUIDTestInstanceDataArchive",
        "baseName": "GUIDTestInstanceDataArchive",
        "type": "string"
    },
    {
        "name": "CreateDate",
        "baseName": "CreateDate",
        "type": "Date"
    },
    {
        "name": "CreatingIDUser",
        "baseName": "CreatingIDUser",
        "type": "number"
    },
    {
        "name": "UpdateDate",
        "baseName": "UpdateDate",
        "type": "Date"
    },
    {
        "name": "UpdatingIDUser",
        "baseName": "UpdatingIDUser",
        "type": "number"
    },
    {
        "name": "Deleted",
        "baseName": "Deleted",
        "type": "number"
    },
    {
        "name": "DeleteDate",
        "baseName": "DeleteDate",
        "type": "Date"
    },
    {
        "name": "DeletingIDUser",
        "baseName": "DeletingIDUser",
        "type": "number"
    },
    {
        "name": "ExternalSyncDate",
        "baseName": "ExternalSyncDate",
        "type": "Date"
    },
    {
        "name": "IDCustomer",
        "baseName": "IDCustomer",
        "type": "number"
    },
    {
        "name": "IDTestInstanceData",
        "baseName": "IDTestInstanceData",
        "type": "number"
    },
    {
        "name": "TestInstanceData",
        "baseName": "TestInstanceData",
        "type": "string"
    }
];
exports.TestInstanceDataArchive = TestInstanceDataArchive;
/**
*
*/
class TestInstanceLabJoin {
    static getAttributeTypeMap() {
        return TestInstanceLabJoin.attributeTypeMap;
    }
}
TestInstanceLabJoin.discriminator = undefined;
TestInstanceLabJoin.attributeTypeMap = [
    {
        "name": "IDTestInstanceLabJoin",
        "baseName": "IDTestInstanceLabJoin",
        "type": "number"
    },
    {
        "name": "GUIDTestInstanceLabJoin",
        "baseName": "GUIDTestInstanceLabJoin",
        "type": "string"
    },
    {
        "name": "CreateDate",
        "baseName": "CreateDate",
        "type": "Date"
    },
    {
        "name": "CreatingIDUser",
        "baseName": "CreatingIDUser",
        "type": "number"
    },
    {
        "name": "UpdateDate",
        "baseName": "UpdateDate",
        "type": "Date"
    },
    {
        "name": "UpdatingIDUser",
        "baseName": "UpdatingIDUser",
        "type": "number"
    },
    {
        "name": "Deleted",
        "baseName": "Deleted",
        "type": "number"
    },
    {
        "name": "DeleteDate",
        "baseName": "DeleteDate",
        "type": "Date"
    },
    {
        "name": "DeletingIDUser",
        "baseName": "DeletingIDUser",
        "type": "number"
    },
    {
        "name": "ExternalSyncDate",
        "baseName": "ExternalSyncDate",
        "type": "Date"
    },
    {
        "name": "IDCustomer",
        "baseName": "IDCustomer",
        "type": "number"
    },
    {
        "name": "IDTestInstance",
        "baseName": "IDTestInstance",
        "type": "number"
    },
    {
        "name": "IDLab",
        "baseName": "IDLab",
        "type": "number"
    }
];
exports.TestInstanceLabJoin = TestInstanceLabJoin;
/**
*
*/
class TestInstanceSampleJoin {
    static getAttributeTypeMap() {
        return TestInstanceSampleJoin.attributeTypeMap;
    }
}
TestInstanceSampleJoin.discriminator = undefined;
TestInstanceSampleJoin.attributeTypeMap = [
    {
        "name": "IDTestInstanceSampleJoin",
        "baseName": "IDTestInstanceSampleJoin",
        "type": "number"
    },
    {
        "name": "GUIDTestInstanceSampleJoin",
        "baseName": "GUIDTestInstanceSampleJoin",
        "type": "string"
    },
    {
        "name": "CreateDate",
        "baseName": "CreateDate",
        "type": "Date"
    },
    {
        "name": "CreatingIDUser",
        "baseName": "CreatingIDUser",
        "type": "number"
    },
    {
        "name": "UpdateDate",
        "baseName": "UpdateDate",
        "type": "Date"
    },
    {
        "name": "UpdatingIDUser",
        "baseName": "UpdatingIDUser",
        "type": "number"
    },
    {
        "name": "Deleted",
        "baseName": "Deleted",
        "type": "number"
    },
    {
        "name": "DeleteDate",
        "baseName": "DeleteDate",
        "type": "Date"
    },
    {
        "name": "DeletingIDUser",
        "baseName": "DeletingIDUser",
        "type": "number"
    },
    {
        "name": "ExternalSyncDate",
        "baseName": "ExternalSyncDate",
        "type": "Date"
    },
    {
        "name": "IDTestInstance",
        "baseName": "IDTestInstance",
        "type": "number"
    },
    {
        "name": "IDSample",
        "baseName": "IDSample",
        "type": "number"
    },
    {
        "name": "IDCustomer",
        "baseName": "IDCustomer",
        "type": "number"
    }
];
exports.TestInstanceSampleJoin = TestInstanceSampleJoin;
/**
*
*/
class TestLabJoin {
    static getAttributeTypeMap() {
        return TestLabJoin.attributeTypeMap;
    }
}
TestLabJoin.discriminator = undefined;
TestLabJoin.attributeTypeMap = [
    {
        "name": "IDTestLabJoin",
        "baseName": "IDTestLabJoin",
        "type": "number"
    },
    {
        "name": "GUIDTestLabJoin",
        "baseName": "GUIDTestLabJoin",
        "type": "string"
    },
    {
        "name": "CreateDate",
        "baseName": "CreateDate",
        "type": "Date"
    },
    {
        "name": "CreatingIDUser",
        "baseName": "CreatingIDUser",
        "type": "number"
    },
    {
        "name": "UpdateDate",
        "baseName": "UpdateDate",
        "type": "Date"
    },
    {
        "name": "UpdatingIDUser",
        "baseName": "UpdatingIDUser",
        "type": "number"
    },
    {
        "name": "Deleted",
        "baseName": "Deleted",
        "type": "number"
    },
    {
        "name": "DeleteDate",
        "baseName": "DeleteDate",
        "type": "Date"
    },
    {
        "name": "DeletingIDUser",
        "baseName": "DeletingIDUser",
        "type": "number"
    },
    {
        "name": "ExternalSyncDate",
        "baseName": "ExternalSyncDate",
        "type": "Date"
    },
    {
        "name": "IDCustomer",
        "baseName": "IDCustomer",
        "type": "number"
    },
    {
        "name": "IDLab",
        "baseName": "IDLab",
        "type": "number"
    },
    {
        "name": "IDLabParent",
        "baseName": "IDLabParent",
        "type": "number"
    },
    {
        "name": "IDTest",
        "baseName": "IDTest",
        "type": "number"
    },
    {
        "name": "DateEnd",
        "baseName": "DateEnd",
        "type": "Date"
    },
    {
        "name": "QualificationType",
        "baseName": "QualificationType",
        "type": "string"
    },
    {
        "name": "QualificationMethod",
        "baseName": "QualificationMethod",
        "type": "string"
    },
    {
        "name": "QualificationAuthorization",
        "baseName": "QualificationAuthorization",
        "type": "string"
    }
];
exports.TestLabJoin = TestLabJoin;
/**
*
*/
class TestPlan {
    static getAttributeTypeMap() {
        return TestPlan.attributeTypeMap;
    }
}
TestPlan.discriminator = undefined;
TestPlan.attributeTypeMap = [
    {
        "name": "IDTestPlan",
        "baseName": "IDTestPlan",
        "type": "number"
    },
    {
        "name": "GUIDTestPlan",
        "baseName": "GUIDTestPlan",
        "type": "string"
    },
    {
        "name": "CreateDate",
        "baseName": "CreateDate",
        "type": "Date"
    },
    {
        "name": "CreatingIDUser",
        "baseName": "CreatingIDUser",
        "type": "number"
    },
    {
        "name": "UpdateDate",
        "baseName": "UpdateDate",
        "type": "Date"
    },
    {
        "name": "UpdatingIDUser",
        "baseName": "UpdatingIDUser",
        "type": "number"
    },
    {
        "name": "Deleted",
        "baseName": "Deleted",
        "type": "number"
    },
    {
        "name": "DeleteDate",
        "baseName": "DeleteDate",
        "type": "Date"
    },
    {
        "name": "DeletingIDUser",
        "baseName": "DeletingIDUser",
        "type": "number"
    },
    {
        "name": "ExternalSyncDate",
        "baseName": "ExternalSyncDate",
        "type": "Date"
    },
    {
        "name": "IDCustomer",
        "baseName": "IDCustomer",
        "type": "number"
    },
    {
        "name": "IDProject",
        "baseName": "IDProject",
        "type": "number"
    },
    {
        "name": "Description",
        "baseName": "Description",
        "type": "string"
    },
    {
        "name": "DateStart",
        "baseName": "DateStart",
        "type": "Date"
    },
    {
        "name": "DateEnd",
        "baseName": "DateEnd",
        "type": "Date"
    }
];
exports.TestPlan = TestPlan;
/**
*
*/
class TestRecordOfMaterialEntryJoin {
    static getAttributeTypeMap() {
        return TestRecordOfMaterialEntryJoin.attributeTypeMap;
    }
}
TestRecordOfMaterialEntryJoin.discriminator = undefined;
TestRecordOfMaterialEntryJoin.attributeTypeMap = [
    {
        "name": "IDTestRecordOfMaterialEntryJoin",
        "baseName": "IDTestRecordOfMaterialEntryJoin",
        "type": "number"
    },
    {
        "name": "GUIDTestRecordOfMaterialEntryJoin",
        "baseName": "GUIDTestRecordOfMaterialEntryJoin",
        "type": "string"
    },
    {
        "name": "CreateDate",
        "baseName": "CreateDate",
        "type": "Date"
    },
    {
        "name": "CreatingIDUser",
        "baseName": "CreatingIDUser",
        "type": "number"
    },
    {
        "name": "UpdateDate",
        "baseName": "UpdateDate",
        "type": "Date"
    },
    {
        "name": "UpdatingIDUser",
        "baseName": "UpdatingIDUser",
        "type": "number"
    },
    {
        "name": "Deleted",
        "baseName": "Deleted",
        "type": "number"
    },
    {
        "name": "DeleteDate",
        "baseName": "DeleteDate",
        "type": "Date"
    },
    {
        "name": "DeletingIDUser",
        "baseName": "DeletingIDUser",
        "type": "number"
    },
    {
        "name": "ExternalSyncDate",
        "baseName": "ExternalSyncDate",
        "type": "Date"
    },
    {
        "name": "IDCustomer",
        "baseName": "IDCustomer",
        "type": "number"
    },
    {
        "name": "IDTestPlan",
        "baseName": "IDTestPlan",
        "type": "number"
    },
    {
        "name": "IDTest",
        "baseName": "IDTest",
        "type": "number"
    },
    {
        "name": "IDLab",
        "baseName": "IDLab",
        "type": "number"
    },
    {
        "name": "IDProject",
        "baseName": "IDProject",
        "type": "number"
    },
    {
        "name": "IDBidItem",
        "baseName": "IDBidItem",
        "type": "number"
    },
    {
        "name": "IDLineItem",
        "baseName": "IDLineItem",
        "type": "number"
    },
    {
        "name": "TestCount",
        "baseName": "TestCount",
        "type": "number"
    },
    {
        "name": "Name",
        "baseName": "Name",
        "type": "string"
    },
    {
        "name": "Notes",
        "baseName": "Notes",
        "type": "string"
    },
    {
        "name": "IDRecordOfMaterialEntry",
        "baseName": "IDRecordOfMaterialEntry",
        "type": "number"
    }
];
exports.TestRecordOfMaterialEntryJoin = TestRecordOfMaterialEntryJoin;
/**
*
*/
class TestSpecification {
    static getAttributeTypeMap() {
        return TestSpecification.attributeTypeMap;
    }
}
TestSpecification.discriminator = undefined;
TestSpecification.attributeTypeMap = [
    {
        "name": "IDTestSpecification",
        "baseName": "IDTestSpecification",
        "type": "number"
    },
    {
        "name": "GUIDTestSpecification",
        "baseName": "GUIDTestSpecification",
        "type": "string"
    },
    {
        "name": "CreateDate",
        "baseName": "CreateDate",
        "type": "Date"
    },
    {
        "name": "CreatingIDUser",
        "baseName": "CreatingIDUser",
        "type": "number"
    },
    {
        "name": "UpdateDate",
        "baseName": "UpdateDate",
        "type": "Date"
    },
    {
        "name": "UpdatingIDUser",
        "baseName": "UpdatingIDUser",
        "type": "number"
    },
    {
        "name": "Deleted",
        "baseName": "Deleted",
        "type": "number"
    },
    {
        "name": "DeleteDate",
        "baseName": "DeleteDate",
        "type": "Date"
    },
    {
        "name": "DeletingIDUser",
        "baseName": "DeletingIDUser",
        "type": "number"
    },
    {
        "name": "ExternalSyncDate",
        "baseName": "ExternalSyncDate",
        "type": "Date"
    },
    {
        "name": "IDCustomer",
        "baseName": "IDCustomer",
        "type": "number"
    },
    {
        "name": "Name",
        "baseName": "Name",
        "type": "string"
    },
    {
        "name": "IDTestSpecificationSet",
        "baseName": "IDTestSpecificationSet",
        "type": "number"
    },
    {
        "name": "Description",
        "baseName": "Description",
        "type": "string"
    }
];
exports.TestSpecification = TestSpecification;
/**
*
*/
class TestSpecificationMaterialTestJoin {
    static getAttributeTypeMap() {
        return TestSpecificationMaterialTestJoin.attributeTypeMap;
    }
}
TestSpecificationMaterialTestJoin.discriminator = undefined;
TestSpecificationMaterialTestJoin.attributeTypeMap = [
    {
        "name": "IDTestSpecificationMaterialTestJoin",
        "baseName": "IDTestSpecificationMaterialTestJoin",
        "type": "number"
    },
    {
        "name": "GUIDTestSpecificationMaterialTestJoin",
        "baseName": "GUIDTestSpecificationMaterialTestJoin",
        "type": "string"
    },
    {
        "name": "CreateDate",
        "baseName": "CreateDate",
        "type": "Date"
    },
    {
        "name": "CreatingIDUser",
        "baseName": "CreatingIDUser",
        "type": "number"
    },
    {
        "name": "UpdateDate",
        "baseName": "UpdateDate",
        "type": "Date"
    },
    {
        "name": "UpdatingIDUser",
        "baseName": "UpdatingIDUser",
        "type": "number"
    },
    {
        "name": "Deleted",
        "baseName": "Deleted",
        "type": "number"
    },
    {
        "name": "DeleteDate",
        "baseName": "DeleteDate",
        "type": "Date"
    },
    {
        "name": "DeletingIDUser",
        "baseName": "DeletingIDUser",
        "type": "number"
    },
    {
        "name": "ExternalSyncDate",
        "baseName": "ExternalSyncDate",
        "type": "Date"
    },
    {
        "name": "IDCustomer",
        "baseName": "IDCustomer",
        "type": "number"
    },
    {
        "name": "IDTestSpecification",
        "baseName": "IDTestSpecification",
        "type": "number"
    },
    {
        "name": "IDMaterial",
        "baseName": "IDMaterial",
        "type": "number"
    },
    {
        "name": "IDTest",
        "baseName": "IDTest",
        "type": "number"
    }
];
exports.TestSpecificationMaterialTestJoin = TestSpecificationMaterialTestJoin;
/**
*
*/
class TestSpecificationRequirement {
    static getAttributeTypeMap() {
        return TestSpecificationRequirement.attributeTypeMap;
    }
}
TestSpecificationRequirement.discriminator = undefined;
TestSpecificationRequirement.attributeTypeMap = [
    {
        "name": "IDTestSpecificationRequirement",
        "baseName": "IDTestSpecificationRequirement",
        "type": "number"
    },
    {
        "name": "GUIDTestSpecificationRequirement",
        "baseName": "GUIDTestSpecificationRequirement",
        "type": "string"
    },
    {
        "name": "CreateDate",
        "baseName": "CreateDate",
        "type": "Date"
    },
    {
        "name": "CreatingIDUser",
        "baseName": "CreatingIDUser",
        "type": "number"
    },
    {
        "name": "UpdateDate",
        "baseName": "UpdateDate",
        "type": "Date"
    },
    {
        "name": "UpdatingIDUser",
        "baseName": "UpdatingIDUser",
        "type": "number"
    },
    {
        "name": "Deleted",
        "baseName": "Deleted",
        "type": "number"
    },
    {
        "name": "DeleteDate",
        "baseName": "DeleteDate",
        "type": "Date"
    },
    {
        "name": "DeletingIDUser",
        "baseName": "DeletingIDUser",
        "type": "number"
    },
    {
        "name": "ExternalSyncDate",
        "baseName": "ExternalSyncDate",
        "type": "Date"
    },
    {
        "name": "IDCustomer",
        "baseName": "IDCustomer",
        "type": "number"
    },
    {
        "name": "IDTestSpecification",
        "baseName": "IDTestSpecification",
        "type": "number"
    },
    {
        "name": "Name",
        "baseName": "Name",
        "type": "string"
    },
    {
        "name": "Ordinal",
        "baseName": "Ordinal",
        "type": "string"
    },
    {
        "name": "OperationType",
        "baseName": "OperationType",
        "type": "string"
    },
    {
        "name": "ValueMinimum",
        "baseName": "ValueMinimum",
        "type": "string"
    },
    {
        "name": "ValueMaximum",
        "baseName": "ValueMaximum",
        "type": "string"
    },
    {
        "name": "ComputationTemplate",
        "baseName": "ComputationTemplate",
        "type": "string"
    }
];
exports.TestSpecificationRequirement = TestSpecificationRequirement;
/**
*
*/
class TestSpecificationSet {
    static getAttributeTypeMap() {
        return TestSpecificationSet.attributeTypeMap;
    }
}
TestSpecificationSet.discriminator = undefined;
TestSpecificationSet.attributeTypeMap = [
    {
        "name": "IDTestSpecificationSet",
        "baseName": "IDTestSpecificationSet",
        "type": "number"
    },
    {
        "name": "GUIDTestSpecificationSet",
        "baseName": "GUIDTestSpecificationSet",
        "type": "string"
    },
    {
        "name": "CreateDate",
        "baseName": "CreateDate",
        "type": "Date"
    },
    {
        "name": "CreatingIDUser",
        "baseName": "CreatingIDUser",
        "type": "number"
    },
    {
        "name": "UpdateDate",
        "baseName": "UpdateDate",
        "type": "Date"
    },
    {
        "name": "UpdatingIDUser",
        "baseName": "UpdatingIDUser",
        "type": "number"
    },
    {
        "name": "Deleted",
        "baseName": "Deleted",
        "type": "number"
    },
    {
        "name": "DeleteDate",
        "baseName": "DeleteDate",
        "type": "Date"
    },
    {
        "name": "DeletingIDUser",
        "baseName": "DeletingIDUser",
        "type": "number"
    },
    {
        "name": "ExternalSyncDate",
        "baseName": "ExternalSyncDate",
        "type": "Date"
    },
    {
        "name": "IDCustomer",
        "baseName": "IDCustomer",
        "type": "number"
    },
    {
        "name": "Name",
        "baseName": "Name",
        "type": "string"
    },
    {
        "name": "Year",
        "baseName": "Year",
        "type": "number"
    }
];
exports.TestSpecificationSet = TestSpecificationSet;
/**
*
*/
class TestSpecificationSetTestJoin {
    static getAttributeTypeMap() {
        return TestSpecificationSetTestJoin.attributeTypeMap;
    }
}
TestSpecificationSetTestJoin.discriminator = undefined;
TestSpecificationSetTestJoin.attributeTypeMap = [
    {
        "name": "IDTestSpecificationSetTestJoin",
        "baseName": "IDTestSpecificationSetTestJoin",
        "type": "number"
    },
    {
        "name": "GUIDTestSpecificationSetTestJoin",
        "baseName": "GUIDTestSpecificationSetTestJoin",
        "type": "string"
    },
    {
        "name": "CreateDate",
        "baseName": "CreateDate",
        "type": "Date"
    },
    {
        "name": "CreatingIDUser",
        "baseName": "CreatingIDUser",
        "type": "number"
    },
    {
        "name": "UpdateDate",
        "baseName": "UpdateDate",
        "type": "Date"
    },
    {
        "name": "UpdatingIDUser",
        "baseName": "UpdatingIDUser",
        "type": "number"
    },
    {
        "name": "Deleted",
        "baseName": "Deleted",
        "type": "number"
    },
    {
        "name": "DeleteDate",
        "baseName": "DeleteDate",
        "type": "Date"
    },
    {
        "name": "DeletingIDUser",
        "baseName": "DeletingIDUser",
        "type": "number"
    },
    {
        "name": "ExternalSyncDate",
        "baseName": "ExternalSyncDate",
        "type": "Date"
    },
    {
        "name": "IDCustomer",
        "baseName": "IDCustomer",
        "type": "number"
    },
    {
        "name": "IDTestSpecificationSet",
        "baseName": "IDTestSpecificationSet",
        "type": "number"
    },
    {
        "name": "IDTest",
        "baseName": "IDTest",
        "type": "number"
    }
];
exports.TestSpecificationSetTestJoin = TestSpecificationSetTestJoin;
/**
*
*/
class TestStep {
    static getAttributeTypeMap() {
        return TestStep.attributeTypeMap;
    }
}
TestStep.discriminator = undefined;
TestStep.attributeTypeMap = [
    {
        "name": "IDTestStep",
        "baseName": "IDTestStep",
        "type": "number"
    },
    {
        "name": "GUIDTestStep",
        "baseName": "GUIDTestStep",
        "type": "string"
    },
    {
        "name": "CreateDate",
        "baseName": "CreateDate",
        "type": "Date"
    },
    {
        "name": "CreatingIDUser",
        "baseName": "CreatingIDUser",
        "type": "number"
    },
    {
        "name": "UpdateDate",
        "baseName": "UpdateDate",
        "type": "Date"
    },
    {
        "name": "UpdatingIDUser",
        "baseName": "UpdatingIDUser",
        "type": "number"
    },
    {
        "name": "Deleted",
        "baseName": "Deleted",
        "type": "number"
    },
    {
        "name": "DeleteDate",
        "baseName": "DeleteDate",
        "type": "Date"
    },
    {
        "name": "DeletingIDUser",
        "baseName": "DeletingIDUser",
        "type": "number"
    },
    {
        "name": "ExternalSyncDate",
        "baseName": "ExternalSyncDate",
        "type": "Date"
    },
    {
        "name": "IDCustomer",
        "baseName": "IDCustomer",
        "type": "number"
    },
    {
        "name": "Name",
        "baseName": "Name",
        "type": "string"
    },
    {
        "name": "Notes",
        "baseName": "Notes",
        "type": "string"
    },
    {
        "name": "Computed",
        "baseName": "Computed",
        "type": "number"
    },
    {
        "name": "ComputationTemplate",
        "baseName": "ComputationTemplate",
        "type": "string"
    }
];
exports.TestStep = TestStep;
/**
*
*/
class UserModel {
    static getAttributeTypeMap() {
        return UserModel.attributeTypeMap;
    }
}
UserModel.discriminator = undefined;
UserModel.attributeTypeMap = [
    {
        "name": "Settings",
        "baseName": "Settings",
        "type": "any"
    },
    {
        "name": "IDUser",
        "baseName": "IDUser",
        "type": "number"
    },
    {
        "name": "GUIDUser",
        "baseName": "GUIDUser",
        "type": "string"
    },
    {
        "name": "CreateDate",
        "baseName": "CreateDate",
        "type": "Date"
    },
    {
        "name": "CreatingIDUser",
        "baseName": "CreatingIDUser",
        "type": "number"
    },
    {
        "name": "UpdateDate",
        "baseName": "UpdateDate",
        "type": "Date"
    },
    {
        "name": "UpdatingIDUser",
        "baseName": "UpdatingIDUser",
        "type": "number"
    },
    {
        "name": "Deleted",
        "baseName": "Deleted",
        "type": "number"
    },
    {
        "name": "DeleteDate",
        "baseName": "DeleteDate",
        "type": "Date"
    },
    {
        "name": "DeletingIDUser",
        "baseName": "DeletingIDUser",
        "type": "number"
    },
    {
        "name": "NameFirst",
        "baseName": "NameFirst",
        "type": "string"
    },
    {
        "name": "NameLast",
        "baseName": "NameLast",
        "type": "string"
    },
    {
        "name": "Email",
        "baseName": "Email",
        "type": "string"
    },
    {
        "name": "LoginID",
        "baseName": "LoginID",
        "type": "string"
    },
    {
        "name": "IDRole",
        "baseName": "IDRole",
        "type": "number"
    },
    {
        "name": "Title",
        "baseName": "Title",
        "type": "string"
    },
    {
        "name": "Classification",
        "baseName": "Classification",
        "type": "string"
    },
    {
        "name": "IDProjectOffice",
        "baseName": "IDProjectOffice",
        "type": "number"
    },
    {
        "name": "IDCustomer",
        "baseName": "IDCustomer",
        "type": "number"
    },
    {
        "name": "EmailPending",
        "baseName": "EmailPending",
        "type": "number"
    },
    {
        "name": "Phone",
        "baseName": "Phone",
        "type": "string"
    },
    {
        "name": "UIHash",
        "baseName": "UIHash",
        "type": "string"
    },
    {
        "name": "Timezone",
        "baseName": "Timezone",
        "type": "string"
    },
    {
        "name": "Shift",
        "baseName": "Shift",
        "type": "string"
    },
    {
        "name": "ExternalSyncDate",
        "baseName": "ExternalSyncDate",
        "type": "Date"
    },
    {
        "name": "LastLoginTime",
        "baseName": "LastLoginTime",
        "type": "Date"
    }
];
exports.UserModel = UserModel;
/**
*
*/
class UserSignupRequest {
    static getAttributeTypeMap() {
        return UserSignupRequest.attributeTypeMap;
    }
}
UserSignupRequest.discriminator = undefined;
UserSignupRequest.attributeTypeMap = [
    {
        "name": "NameFirst",
        "baseName": "NameFirst",
        "type": "string"
    },
    {
        "name": "NameLast",
        "baseName": "NameLast",
        "type": "string"
    },
    {
        "name": "Email",
        "baseName": "Email",
        "type": "string"
    },
    {
        "name": "Password",
        "baseName": "Password",
        "type": "string"
    },
    {
        "name": "Phone",
        "baseName": "Phone",
        "type": "string"
    },
    {
        "name": "CompanyName",
        "baseName": "CompanyName",
        "type": "string"
    },
    {
        "name": "CompanyDetails",
        "baseName": "CompanyDetails",
        "type": "UserSignupRequestCompanyDetails"
    },
    {
        "name": "Position",
        "baseName": "Position",
        "type": "string"
    }
];
exports.UserSignupRequest = UserSignupRequest;
/**
*
*/
class UserSignupRequestCompanyDetails {
    static getAttributeTypeMap() {
        return UserSignupRequestCompanyDetails.attributeTypeMap;
    }
}
UserSignupRequestCompanyDetails.discriminator = undefined;
UserSignupRequestCompanyDetails.attributeTypeMap = [
    {
        "name": "State",
        "baseName": "State",
        "type": "string"
    },
    {
        "name": "Size",
        "baseName": "Size",
        "type": "number"
    },
    {
        "name": "EstimatedAnnualRevenue",
        "baseName": "EstimatedAnnualRevenue",
        "type": "string"
    }
];
exports.UserSignupRequestCompanyDetails = UserSignupRequestCompanyDetails;
let enumsMap = {};
let typeMap = {
    "Artifact": Artifact,
    "ArtifactModel": ArtifactModel,
    "BidItem": BidItem,
    "ChangePasswordRequest": ChangePasswordRequest,
    "CommentModel": CommentModel,
    "Contract": Contract,
    "Customer": Customer,
    "DocumentModel": DocumentModel,
    "DocumentStateChangeRequest": DocumentStateChangeRequest,
    "ElectronicSignature": ElectronicSignature,
    "ElectronicSignatureModel": ElectronicSignatureModel,
    "Equipment": Equipment,
    "FormProcessorRequest": FormProcessorRequest,
    "ISession": ISession,
    "InlineResponse200": InlineResponse200,
    "InlineResponse2001": InlineResponse2001,
    "InlineResponse2002": InlineResponse2002,
    "Lab": Lab,
    "LabMaterialAssignment": LabMaterialAssignment,
    "LabTestApproval": LabTestApproval,
    "LabTestDefault": LabTestDefault,
    "LineItem": LineItem,
    "LoginRequest": LoginRequest,
    "MappedArrayArtifact": MappedArrayArtifact,
    "Material": Material,
    "MaterialLineItemJoin": MaterialLineItemJoin,
    "MaterialPayItemJoin": MaterialPayItemJoin,
    "MaterialRecordOfMaterialEntryJoin": MaterialRecordOfMaterialEntryJoin,
    "MixSpecification": MixSpecification,
    "MixSpecificationMaterialJoin": MixSpecificationMaterialJoin,
    "ModuleModel": ModuleModel,
    "Notification": Notification,
    "ObservationArchive": ObservationArchive,
    "ObservationCloneRequest": ObservationCloneRequest,
    "ObservationFilterRequest": ObservationFilterRequest,
    "ObservationFilterRequestDesignatedTime": ObservationFilterRequestDesignatedTime,
    "ObservationFilterRequestPriority": ObservationFilterRequestPriority,
    "ObservationModel": ObservationModel,
    "ObservationModelLabels": ObservationModelLabels,
    "Organization": Organization,
    "OrganizationMaterialJoin": OrganizationMaterialJoin,
    "PayItemModel": PayItemModel,
    "Product": Product,
    "ProductionPlant": ProductionPlant,
    "ProductionPlantMaterialApproval": ProductionPlantMaterialApproval,
    "ProjectModel": ProjectModel,
    "QueryRequest": QueryRequest,
    "RecordOfMaterial": RecordOfMaterial,
    "RecordOfMaterialEntry": RecordOfMaterialEntry,
    "RecordOfMaterialEntryArchive": RecordOfMaterialEntryArchive,
    "ReportModel": ReportModel,
    "ReportNamedInstanceModel": ReportNamedInstanceModel,
    "ReportRenderResult": ReportRenderResult,
    "Sample": Sample,
    "SampleLabJoin": SampleLabJoin,
    "SampleLineItemJoin": SampleLineItemJoin,
    "SampleLog": SampleLog,
    "SendToEmailRequest": SendToEmailRequest,
    "Test": Test,
    "TestData": TestData,
    "TestInstance": TestInstance,
    "TestInstanceData": TestInstanceData,
    "TestInstanceDataArchive": TestInstanceDataArchive,
    "TestInstanceLabJoin": TestInstanceLabJoin,
    "TestInstanceSampleJoin": TestInstanceSampleJoin,
    "TestLabJoin": TestLabJoin,
    "TestPlan": TestPlan,
    "TestRecordOfMaterialEntryJoin": TestRecordOfMaterialEntryJoin,
    "TestSpecification": TestSpecification,
    "TestSpecificationMaterialTestJoin": TestSpecificationMaterialTestJoin,
    "TestSpecificationRequirement": TestSpecificationRequirement,
    "TestSpecificationSet": TestSpecificationSet,
    "TestSpecificationSetTestJoin": TestSpecificationSetTestJoin,
    "TestStep": TestStep,
    "UserModel": UserModel,
    "UserSignupRequest": UserSignupRequest,
    "UserSignupRequestCompanyDetails": UserSignupRequestCompanyDetails,
};
class HttpBasicAuth {
    constructor() {
        this.username = '';
        this.password = '';
    }
    applyToRequest(requestOptions) {
        requestOptions.auth = {
            username: this.username, password: this.password
        };
    }
    executeWithAuth(requestOptions, requestDelegate) {
        return requestDelegate();
    }
}
exports.HttpBasicAuth = HttpBasicAuth;
class ApiKeyAuth {
    constructor(location, paramName) {
        this.location = location;
        this.paramName = paramName;
        this.apiKey = '';
    }
    applyToRequest(requestOptions) {
        if (this.location == "query") {
            requestOptions.qs[this.paramName] = this.apiKey;
        }
        else if (this.location == "header" && requestOptions && requestOptions.headers) {
            requestOptions.headers[this.paramName] = this.apiKey;
        }
    }
    executeWithAuth(requestOptions, requestDelegate) {
        return requestDelegate();
    }
}
exports.ApiKeyAuth = ApiKeyAuth;
class OAuth {
    constructor() {
        this.accessToken = '';
    }
    applyToRequest(requestOptions) {
        if (requestOptions && requestOptions.headers) {
            requestOptions.headers["Authorization"] = "Bearer " + this.accessToken;
        }
    }
    executeWithAuth(requestOptions, requestDelegate) {
        return requestDelegate();
    }
}
exports.OAuth = OAuth;
class VoidAuth {
    constructor() {
        this.username = '';
        this.password = '';
    }
    applyToRequest(_) {
        // Do nothing
    }
    executeWithAuth(requestOptions, requestDelegate) {
        return requestDelegate();
    }
}
exports.VoidAuth = VoidAuth;
var ArtifactApiApiKeys;
(function (ArtifactApiApiKeys) {
})(ArtifactApiApiKeys = exports.ArtifactApiApiKeys || (exports.ArtifactApiApiKeys = {}));
class ArtifactApi {
    constructor(basePathOrUsername, password, basePath) {
        this._basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this._lastResponse = null;
        this._timeout = DEFAULT_TIMEOUT;
        this.authentications = {
            'default': new VoidAuth(),
        };
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    set useQuerystring(value) {
        this._useQuerystring = value;
    }
    set basePath(basePath) {
        this._basePath = basePath;
    }
    get basePath() {
        return this._basePath;
    }
    set timeout(pTimeout) {
        this._timeout = pTimeout;
    }
    get timeout() {
        return this._timeout;
    }
    setDefaultAuthentication(auth) {
        this.authentications.default = auth;
    }
    setApiKey(key, value) {
        this.authentications[ArtifactApiApiKeys[key]].apiKey = value;
    }
    /**
     * Meadow DELETE
     * @param id ID of record
     */
    _delete(id) {
        const localVarPath = this.basePath + '/Artifact/{id}'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling _delete.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'DELETE',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "boolean");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in _delete!`);
                    }
                }
            });
        }));
    }
    /**
     * Switch Artifact records Sync flag
     * @param IDArtifact ID of record
     */
    clearArtifactSyncFlag(IDArtifact) {
        const localVarPath = this.basePath + '/Artifact/{IDArtifact}/ClearSyncFlag'
            .replace('{' + 'IDArtifact' + '}', encodeURIComponent(String(IDArtifact)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'IDArtifact' is not null or undefined
        if (IDArtifact === null || IDArtifact === undefined) {
            throw new Error('Required parameter IDArtifact was null or undefined when calling clearArtifactSyncFlag.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in clearArtifactSyncFlag!`);
                    }
                }
            });
        }));
    }
    /**
     * Copy Artifact media from ID to target ID
     * @param IDTargetArtifact ID of record
     * @param IDObservationArtifact ID of record
     * @param ArtifactVersion
     * @param TargetArtifactVersion
     */
    copyArtifact(IDTargetArtifact, IDObservationArtifact, ArtifactVersion, TargetArtifactVersion) {
        const localVarPath = this.basePath + '/Artifact/Media/{IDObservationArtifact}/{ArtifactVersion}/CopyTo/{IDTargetArtifact}/{TargetArtifactVersion}'
            .replace('{' + 'IDTargetArtifact' + '}', encodeURIComponent(String(IDTargetArtifact)))
            .replace('{' + 'IDObservationArtifact' + '}', encodeURIComponent(String(IDObservationArtifact)))
            .replace('{' + 'ArtifactVersion' + '}', encodeURIComponent(String(ArtifactVersion)))
            .replace('{' + 'TargetArtifactVersion' + '}', encodeURIComponent(String(TargetArtifactVersion)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'IDTargetArtifact' is not null or undefined
        if (IDTargetArtifact === null || IDTargetArtifact === undefined) {
            throw new Error('Required parameter IDTargetArtifact was null or undefined when calling copyArtifact.');
        }
        // verify required parameter 'IDObservationArtifact' is not null or undefined
        if (IDObservationArtifact === null || IDObservationArtifact === undefined) {
            throw new Error('Required parameter IDObservationArtifact was null or undefined when calling copyArtifact.');
        }
        // verify required parameter 'ArtifactVersion' is not null or undefined
        if (ArtifactVersion === null || ArtifactVersion === undefined) {
            throw new Error('Required parameter ArtifactVersion was null or undefined when calling copyArtifact.');
        }
        // verify required parameter 'TargetArtifactVersion' is not null or undefined
        if (TargetArtifactVersion === null || TargetArtifactVersion === undefined) {
            throw new Error('Required parameter TargetArtifactVersion was null or undefined when calling copyArtifact.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in copyArtifact!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow COUNT
     */
    count() {
        const localVarPath = this.basePath + '/Artifacts/Count';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "InlineResponse200");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in count!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow COUNT with filter
     * @param filter FBV meadow filter
     */
    countFiltered(filter) {
        const localVarPath = this.basePath + '/Artifacts/FilteredTo/{filter}/Count'
            .replace('{' + 'filter' + '}', encodeURIComponent(String(filter)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'filter' is not null or undefined
        if (filter === null || filter === undefined) {
            throw new Error('Required parameter filter was null or undefined when calling countFiltered.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "InlineResponse200");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in countFiltered!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow POST (Create)
     * @param body
     */
    create(body) {
        const localVarPath = this.basePath + '/Artifact';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling create.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'POST',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "ArtifactModel")
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "ArtifactModel");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in create!`);
                    }
                }
            });
        }));
    }
    /**
     * Download Artifact media file from Headlight
     * @param IDObservationArtifact ID of record
     * @param Size
     * @param ArtifactVersion
     */
    downloadArtifact(IDObservationArtifact, Size, ArtifactVersion) {
        const localVarPath = this.basePath + '/Artifact/Media/{IDObservationArtifact}/{ArtifactVersion}/{Size}'
            .replace('{' + 'IDObservationArtifact' + '}', encodeURIComponent(String(IDObservationArtifact)))
            .replace('{' + 'Size' + '}', encodeURIComponent(String(Size)))
            .replace('{' + 'ArtifactVersion' + '}', encodeURIComponent(String(ArtifactVersion)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'IDObservationArtifact' is not null or undefined
        if (IDObservationArtifact === null || IDObservationArtifact === undefined) {
            throw new Error('Required parameter IDObservationArtifact was null or undefined when calling downloadArtifact.');
        }
        // verify required parameter 'Size' is not null or undefined
        if (Size === null || Size === undefined) {
            throw new Error('Required parameter Size was null or undefined when calling downloadArtifact.');
        }
        // verify required parameter 'ArtifactVersion' is not null or undefined
        if (ArtifactVersion === null || ArtifactVersion === undefined) {
            throw new Error('Required parameter ArtifactVersion was null or undefined when calling downloadArtifact.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            encoding: null,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "Buffer");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in downloadArtifact!`);
                    }
                }
            });
        }));
    }
    /**
     * Get Artifact records for media types that don't have the Sync flag set
     */
    getArtifactSyncList() {
        const localVarPath = this.basePath + '/Artifact/Media/GetSyncList';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "Array<Artifact>");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in getArtifactSyncList!`);
                    }
                }
            });
        }));
    }
    /**
     *
     * @param body
     */
    postReadCountQuery(body) {
        const localVarPath = this.basePath + '/Artifact/query/count';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling postReadCountQuery.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'POST',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "QueryRequest")
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "InlineResponse200");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in postReadCountQuery!`);
                    }
                }
            });
        }));
    }
    /**
     *
     * @param body
     */
    postReadQuery(body) {
        const localVarPath = this.basePath + '/Artifact/query/read';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling postReadQuery.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'POST',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "QueryRequest")
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "Array<ArtifactModel>");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in postReadQuery!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow READ
     * @param id ID of record
     */
    read(id) {
        const localVarPath = this.basePath + '/Artifact/{id}'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling read.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "ArtifactModel");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in read!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow READ list
     * @param begin Beginning (skip) number of records (to page)
     * @param max Maximum number of records to return
     */
    reads(begin, max) {
        const localVarPath = this.basePath + '/Artifacts/{begin}/{max}'
            .replace('{' + 'begin' + '}', encodeURIComponent(String(begin)))
            .replace('{' + 'max' + '}', encodeURIComponent(String(max)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'begin' is not null or undefined
        if (begin === null || begin === undefined) {
            throw new Error('Required parameter begin was null or undefined when calling reads.');
        }
        // verify required parameter 'max' is not null or undefined
        if (max === null || max === undefined) {
            throw new Error('Required parameter max was null or undefined when calling reads.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "Array<ArtifactModel>");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in reads!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow READ filtered list
     * @param filter FBV meadow filter
     * @param begin Beginning (skip) number of records (to page)
     * @param max Maximum number of records to return
     */
    readsFiltered(filter, begin, max) {
        const localVarPath = this.basePath + '/Artifacts/FilteredTo/{filter}/{begin}/{max}'
            .replace('{' + 'filter' + '}', encodeURIComponent(String(filter)))
            .replace('{' + 'begin' + '}', encodeURIComponent(String(begin)))
            .replace('{' + 'max' + '}', encodeURIComponent(String(max)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'filter' is not null or undefined
        if (filter === null || filter === undefined) {
            throw new Error('Required parameter filter was null or undefined when calling readsFiltered.');
        }
        // verify required parameter 'begin' is not null or undefined
        if (begin === null || begin === undefined) {
            throw new Error('Required parameter begin was null or undefined when calling readsFiltered.');
        }
        // verify required parameter 'max' is not null or undefined
        if (max === null || max === undefined) {
            throw new Error('Required parameter max was null or undefined when calling readsFiltered.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "Array<ArtifactModel>");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in readsFiltered!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow PUT (Update)
     * @param body
     */
    update(body) {
        const localVarPath = this.basePath + '/Artifact';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling update.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'PUT',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "ArtifactModel")
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "ArtifactModel");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in update!`);
                    }
                }
            });
        }));
    }
    /**
     * Upload Artifact media file to Headlight
     * @param IDObservationArtifact ID of record
     * @param file
     * @param ArtifactVersion
     */
    uploadArtifact(IDObservationArtifact, file, ArtifactVersion) {
        const localVarPath = this.basePath + '/Artifact/Media/{IDObservationArtifact}/{ArtifactVersion}'
            .replace('{' + 'IDObservationArtifact' + '}', encodeURIComponent(String(IDObservationArtifact)))
            .replace('{' + 'ArtifactVersion' + '}', encodeURIComponent(String(ArtifactVersion)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'IDObservationArtifact' is not null or undefined
        if (IDObservationArtifact === null || IDObservationArtifact === undefined) {
            throw new Error('Required parameter IDObservationArtifact was null or undefined when calling uploadArtifact.');
        }
        // verify required parameter 'file' is not null or undefined
        if (file === null || file === undefined) {
            throw new Error('Required parameter file was null or undefined when calling uploadArtifact.');
        }
        // verify required parameter 'ArtifactVersion' is not null or undefined
        if (ArtifactVersion === null || ArtifactVersion === undefined) {
            throw new Error('Required parameter ArtifactVersion was null or undefined when calling uploadArtifact.');
        }
        let localVarUseFormData = false;
        if (file !== undefined) {
            localVarFormParams['file'] = file;
        }
        localVarUseFormData = true;
        let localVarRequestOptions = {
            method: 'POST',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in uploadArtifact!`);
                    }
                }
            });
        }));
    }
    getLastResponse() {
        let response = this._lastResponse;
        this._lastResponse = null;
        return response;
    }
}
exports.ArtifactApi = ArtifactApi;
var AuthenticateApiApiKeys;
(function (AuthenticateApiApiKeys) {
})(AuthenticateApiApiKeys = exports.AuthenticateApiApiKeys || (exports.AuthenticateApiApiKeys = {}));
class AuthenticateApi {
    constructor(basePathOrUsername, password, basePath) {
        this._basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this._lastResponse = null;
        this._timeout = DEFAULT_TIMEOUT;
        this.authentications = {
            'default': new VoidAuth(),
        };
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    set useQuerystring(value) {
        this._useQuerystring = value;
    }
    set basePath(basePath) {
        this._basePath = basePath;
    }
    get basePath() {
        return this._basePath;
    }
    set timeout(pTimeout) {
        this._timeout = pTimeout;
    }
    get timeout() {
        return this._timeout;
    }
    setDefaultAuthentication(auth) {
        this.authentications.default = auth;
    }
    setApiKey(key, value) {
        this.authentications[AuthenticateApiApiKeys[key]].apiKey = value;
    }
    /**
     * Forward authentication request to authentication microservice.
     * @param body
     */
    authenticate(body) {
        const localVarPath = this.basePath + '/Authenticate';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling authenticate.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'POST',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "LoginRequest")
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "ISession");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in authenticate!`);
                    }
                }
            });
        }));
    }
    /**
     * Get current session state from server
     */
    checkSession() {
        const localVarPath = this.basePath + '/CheckSession';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "ISession");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in checkSession!`);
                    }
                }
            });
        }));
    }
    /**
     * Check out temporary authentication token for user in session.
     */
    checkoutSessionToken() {
        const localVarPath = this.basePath + '/CheckoutSessionToken';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "InlineResponse2001");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in checkoutSessionToken!`);
                    }
                }
            });
        }));
    }
    /**
     * Logout user (remove session from server)
     */
    deAuthenticate() {
        const localVarPath = this.basePath + '/Deauthenticate';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "InlineResponse2002");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in deAuthenticate!`);
                    }
                }
            });
        }));
    }
    /**
     * Impersonate another user, according to access rights.
     * @param IDUser
     */
    impersonateUser(IDUser) {
        const localVarPath = this.basePath + '/Authenticate/Impersonate/{IDUser}'
            .replace('{' + 'IDUser' + '}', encodeURIComponent(String(IDUser)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'IDUser' is not null or undefined
        if (IDUser === null || IDUser === undefined) {
            throw new Error('Required parameter IDUser was null or undefined when calling impersonateUser.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in impersonateUser!`);
                    }
                }
            });
        }));
    }
    getLastResponse() {
        let response = this._lastResponse;
        this._lastResponse = null;
        return response;
    }
}
exports.AuthenticateApi = AuthenticateApi;
var BatchExportApiApiKeys;
(function (BatchExportApiApiKeys) {
})(BatchExportApiApiKeys = exports.BatchExportApiApiKeys || (exports.BatchExportApiApiKeys = {}));
class BatchExportApi {
    constructor(basePathOrUsername, password, basePath) {
        this._basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this._lastResponse = null;
        this._timeout = DEFAULT_TIMEOUT;
        this.authentications = {
            'default': new VoidAuth(),
        };
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    set useQuerystring(value) {
        this._useQuerystring = value;
    }
    set basePath(basePath) {
        this._basePath = basePath;
    }
    get basePath() {
        return this._basePath;
    }
    set timeout(pTimeout) {
        this._timeout = pTimeout;
    }
    get timeout() {
        return this._timeout;
    }
    setDefaultAuthentication(auth) {
        this.authentications.default = auth;
    }
    setApiKey(key, value) {
        this.authentications[BatchExportApiApiKeys[key]].apiKey = value;
    }
    /**
     * Begin Batch Export Job
     */
    batchExport() {
        const localVarPath = this.basePath + '/BatchExport';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'POST',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in batchExport!`);
                    }
                }
            });
        }));
    }
    /**
     * List export files that are ready for download
     * @param ExportType
     */
    batchExportListFiles(ExportType) {
        const localVarPath = this.basePath + '/BatchExport/Files/{ExportType}'
            .replace('{' + 'ExportType' + '}', encodeURIComponent(String(ExportType)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'ExportType' is not null or undefined
        if (ExportType === null || ExportType === undefined) {
            throw new Error('Required parameter ExportType was null or undefined when calling batchExportListFiles.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in batchExportListFiles!`);
                    }
                }
            });
        }));
    }
    getLastResponse() {
        let response = this._lastResponse;
        this._lastResponse = null;
        return response;
    }
}
exports.BatchExportApi = BatchExportApi;
var BidItemApiApiKeys;
(function (BidItemApiApiKeys) {
})(BidItemApiApiKeys = exports.BidItemApiApiKeys || (exports.BidItemApiApiKeys = {}));
class BidItemApi {
    constructor(basePathOrUsername, password, basePath) {
        this._basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this._lastResponse = null;
        this._timeout = DEFAULT_TIMEOUT;
        this.authentications = {
            'default': new VoidAuth(),
        };
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    set useQuerystring(value) {
        this._useQuerystring = value;
    }
    set basePath(basePath) {
        this._basePath = basePath;
    }
    get basePath() {
        return this._basePath;
    }
    set timeout(pTimeout) {
        this._timeout = pTimeout;
    }
    get timeout() {
        return this._timeout;
    }
    setDefaultAuthentication(auth) {
        this.authentications.default = auth;
    }
    setApiKey(key, value) {
        this.authentications[BidItemApiApiKeys[key]].apiKey = value;
    }
    /**
     * Meadow DELETE
     * @param id ID of record
     */
    _delete(id) {
        const localVarPath = this.basePath + '/BidItem/{id}'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling _delete.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'DELETE',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "boolean");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in _delete!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow COUNT
     */
    count() {
        const localVarPath = this.basePath + '/BidItems/Count';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "InlineResponse200");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in count!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow COUNT with filter
     * @param filter FBV meadow filter
     */
    countFiltered(filter) {
        const localVarPath = this.basePath + '/BidItems/FilteredTo/{filter}/Count'
            .replace('{' + 'filter' + '}', encodeURIComponent(String(filter)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'filter' is not null or undefined
        if (filter === null || filter === undefined) {
            throw new Error('Required parameter filter was null or undefined when calling countFiltered.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "InlineResponse200");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in countFiltered!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow POST (Create)
     * @param body
     */
    create(body) {
        const localVarPath = this.basePath + '/BidItem';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling create.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'POST',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "BidItem")
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "BidItem");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in create!`);
                    }
                }
            });
        }));
    }
    /**
     *
     * @param body
     */
    postReadCountQuery(body) {
        const localVarPath = this.basePath + '/BidItem/query/count';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling postReadCountQuery.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'POST',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "QueryRequest")
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "InlineResponse200");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in postReadCountQuery!`);
                    }
                }
            });
        }));
    }
    /**
     *
     * @param body
     */
    postReadQuery(body) {
        const localVarPath = this.basePath + '/BidItem/query/read';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling postReadQuery.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'POST',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "QueryRequest")
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "Array<BidItem>");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in postReadQuery!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow READ
     * @param id ID of record
     */
    read(id) {
        const localVarPath = this.basePath + '/BidItem/{id}'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling read.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "BidItem");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in read!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow READ list
     * @param begin Beginning (skip) number of records (to page)
     * @param max Maximum number of records to return
     */
    reads(begin, max) {
        const localVarPath = this.basePath + '/BidItems/{begin}/{max}'
            .replace('{' + 'begin' + '}', encodeURIComponent(String(begin)))
            .replace('{' + 'max' + '}', encodeURIComponent(String(max)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'begin' is not null or undefined
        if (begin === null || begin === undefined) {
            throw new Error('Required parameter begin was null or undefined when calling reads.');
        }
        // verify required parameter 'max' is not null or undefined
        if (max === null || max === undefined) {
            throw new Error('Required parameter max was null or undefined when calling reads.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "Array<BidItem>");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in reads!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow READ filtered list
     * @param filter FBV meadow filter
     * @param begin Beginning (skip) number of records (to page)
     * @param max Maximum number of records to return
     */
    readsFiltered(filter, begin, max) {
        const localVarPath = this.basePath + '/BidItems/FilteredTo/{filter}/{begin}/{max}'
            .replace('{' + 'filter' + '}', encodeURIComponent(String(filter)))
            .replace('{' + 'begin' + '}', encodeURIComponent(String(begin)))
            .replace('{' + 'max' + '}', encodeURIComponent(String(max)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'filter' is not null or undefined
        if (filter === null || filter === undefined) {
            throw new Error('Required parameter filter was null or undefined when calling readsFiltered.');
        }
        // verify required parameter 'begin' is not null or undefined
        if (begin === null || begin === undefined) {
            throw new Error('Required parameter begin was null or undefined when calling readsFiltered.');
        }
        // verify required parameter 'max' is not null or undefined
        if (max === null || max === undefined) {
            throw new Error('Required parameter max was null or undefined when calling readsFiltered.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "Array<BidItem>");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in readsFiltered!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow PUT (Update)
     * @param body
     */
    update(body) {
        const localVarPath = this.basePath + '/BidItem';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling update.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'PUT',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "BidItem")
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "BidItem");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in update!`);
                    }
                }
            });
        }));
    }
    getLastResponse() {
        let response = this._lastResponse;
        this._lastResponse = null;
        return response;
    }
}
exports.BidItemApi = BidItemApi;
var CommentApiApiKeys;
(function (CommentApiApiKeys) {
})(CommentApiApiKeys = exports.CommentApiApiKeys || (exports.CommentApiApiKeys = {}));
class CommentApi {
    constructor(basePathOrUsername, password, basePath) {
        this._basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this._lastResponse = null;
        this._timeout = DEFAULT_TIMEOUT;
        this.authentications = {
            'default': new VoidAuth(),
        };
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    set useQuerystring(value) {
        this._useQuerystring = value;
    }
    set basePath(basePath) {
        this._basePath = basePath;
    }
    get basePath() {
        return this._basePath;
    }
    set timeout(pTimeout) {
        this._timeout = pTimeout;
    }
    get timeout() {
        return this._timeout;
    }
    setDefaultAuthentication(auth) {
        this.authentications.default = auth;
    }
    setApiKey(key, value) {
        this.authentications[CommentApiApiKeys[key]].apiKey = value;
    }
    /**
     * Meadow DELETE
     * @param id ID of record
     */
    _delete(id) {
        const localVarPath = this.basePath + '/Comment/{id}'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling _delete.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'DELETE',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "boolean");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in _delete!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow COUNT
     */
    count() {
        const localVarPath = this.basePath + '/Comments/Count';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "InlineResponse200");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in count!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow COUNT with filter
     * @param filter FBV meadow filter
     */
    countFiltered(filter) {
        const localVarPath = this.basePath + '/Comments/FilteredTo/{filter}/Count'
            .replace('{' + 'filter' + '}', encodeURIComponent(String(filter)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'filter' is not null or undefined
        if (filter === null || filter === undefined) {
            throw new Error('Required parameter filter was null or undefined when calling countFiltered.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "InlineResponse200");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in countFiltered!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow POST (Create)
     * @param body
     */
    create(body) {
        const localVarPath = this.basePath + '/Comment';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling create.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'POST',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "CommentModel")
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "CommentModel");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in create!`);
                    }
                }
            });
        }));
    }
    /**
     *
     * @param body
     */
    postReadCountQuery(body) {
        const localVarPath = this.basePath + '/Comment/query/count';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling postReadCountQuery.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'POST',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "QueryRequest")
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "InlineResponse200");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in postReadCountQuery!`);
                    }
                }
            });
        }));
    }
    /**
     *
     * @param body
     */
    postReadQuery(body) {
        const localVarPath = this.basePath + '/Comment/query/read';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling postReadQuery.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'POST',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "QueryRequest")
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "Array<CommentModel>");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in postReadQuery!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow READ
     * @param id ID of record
     */
    read(id) {
        const localVarPath = this.basePath + '/Comment/{id}'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling read.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "CommentModel");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in read!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow READ list
     * @param begin Beginning (skip) number of records (to page)
     * @param max Maximum number of records to return
     */
    reads(begin, max) {
        const localVarPath = this.basePath + '/Comments/{begin}/{max}'
            .replace('{' + 'begin' + '}', encodeURIComponent(String(begin)))
            .replace('{' + 'max' + '}', encodeURIComponent(String(max)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'begin' is not null or undefined
        if (begin === null || begin === undefined) {
            throw new Error('Required parameter begin was null or undefined when calling reads.');
        }
        // verify required parameter 'max' is not null or undefined
        if (max === null || max === undefined) {
            throw new Error('Required parameter max was null or undefined when calling reads.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "Array<CommentModel>");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in reads!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow READ filtered list
     * @param filter FBV meadow filter
     * @param begin Beginning (skip) number of records (to page)
     * @param max Maximum number of records to return
     */
    readsFiltered(filter, begin, max) {
        const localVarPath = this.basePath + '/Comments/FilteredTo/{filter}/{begin}/{max}'
            .replace('{' + 'filter' + '}', encodeURIComponent(String(filter)))
            .replace('{' + 'begin' + '}', encodeURIComponent(String(begin)))
            .replace('{' + 'max' + '}', encodeURIComponent(String(max)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'filter' is not null or undefined
        if (filter === null || filter === undefined) {
            throw new Error('Required parameter filter was null or undefined when calling readsFiltered.');
        }
        // verify required parameter 'begin' is not null or undefined
        if (begin === null || begin === undefined) {
            throw new Error('Required parameter begin was null or undefined when calling readsFiltered.');
        }
        // verify required parameter 'max' is not null or undefined
        if (max === null || max === undefined) {
            throw new Error('Required parameter max was null or undefined when calling readsFiltered.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "Array<CommentModel>");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in readsFiltered!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow PUT (Update)
     * @param body
     */
    update(body) {
        const localVarPath = this.basePath + '/Comment';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling update.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'PUT',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "CommentModel")
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "CommentModel");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in update!`);
                    }
                }
            });
        }));
    }
    getLastResponse() {
        let response = this._lastResponse;
        this._lastResponse = null;
        return response;
    }
}
exports.CommentApi = CommentApi;
var ContractApiApiKeys;
(function (ContractApiApiKeys) {
})(ContractApiApiKeys = exports.ContractApiApiKeys || (exports.ContractApiApiKeys = {}));
class ContractApi {
    constructor(basePathOrUsername, password, basePath) {
        this._basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this._lastResponse = null;
        this._timeout = DEFAULT_TIMEOUT;
        this.authentications = {
            'default': new VoidAuth(),
        };
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    set useQuerystring(value) {
        this._useQuerystring = value;
    }
    set basePath(basePath) {
        this._basePath = basePath;
    }
    get basePath() {
        return this._basePath;
    }
    set timeout(pTimeout) {
        this._timeout = pTimeout;
    }
    get timeout() {
        return this._timeout;
    }
    setDefaultAuthentication(auth) {
        this.authentications.default = auth;
    }
    setApiKey(key, value) {
        this.authentications[ContractApiApiKeys[key]].apiKey = value;
    }
    /**
     * Meadow DELETE
     * @param id ID of record
     */
    _delete(id) {
        const localVarPath = this.basePath + '/Contract/{id}'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling _delete.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'DELETE',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "boolean");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in _delete!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow COUNT
     */
    count() {
        const localVarPath = this.basePath + '/Contracts/Count';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "InlineResponse200");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in count!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow COUNT with filter
     * @param filter FBV meadow filter
     */
    countFiltered(filter) {
        const localVarPath = this.basePath + '/Contracts/FilteredTo/{filter}/Count'
            .replace('{' + 'filter' + '}', encodeURIComponent(String(filter)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'filter' is not null or undefined
        if (filter === null || filter === undefined) {
            throw new Error('Required parameter filter was null or undefined when calling countFiltered.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "InlineResponse200");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in countFiltered!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow POST (Create)
     * @param body
     */
    create(body) {
        const localVarPath = this.basePath + '/Contract';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling create.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'POST',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "Contract")
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "Contract");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in create!`);
                    }
                }
            });
        }));
    }
    /**
     *
     * @param body
     */
    postReadCountQuery(body) {
        const localVarPath = this.basePath + '/Contract/query/count';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling postReadCountQuery.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'POST',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "QueryRequest")
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "InlineResponse200");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in postReadCountQuery!`);
                    }
                }
            });
        }));
    }
    /**
     *
     * @param body
     */
    postReadQuery(body) {
        const localVarPath = this.basePath + '/Contract/query/read';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling postReadQuery.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'POST',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "QueryRequest")
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "Array<Contract>");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in postReadQuery!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow READ
     * @param id ID of record
     */
    read(id) {
        const localVarPath = this.basePath + '/Contract/{id}'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling read.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "Contract");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in read!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow READ list
     * @param begin Beginning (skip) number of records (to page)
     * @param max Maximum number of records to return
     */
    reads(begin, max) {
        const localVarPath = this.basePath + '/Contracts/{begin}/{max}'
            .replace('{' + 'begin' + '}', encodeURIComponent(String(begin)))
            .replace('{' + 'max' + '}', encodeURIComponent(String(max)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'begin' is not null or undefined
        if (begin === null || begin === undefined) {
            throw new Error('Required parameter begin was null or undefined when calling reads.');
        }
        // verify required parameter 'max' is not null or undefined
        if (max === null || max === undefined) {
            throw new Error('Required parameter max was null or undefined when calling reads.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "Array<Contract>");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in reads!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow READ filtered list
     * @param filter FBV meadow filter
     * @param begin Beginning (skip) number of records (to page)
     * @param max Maximum number of records to return
     */
    readsFiltered(filter, begin, max) {
        const localVarPath = this.basePath + '/Contracts/FilteredTo/{filter}/{begin}/{max}'
            .replace('{' + 'filter' + '}', encodeURIComponent(String(filter)))
            .replace('{' + 'begin' + '}', encodeURIComponent(String(begin)))
            .replace('{' + 'max' + '}', encodeURIComponent(String(max)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'filter' is not null or undefined
        if (filter === null || filter === undefined) {
            throw new Error('Required parameter filter was null or undefined when calling readsFiltered.');
        }
        // verify required parameter 'begin' is not null or undefined
        if (begin === null || begin === undefined) {
            throw new Error('Required parameter begin was null or undefined when calling readsFiltered.');
        }
        // verify required parameter 'max' is not null or undefined
        if (max === null || max === undefined) {
            throw new Error('Required parameter max was null or undefined when calling readsFiltered.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "Array<Contract>");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in readsFiltered!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow PUT (Update)
     * @param body
     */
    update(body) {
        const localVarPath = this.basePath + '/Contract';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling update.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'PUT',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "Contract")
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "Contract");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in update!`);
                    }
                }
            });
        }));
    }
    getLastResponse() {
        let response = this._lastResponse;
        this._lastResponse = null;
        return response;
    }
}
exports.ContractApi = ContractApi;
var CustomerApiApiKeys;
(function (CustomerApiApiKeys) {
})(CustomerApiApiKeys = exports.CustomerApiApiKeys || (exports.CustomerApiApiKeys = {}));
class CustomerApi {
    constructor(basePathOrUsername, password, basePath) {
        this._basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this._lastResponse = null;
        this._timeout = DEFAULT_TIMEOUT;
        this.authentications = {
            'default': new VoidAuth(),
        };
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    set useQuerystring(value) {
        this._useQuerystring = value;
    }
    set basePath(basePath) {
        this._basePath = basePath;
    }
    get basePath() {
        return this._basePath;
    }
    set timeout(pTimeout) {
        this._timeout = pTimeout;
    }
    get timeout() {
        return this._timeout;
    }
    setDefaultAuthentication(auth) {
        this.authentications.default = auth;
    }
    setApiKey(key, value) {
        this.authentications[CustomerApiApiKeys[key]].apiKey = value;
    }
    /**
     * Meadow DELETE
     * @param id ID of record
     */
    _delete(id) {
        const localVarPath = this.basePath + '/Customer/{id}'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling _delete.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'DELETE',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "boolean");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in _delete!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow COUNT
     */
    count() {
        const localVarPath = this.basePath + '/Customers/Count';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "InlineResponse200");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in count!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow COUNT with filter
     * @param filter FBV meadow filter
     */
    countFiltered(filter) {
        const localVarPath = this.basePath + '/Customers/FilteredTo/{filter}/Count'
            .replace('{' + 'filter' + '}', encodeURIComponent(String(filter)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'filter' is not null or undefined
        if (filter === null || filter === undefined) {
            throw new Error('Required parameter filter was null or undefined when calling countFiltered.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "InlineResponse200");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in countFiltered!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow POST (Create)
     * @param body
     */
    create(body) {
        const localVarPath = this.basePath + '/Customer';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling create.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'POST',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "Customer")
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "Customer");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in create!`);
                    }
                }
            });
        }));
    }
    /**
     *
     * @param body
     */
    postReadCountQuery(body) {
        const localVarPath = this.basePath + '/Customer/query/count';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling postReadCountQuery.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'POST',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "QueryRequest")
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "InlineResponse200");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in postReadCountQuery!`);
                    }
                }
            });
        }));
    }
    /**
     *
     * @param body
     */
    postReadQuery(body) {
        const localVarPath = this.basePath + '/Customer/query/read';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling postReadQuery.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'POST',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "QueryRequest")
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "Array<Customer>");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in postReadQuery!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow READ
     * @param id ID of record
     */
    read(id) {
        const localVarPath = this.basePath + '/Customer/{id}'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling read.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "Customer");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in read!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow READ list
     * @param begin Beginning (skip) number of records (to page)
     * @param max Maximum number of records to return
     */
    reads(begin, max) {
        const localVarPath = this.basePath + '/Customers/{begin}/{max}'
            .replace('{' + 'begin' + '}', encodeURIComponent(String(begin)))
            .replace('{' + 'max' + '}', encodeURIComponent(String(max)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'begin' is not null or undefined
        if (begin === null || begin === undefined) {
            throw new Error('Required parameter begin was null or undefined when calling reads.');
        }
        // verify required parameter 'max' is not null or undefined
        if (max === null || max === undefined) {
            throw new Error('Required parameter max was null or undefined when calling reads.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "Array<Customer>");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in reads!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow READ filtered list
     * @param filter FBV meadow filter
     * @param begin Beginning (skip) number of records (to page)
     * @param max Maximum number of records to return
     */
    readsFiltered(filter, begin, max) {
        const localVarPath = this.basePath + '/Customers/FilteredTo/{filter}/{begin}/{max}'
            .replace('{' + 'filter' + '}', encodeURIComponent(String(filter)))
            .replace('{' + 'begin' + '}', encodeURIComponent(String(begin)))
            .replace('{' + 'max' + '}', encodeURIComponent(String(max)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'filter' is not null or undefined
        if (filter === null || filter === undefined) {
            throw new Error('Required parameter filter was null or undefined when calling readsFiltered.');
        }
        // verify required parameter 'begin' is not null or undefined
        if (begin === null || begin === undefined) {
            throw new Error('Required parameter begin was null or undefined when calling readsFiltered.');
        }
        // verify required parameter 'max' is not null or undefined
        if (max === null || max === undefined) {
            throw new Error('Required parameter max was null or undefined when calling readsFiltered.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "Array<Customer>");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in readsFiltered!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow PUT (Update)
     * @param body
     */
    update(body) {
        const localVarPath = this.basePath + '/Customer';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling update.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'PUT',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "Customer")
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "Customer");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in update!`);
                    }
                }
            });
        }));
    }
    getLastResponse() {
        let response = this._lastResponse;
        this._lastResponse = null;
        return response;
    }
}
exports.CustomerApi = CustomerApi;
var DocumentApiApiKeys;
(function (DocumentApiApiKeys) {
})(DocumentApiApiKeys = exports.DocumentApiApiKeys || (exports.DocumentApiApiKeys = {}));
class DocumentApi {
    constructor(basePathOrUsername, password, basePath) {
        this._basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this._lastResponse = null;
        this._timeout = DEFAULT_TIMEOUT;
        this.authentications = {
            'default': new VoidAuth(),
        };
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    set useQuerystring(value) {
        this._useQuerystring = value;
    }
    set basePath(basePath) {
        this._basePath = basePath;
    }
    get basePath() {
        return this._basePath;
    }
    set timeout(pTimeout) {
        this._timeout = pTimeout;
    }
    get timeout() {
        return this._timeout;
    }
    setDefaultAuthentication(auth) {
        this.authentications.default = auth;
    }
    setApiKey(key, value) {
        this.authentications[DocumentApiApiKeys[key]].apiKey = value;
    }
    /**
     * Meadow DELETE
     * @param id ID of record
     */
    _delete(id) {
        const localVarPath = this.basePath + '/Document/{id}'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling _delete.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'DELETE',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "boolean");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in _delete!`);
                    }
                }
            });
        }));
    }
    /**
     *
     * @param IDComment ID of record
     * @param IDDocument ID of record
     */
    addCommentsToDocument(IDComment, IDDocument) {
        const localVarPath = this.basePath + '/Document/{IDDocument}/Comment/Add/{IDComment}'
            .replace('{' + 'IDComment' + '}', encodeURIComponent(String(IDComment)))
            .replace('{' + 'IDDocument' + '}', encodeURIComponent(String(IDDocument)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'IDComment' is not null or undefined
        if (IDComment === null || IDComment === undefined) {
            throw new Error('Required parameter IDComment was null or undefined when calling addCommentsToDocument.');
        }
        // verify required parameter 'IDDocument' is not null or undefined
        if (IDDocument === null || IDDocument === undefined) {
            throw new Error('Required parameter IDDocument was null or undefined when calling addCommentsToDocument.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in addCommentsToDocument!`);
                    }
                }
            });
        }));
    }
    /**
     *
     * @param IDObservation ID of record
     * @param IDDocument ID of record
     */
    addDocumentObservation(IDObservation, IDDocument) {
        const localVarPath = this.basePath + '/Document/{IDDocument}/AddObservation/{IDObservation}'
            .replace('{' + 'IDObservation' + '}', encodeURIComponent(String(IDObservation)))
            .replace('{' + 'IDDocument' + '}', encodeURIComponent(String(IDDocument)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'IDObservation' is not null or undefined
        if (IDObservation === null || IDObservation === undefined) {
            throw new Error('Required parameter IDObservation was null or undefined when calling addDocumentObservation.');
        }
        // verify required parameter 'IDDocument' is not null or undefined
        if (IDDocument === null || IDDocument === undefined) {
            throw new Error('Required parameter IDDocument was null or undefined when calling addDocumentObservation.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in addDocumentObservation!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow COUNT
     */
    count() {
        const localVarPath = this.basePath + '/Documents/Count';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "InlineResponse200");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in count!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow COUNT with filter
     * @param filter FBV meadow filter
     */
    countFiltered(filter) {
        const localVarPath = this.basePath + '/Documents/FilteredTo/{filter}/Count'
            .replace('{' + 'filter' + '}', encodeURIComponent(String(filter)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'filter' is not null or undefined
        if (filter === null || filter === undefined) {
            throw new Error('Required parameter filter was null or undefined when calling countFiltered.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "InlineResponse200");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in countFiltered!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow POST (Create)
     * @param body
     */
    create(body) {
        const localVarPath = this.basePath + '/Document';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling create.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'POST',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "DocumentModel")
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "DocumentModel");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in create!`);
                    }
                }
            });
        }));
    }
    /**
     * Get Document count form beginning of month in Customer timezone UP TO target DocumentID
     * @param IDDocument ID of record
     */
    getDocumentCountBySequenceNumber(IDDocument) {
        const localVarPath = this.basePath + '/Document/{IDDocument}/SequenceNumber/Monthly'
            .replace('{' + 'IDDocument' + '}', encodeURIComponent(String(IDDocument)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'IDDocument' is not null or undefined
        if (IDDocument === null || IDDocument === undefined) {
            throw new Error('Required parameter IDDocument was null or undefined when calling getDocumentCountBySequenceNumber.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in getDocumentCountBySequenceNumber!`);
                    }
                }
            });
        }));
    }
    /**
     * Generate a DCR in HTML format
     * @param IDDocument ID of record
     */
    getDocumentHTML(IDDocument) {
        const localVarPath = this.basePath + '/Document/{IDDocument}/DCR.html'
            .replace('{' + 'IDDocument' + '}', encodeURIComponent(String(IDDocument)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'IDDocument' is not null or undefined
        if (IDDocument === null || IDDocument === undefined) {
            throw new Error('Required parameter IDDocument was null or undefined when calling getDocumentHTML.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in getDocumentHTML!`);
                    }
                }
            });
        }));
    }
    /**
     * Generate a DCR in JSON format
     * @param IDDocument ID of record
     */
    getDocumentJSON(IDDocument) {
        const localVarPath = this.basePath + '/Document/{IDDocument}/DCR.json'
            .replace('{' + 'IDDocument' + '}', encodeURIComponent(String(IDDocument)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'IDDocument' is not null or undefined
        if (IDDocument === null || IDDocument === undefined) {
            throw new Error('Required parameter IDDocument was null or undefined when calling getDocumentJSON.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in getDocumentJSON!`);
                    }
                }
            });
        }));
    }
    /**
     * Generate a DCR in PDF format
     * @param IDDocument ID of record
     */
    getDocumentPDF(IDDocument) {
        const localVarPath = this.basePath + '/Document/{IDDocument}/DCR.pdf'
            .replace('{' + 'IDDocument' + '}', encodeURIComponent(String(IDDocument)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'IDDocument' is not null or undefined
        if (IDDocument === null || IDDocument === undefined) {
            throw new Error('Required parameter IDDocument was null or undefined when calling getDocumentPDF.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            encoding: null,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "Buffer");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in getDocumentPDF!`);
                    }
                }
            });
        }));
    }
    /**
     * Get Report Parameters that being sent to the report service
     * @param IDDocument ID of record
     */
    getDocumentReportParameters(IDDocument) {
        const localVarPath = this.basePath + '/Document/{IDDocument}/ReportParameters'
            .replace('{' + 'IDDocument' + '}', encodeURIComponent(String(IDDocument)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'IDDocument' is not null or undefined
        if (IDDocument === null || IDDocument === undefined) {
            throw new Error('Required parameter IDDocument was null or undefined when calling getDocumentReportParameters.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in getDocumentReportParameters!`);
                    }
                }
            });
        }));
    }
    /**
     * Allows a report to perform a bulk upsert in context of a document.
     * @param body
     */
    postFormProcessor(body) {
        const localVarPath = this.basePath + '/Document/FormProcessor';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling postFormProcessor.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'POST',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "FormProcessorRequest")
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in postFormProcessor!`);
                    }
                }
            });
        }));
    }
    /**
     *
     * @param body
     */
    postReadCountQuery(body) {
        const localVarPath = this.basePath + '/Document/query/count';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling postReadCountQuery.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'POST',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "QueryRequest")
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "InlineResponse200");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in postReadCountQuery!`);
                    }
                }
            });
        }));
    }
    /**
     *
     * @param body
     */
    postReadQuery(body) {
        const localVarPath = this.basePath + '/Document/query/read';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling postReadQuery.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'POST',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "QueryRequest")
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "Array<DocumentModel>");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in postReadQuery!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow READ
     * @param id ID of record
     */
    read(id) {
        const localVarPath = this.basePath + '/Document/{id}'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling read.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "DocumentModel");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in read!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow READ list
     * @param begin Beginning (skip) number of records (to page)
     * @param max Maximum number of records to return
     */
    reads(begin, max) {
        const localVarPath = this.basePath + '/Documents/{begin}/{max}'
            .replace('{' + 'begin' + '}', encodeURIComponent(String(begin)))
            .replace('{' + 'max' + '}', encodeURIComponent(String(max)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'begin' is not null or undefined
        if (begin === null || begin === undefined) {
            throw new Error('Required parameter begin was null or undefined when calling reads.');
        }
        // verify required parameter 'max' is not null or undefined
        if (max === null || max === undefined) {
            throw new Error('Required parameter max was null or undefined when calling reads.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "Array<DocumentModel>");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in reads!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow READ filtered list
     * @param filter FBV meadow filter
     * @param begin Beginning (skip) number of records (to page)
     * @param max Maximum number of records to return
     */
    readsFiltered(filter, begin, max) {
        const localVarPath = this.basePath + '/Documents/FilteredTo/{filter}/{begin}/{max}'
            .replace('{' + 'filter' + '}', encodeURIComponent(String(filter)))
            .replace('{' + 'begin' + '}', encodeURIComponent(String(begin)))
            .replace('{' + 'max' + '}', encodeURIComponent(String(max)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'filter' is not null or undefined
        if (filter === null || filter === undefined) {
            throw new Error('Required parameter filter was null or undefined when calling readsFiltered.');
        }
        // verify required parameter 'begin' is not null or undefined
        if (begin === null || begin === undefined) {
            throw new Error('Required parameter begin was null or undefined when calling readsFiltered.');
        }
        // verify required parameter 'max' is not null or undefined
        if (max === null || max === undefined) {
            throw new Error('Required parameter max was null or undefined when calling readsFiltered.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "Array<DocumentModel>");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in readsFiltered!`);
                    }
                }
            });
        }));
    }
    /**
     *
     * @param IDObservation ID of record
     * @param IDDocument ID of record
     */
    removeDocumentObservation(IDObservation, IDDocument) {
        const localVarPath = this.basePath + '/Document/{IDDocument}/RemoveObservation/{IDObservation}'
            .replace('{' + 'IDObservation' + '}', encodeURIComponent(String(IDObservation)))
            .replace('{' + 'IDDocument' + '}', encodeURIComponent(String(IDDocument)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'IDObservation' is not null or undefined
        if (IDObservation === null || IDObservation === undefined) {
            throw new Error('Required parameter IDObservation was null or undefined when calling removeDocumentObservation.');
        }
        // verify required parameter 'IDDocument' is not null or undefined
        if (IDDocument === null || IDDocument === undefined) {
            throw new Error('Required parameter IDDocument was null or undefined when calling removeDocumentObservation.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in removeDocumentObservation!`);
                    }
                }
            });
        }));
    }
    /**
     * Attach an ElectronicSignature to a Document
     * @param IDElectronicSignature ID of record
     * @param IDDocument ID of record
     */
    signDocument(IDElectronicSignature, IDDocument) {
        const localVarPath = this.basePath + '/Document/Sign/{IDDocument}/{IDElectronicSignature}'
            .replace('{' + 'IDElectronicSignature' + '}', encodeURIComponent(String(IDElectronicSignature)))
            .replace('{' + 'IDDocument' + '}', encodeURIComponent(String(IDDocument)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'IDElectronicSignature' is not null or undefined
        if (IDElectronicSignature === null || IDElectronicSignature === undefined) {
            throw new Error('Required parameter IDElectronicSignature was null or undefined when calling signDocument.');
        }
        // verify required parameter 'IDDocument' is not null or undefined
        if (IDDocument === null || IDDocument === undefined) {
            throw new Error('Required parameter IDDocument was null or undefined when calling signDocument.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in signDocument!`);
                    }
                }
            });
        }));
    }
    /**
     * UNDelete a specific Document
     * @param IDDocument ID of record
     */
    undeleteDocument(IDDocument) {
        const localVarPath = this.basePath + '/Document/Undelete/{IDDocument}'
            .replace('{' + 'IDDocument' + '}', encodeURIComponent(String(IDDocument)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'IDDocument' is not null or undefined
        if (IDDocument === null || IDDocument === undefined) {
            throw new Error('Required parameter IDDocument was null or undefined when calling undeleteDocument.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in undeleteDocument!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow PUT (Update)
     * @param body
     */
    update(body) {
        const localVarPath = this.basePath + '/Document';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling update.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'PUT',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "DocumentModel")
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "DocumentModel");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in update!`);
                    }
                }
            });
        }));
    }
    /**
     * Update Document ExternalSyncDate field
     */
    updateDocumentExternalSyncDate() {
        const localVarPath = this.basePath + '/Document/UpdateExternalSyncDate';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'POST',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in updateDocumentExternalSyncDate!`);
                    }
                }
            });
        }));
    }
    getLastResponse() {
        let response = this._lastResponse;
        this._lastResponse = null;
        return response;
    }
}
exports.DocumentApi = DocumentApi;
var DocumentApprovalApiApiKeys;
(function (DocumentApprovalApiApiKeys) {
})(DocumentApprovalApiApiKeys = exports.DocumentApprovalApiApiKeys || (exports.DocumentApprovalApiApiKeys = {}));
class DocumentApprovalApi {
    constructor(basePathOrUsername, password, basePath) {
        this._basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this._lastResponse = null;
        this._timeout = DEFAULT_TIMEOUT;
        this.authentications = {
            'default': new VoidAuth(),
        };
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    set useQuerystring(value) {
        this._useQuerystring = value;
    }
    set basePath(basePath) {
        this._basePath = basePath;
    }
    get basePath() {
        return this._basePath;
    }
    set timeout(pTimeout) {
        this._timeout = pTimeout;
    }
    get timeout() {
        return this._timeout;
    }
    setDefaultAuthentication(auth) {
        this.authentications.default = auth;
    }
    setApiKey(key, value) {
        this.authentications[DocumentApprovalApiApiKeys[key]].apiKey = value;
    }
    /**
     * Get list of Approvers for Document
     * @param IDDocument ID of record
     */
    getDocumentApproverList(IDDocument) {
        const localVarPath = this.basePath + '/DocumentApproval/{IDDocument}/ApproverList'
            .replace('{' + 'IDDocument' + '}', encodeURIComponent(String(IDDocument)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'IDDocument' is not null or undefined
        if (IDDocument === null || IDDocument === undefined) {
            throw new Error('Required parameter IDDocument was null or undefined when calling getDocumentApproverList.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in getDocumentApproverList!`);
                    }
                }
            });
        }));
    }
    /**
     * Get current Approval state of Document, and available actions for respective user as it relates to that state
     * @param IDDocument ID of record
     */
    getDocumentState(IDDocument) {
        const localVarPath = this.basePath + '/DocumentApproval/{IDDocument}/State'
            .replace('{' + 'IDDocument' + '}', encodeURIComponent(String(IDDocument)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'IDDocument' is not null or undefined
        if (IDDocument === null || IDDocument === undefined) {
            throw new Error('Required parameter IDDocument was null or undefined when calling getDocumentState.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in getDocumentState!`);
                    }
                }
            });
        }));
    }
    /**
     * Perform Approval state transition action against Document
     * @param body
     */
    postChangeDocumenttState(body) {
        const localVarPath = this.basePath + '/DocumentApproval';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling postChangeDocumenttState.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'POST',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "DocumentStateChangeRequest")
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in postChangeDocumenttState!`);
                    }
                }
            });
        }));
    }
    getLastResponse() {
        let response = this._lastResponse;
        this._lastResponse = null;
        return response;
    }
}
exports.DocumentApprovalApi = DocumentApprovalApi;
var DocumentSendToApiApiKeys;
(function (DocumentSendToApiApiKeys) {
})(DocumentSendToApiApiKeys = exports.DocumentSendToApiApiKeys || (exports.DocumentSendToApiApiKeys = {}));
class DocumentSendToApi {
    constructor(basePathOrUsername, password, basePath) {
        this._basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this._lastResponse = null;
        this._timeout = DEFAULT_TIMEOUT;
        this.authentications = {
            'default': new VoidAuth(),
        };
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    set useQuerystring(value) {
        this._useQuerystring = value;
    }
    set basePath(basePath) {
        this._basePath = basePath;
    }
    get basePath() {
        return this._basePath;
    }
    set timeout(pTimeout) {
        this._timeout = pTimeout;
    }
    get timeout() {
        return this._timeout;
    }
    setDefaultAuthentication(auth) {
        this.authentications.default = auth;
    }
    setApiKey(key, value) {
        this.authentications[DocumentSendToApiApiKeys[key]].apiKey = value;
    }
    /**
     *
     * @param IDDocument ID of record
     * @param body
     */
    postDocumentSendToEmail(IDDocument, body) {
        const localVarPath = this.basePath + '/DocumentSendTo/{IDDocument}/Email'
            .replace('{' + 'IDDocument' + '}', encodeURIComponent(String(IDDocument)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'IDDocument' is not null or undefined
        if (IDDocument === null || IDDocument === undefined) {
            throw new Error('Required parameter IDDocument was null or undefined when calling postDocumentSendToEmail.');
        }
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling postDocumentSendToEmail.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'POST',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "SendToEmailRequest")
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in postDocumentSendToEmail!`);
                    }
                }
            });
        }));
    }
    getLastResponse() {
        let response = this._lastResponse;
        this._lastResponse = null;
        return response;
    }
}
exports.DocumentSendToApi = DocumentSendToApi;
var DocumentsApiApiKeys;
(function (DocumentsApiApiKeys) {
})(DocumentsApiApiKeys = exports.DocumentsApiApiKeys || (exports.DocumentsApiApiKeys = {}));
class DocumentsApi {
    constructor(basePathOrUsername, password, basePath) {
        this._basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this._lastResponse = null;
        this._timeout = DEFAULT_TIMEOUT;
        this.authentications = {
            'default': new VoidAuth(),
        };
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    set useQuerystring(value) {
        this._useQuerystring = value;
    }
    set basePath(basePath) {
        this._basePath = basePath;
    }
    get basePath() {
        return this._basePath;
    }
    set timeout(pTimeout) {
        this._timeout = pTimeout;
    }
    get timeout() {
        return this._timeout;
    }
    setDefaultAuthentication(auth) {
        this.authentications.default = auth;
    }
    setApiKey(key, value) {
        this.authentications[DocumentsApiApiKeys[key]].apiKey = value;
    }
    /**
     * Get all Document records for this user that have changed since the sync date
     * @param SynchronizeFromDate FROM date (descending)
     * @param Begin Beginning (skip) number of records (to page)
     * @param Cap Maximum number of records to return
     */
    getUpdatedDocuments(SynchronizeFromDate, Begin, Cap) {
        const localVarPath = this.basePath + '/Documents/Sync/{SynchronizeFromDate}/{Begin}/{Cap}'
            .replace('{' + 'SynchronizeFromDate' + '}', encodeURIComponent(String(SynchronizeFromDate)))
            .replace('{' + 'Begin' + '}', encodeURIComponent(String(Begin)))
            .replace('{' + 'Cap' + '}', encodeURIComponent(String(Cap)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'SynchronizeFromDate' is not null or undefined
        if (SynchronizeFromDate === null || SynchronizeFromDate === undefined) {
            throw new Error('Required parameter SynchronizeFromDate was null or undefined when calling getUpdatedDocuments.');
        }
        // verify required parameter 'Begin' is not null or undefined
        if (Begin === null || Begin === undefined) {
            throw new Error('Required parameter Begin was null or undefined when calling getUpdatedDocuments.');
        }
        // verify required parameter 'Cap' is not null or undefined
        if (Cap === null || Cap === undefined) {
            throw new Error('Required parameter Cap was null or undefined when calling getUpdatedDocuments.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in getUpdatedDocuments!`);
                    }
                }
            });
        }));
    }
    /**
     * Sync Documents  Process (since this is so complex): 1. FOR EACH Document     1.1 Archive the Document     1.2 Merge in the Changes     1.5 After all Detail records are successfully stored, Update Document so Document.definition contains the serialized array of Details 2. Get all Document records for this user that have changed since the sync date
     * @param SynchronizeFromDate FROM date (descending)
     * @param Begin Beginning (skip) number of records (to page)
     * @param Cap Maximum number of records to return
     */
    syncDocuments(SynchronizeFromDate, Begin, Cap) {
        const localVarPath = this.basePath + '/Documents/Sync/{SynchronizeFromDate}/{Begin}/{Cap}'
            .replace('{' + 'SynchronizeFromDate' + '}', encodeURIComponent(String(SynchronizeFromDate)))
            .replace('{' + 'Begin' + '}', encodeURIComponent(String(Begin)))
            .replace('{' + 'Cap' + '}', encodeURIComponent(String(Cap)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'SynchronizeFromDate' is not null or undefined
        if (SynchronizeFromDate === null || SynchronizeFromDate === undefined) {
            throw new Error('Required parameter SynchronizeFromDate was null or undefined when calling syncDocuments.');
        }
        // verify required parameter 'Begin' is not null or undefined
        if (Begin === null || Begin === undefined) {
            throw new Error('Required parameter Begin was null or undefined when calling syncDocuments.');
        }
        // verify required parameter 'Cap' is not null or undefined
        if (Cap === null || Cap === undefined) {
            throw new Error('Required parameter Cap was null or undefined when calling syncDocuments.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'POST',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in syncDocuments!`);
                    }
                }
            });
        }));
    }
    getLastResponse() {
        let response = this._lastResponse;
        this._lastResponse = null;
        return response;
    }
}
exports.DocumentsApi = DocumentsApi;
var DocumentsByObservationApiApiKeys;
(function (DocumentsByObservationApiApiKeys) {
})(DocumentsByObservationApiApiKeys = exports.DocumentsByObservationApiApiKeys || (exports.DocumentsByObservationApiApiKeys = {}));
class DocumentsByObservationApi {
    constructor(basePathOrUsername, password, basePath) {
        this._basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this._lastResponse = null;
        this._timeout = DEFAULT_TIMEOUT;
        this.authentications = {
            'default': new VoidAuth(),
        };
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    set useQuerystring(value) {
        this._useQuerystring = value;
    }
    set basePath(basePath) {
        this._basePath = basePath;
    }
    get basePath() {
        return this._basePath;
    }
    set timeout(pTimeout) {
        this._timeout = pTimeout;
    }
    get timeout() {
        return this._timeout;
    }
    setDefaultAuthentication(auth) {
        this.authentications.default = auth;
    }
    setApiKey(key, value) {
        this.authentications[DocumentsByObservationApiApiKeys[key]].apiKey = value;
    }
    /**
     *
     * @param IDObservation ID of record
     */
    getDocumentByObservation(IDObservation) {
        const localVarPath = this.basePath + '/DocumentsByObservation/{IDObservation}'
            .replace('{' + 'IDObservation' + '}', encodeURIComponent(String(IDObservation)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'IDObservation' is not null or undefined
        if (IDObservation === null || IDObservation === undefined) {
            throw new Error('Required parameter IDObservation was null or undefined when calling getDocumentByObservation.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in getDocumentByObservation!`);
                    }
                }
            });
        }));
    }
    getLastResponse() {
        let response = this._lastResponse;
        this._lastResponse = null;
        return response;
    }
}
exports.DocumentsByObservationApi = DocumentsByObservationApi;
var ElectronicSignatureApiApiKeys;
(function (ElectronicSignatureApiApiKeys) {
})(ElectronicSignatureApiApiKeys = exports.ElectronicSignatureApiApiKeys || (exports.ElectronicSignatureApiApiKeys = {}));
class ElectronicSignatureApi {
    constructor(basePathOrUsername, password, basePath) {
        this._basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this._lastResponse = null;
        this._timeout = DEFAULT_TIMEOUT;
        this.authentications = {
            'default': new VoidAuth(),
        };
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    set useQuerystring(value) {
        this._useQuerystring = value;
    }
    set basePath(basePath) {
        this._basePath = basePath;
    }
    get basePath() {
        return this._basePath;
    }
    set timeout(pTimeout) {
        this._timeout = pTimeout;
    }
    get timeout() {
        return this._timeout;
    }
    setDefaultAuthentication(auth) {
        this.authentications.default = auth;
    }
    setApiKey(key, value) {
        this.authentications[ElectronicSignatureApiApiKeys[key]].apiKey = value;
    }
    /**
     * Meadow DELETE
     * @param id ID of record
     */
    _delete(id) {
        const localVarPath = this.basePath + '/ElectronicSignature/{id}'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling _delete.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'DELETE',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "boolean");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in _delete!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow COUNT
     */
    count() {
        const localVarPath = this.basePath + '/ElectronicSignatures/Count';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "InlineResponse200");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in count!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow COUNT with filter
     * @param filter FBV meadow filter
     */
    countFiltered(filter) {
        const localVarPath = this.basePath + '/ElectronicSignatures/FilteredTo/{filter}/Count'
            .replace('{' + 'filter' + '}', encodeURIComponent(String(filter)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'filter' is not null or undefined
        if (filter === null || filter === undefined) {
            throw new Error('Required parameter filter was null or undefined when calling countFiltered.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "InlineResponse200");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in countFiltered!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow POST (Create)
     * @param body
     */
    create(body) {
        const localVarPath = this.basePath + '/ElectronicSignature';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling create.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'POST',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "ElectronicSignatureModel")
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "ElectronicSignatureModel");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in create!`);
                    }
                }
            });
        }));
    }
    /**
     *
     * @param body
     */
    postReadCountQuery(body) {
        const localVarPath = this.basePath + '/ElectronicSignature/query/count';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling postReadCountQuery.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'POST',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "QueryRequest")
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "InlineResponse200");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in postReadCountQuery!`);
                    }
                }
            });
        }));
    }
    /**
     *
     * @param body
     */
    postReadQuery(body) {
        const localVarPath = this.basePath + '/ElectronicSignature/query/read';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling postReadQuery.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'POST',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "QueryRequest")
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "Array<ElectronicSignatureModel>");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in postReadQuery!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow READ
     * @param id ID of record
     */
    read(id) {
        const localVarPath = this.basePath + '/ElectronicSignature/{id}'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling read.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "ElectronicSignatureModel");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in read!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow READ list
     * @param begin Beginning (skip) number of records (to page)
     * @param max Maximum number of records to return
     */
    reads(begin, max) {
        const localVarPath = this.basePath + '/ElectronicSignatures/{begin}/{max}'
            .replace('{' + 'begin' + '}', encodeURIComponent(String(begin)))
            .replace('{' + 'max' + '}', encodeURIComponent(String(max)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'begin' is not null or undefined
        if (begin === null || begin === undefined) {
            throw new Error('Required parameter begin was null or undefined when calling reads.');
        }
        // verify required parameter 'max' is not null or undefined
        if (max === null || max === undefined) {
            throw new Error('Required parameter max was null or undefined when calling reads.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "Array<ElectronicSignatureModel>");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in reads!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow READ filtered list
     * @param filter FBV meadow filter
     * @param begin Beginning (skip) number of records (to page)
     * @param max Maximum number of records to return
     */
    readsFiltered(filter, begin, max) {
        const localVarPath = this.basePath + '/ElectronicSignatures/FilteredTo/{filter}/{begin}/{max}'
            .replace('{' + 'filter' + '}', encodeURIComponent(String(filter)))
            .replace('{' + 'begin' + '}', encodeURIComponent(String(begin)))
            .replace('{' + 'max' + '}', encodeURIComponent(String(max)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'filter' is not null or undefined
        if (filter === null || filter === undefined) {
            throw new Error('Required parameter filter was null or undefined when calling readsFiltered.');
        }
        // verify required parameter 'begin' is not null or undefined
        if (begin === null || begin === undefined) {
            throw new Error('Required parameter begin was null or undefined when calling readsFiltered.');
        }
        // verify required parameter 'max' is not null or undefined
        if (max === null || max === undefined) {
            throw new Error('Required parameter max was null or undefined when calling readsFiltered.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "Array<ElectronicSignatureModel>");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in readsFiltered!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow PUT (Update)
     * @param body
     */
    update(body) {
        const localVarPath = this.basePath + '/ElectronicSignature';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling update.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'PUT',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "ElectronicSignatureModel")
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "ElectronicSignatureModel");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in update!`);
                    }
                }
            });
        }));
    }
    getLastResponse() {
        let response = this._lastResponse;
        this._lastResponse = null;
        return response;
    }
}
exports.ElectronicSignatureApi = ElectronicSignatureApi;
var EquipmentApiApiKeys;
(function (EquipmentApiApiKeys) {
})(EquipmentApiApiKeys = exports.EquipmentApiApiKeys || (exports.EquipmentApiApiKeys = {}));
class EquipmentApi {
    constructor(basePathOrUsername, password, basePath) {
        this._basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this._lastResponse = null;
        this._timeout = DEFAULT_TIMEOUT;
        this.authentications = {
            'default': new VoidAuth(),
        };
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    set useQuerystring(value) {
        this._useQuerystring = value;
    }
    set basePath(basePath) {
        this._basePath = basePath;
    }
    get basePath() {
        return this._basePath;
    }
    set timeout(pTimeout) {
        this._timeout = pTimeout;
    }
    get timeout() {
        return this._timeout;
    }
    setDefaultAuthentication(auth) {
        this.authentications.default = auth;
    }
    setApiKey(key, value) {
        this.authentications[EquipmentApiApiKeys[key]].apiKey = value;
    }
    /**
     * Meadow DELETE
     * @param id ID of record
     */
    _delete(id) {
        const localVarPath = this.basePath + '/Equipment/{id}'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling _delete.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'DELETE',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "boolean");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in _delete!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow COUNT
     */
    count() {
        const localVarPath = this.basePath + '/Equipments/Count';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "InlineResponse200");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in count!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow COUNT with filter
     * @param filter FBV meadow filter
     */
    countFiltered(filter) {
        const localVarPath = this.basePath + '/Equipments/FilteredTo/{filter}/Count'
            .replace('{' + 'filter' + '}', encodeURIComponent(String(filter)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'filter' is not null or undefined
        if (filter === null || filter === undefined) {
            throw new Error('Required parameter filter was null or undefined when calling countFiltered.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "InlineResponse200");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in countFiltered!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow POST (Create)
     * @param body
     */
    create(body) {
        const localVarPath = this.basePath + '/Equipment';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling create.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'POST',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "Equipment")
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "Equipment");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in create!`);
                    }
                }
            });
        }));
    }
    /**
     *
     * @param body
     */
    postReadCountQuery(body) {
        const localVarPath = this.basePath + '/Equipment/query/count';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling postReadCountQuery.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'POST',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "QueryRequest")
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "InlineResponse200");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in postReadCountQuery!`);
                    }
                }
            });
        }));
    }
    /**
     *
     * @param body
     */
    postReadQuery(body) {
        const localVarPath = this.basePath + '/Equipment/query/read';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling postReadQuery.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'POST',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "QueryRequest")
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "Array<Equipment>");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in postReadQuery!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow READ
     * @param id ID of record
     */
    read(id) {
        const localVarPath = this.basePath + '/Equipment/{id}'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling read.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "Equipment");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in read!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow READ list
     * @param begin Beginning (skip) number of records (to page)
     * @param max Maximum number of records to return
     */
    reads(begin, max) {
        const localVarPath = this.basePath + '/Equipments/{begin}/{max}'
            .replace('{' + 'begin' + '}', encodeURIComponent(String(begin)))
            .replace('{' + 'max' + '}', encodeURIComponent(String(max)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'begin' is not null or undefined
        if (begin === null || begin === undefined) {
            throw new Error('Required parameter begin was null or undefined when calling reads.');
        }
        // verify required parameter 'max' is not null or undefined
        if (max === null || max === undefined) {
            throw new Error('Required parameter max was null or undefined when calling reads.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "Array<Equipment>");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in reads!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow READ filtered list
     * @param filter FBV meadow filter
     * @param begin Beginning (skip) number of records (to page)
     * @param max Maximum number of records to return
     */
    readsFiltered(filter, begin, max) {
        const localVarPath = this.basePath + '/Equipments/FilteredTo/{filter}/{begin}/{max}'
            .replace('{' + 'filter' + '}', encodeURIComponent(String(filter)))
            .replace('{' + 'begin' + '}', encodeURIComponent(String(begin)))
            .replace('{' + 'max' + '}', encodeURIComponent(String(max)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'filter' is not null or undefined
        if (filter === null || filter === undefined) {
            throw new Error('Required parameter filter was null or undefined when calling readsFiltered.');
        }
        // verify required parameter 'begin' is not null or undefined
        if (begin === null || begin === undefined) {
            throw new Error('Required parameter begin was null or undefined when calling readsFiltered.');
        }
        // verify required parameter 'max' is not null or undefined
        if (max === null || max === undefined) {
            throw new Error('Required parameter max was null or undefined when calling readsFiltered.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "Array<Equipment>");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in readsFiltered!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow PUT (Update)
     * @param body
     */
    update(body) {
        const localVarPath = this.basePath + '/Equipment';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling update.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'PUT',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "Equipment")
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "Equipment");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in update!`);
                    }
                }
            });
        }));
    }
    getLastResponse() {
        let response = this._lastResponse;
        this._lastResponse = null;
        return response;
    }
}
exports.EquipmentApi = EquipmentApi;
var LabApiApiKeys;
(function (LabApiApiKeys) {
})(LabApiApiKeys = exports.LabApiApiKeys || (exports.LabApiApiKeys = {}));
class LabApi {
    constructor(basePathOrUsername, password, basePath) {
        this._basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this._lastResponse = null;
        this._timeout = DEFAULT_TIMEOUT;
        this.authentications = {
            'default': new VoidAuth(),
        };
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    set useQuerystring(value) {
        this._useQuerystring = value;
    }
    set basePath(basePath) {
        this._basePath = basePath;
    }
    get basePath() {
        return this._basePath;
    }
    set timeout(pTimeout) {
        this._timeout = pTimeout;
    }
    get timeout() {
        return this._timeout;
    }
    setDefaultAuthentication(auth) {
        this.authentications.default = auth;
    }
    setApiKey(key, value) {
        this.authentications[LabApiApiKeys[key]].apiKey = value;
    }
    /**
     * Meadow DELETE
     * @param id ID of record
     */
    _delete(id) {
        const localVarPath = this.basePath + '/Lab/{id}'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling _delete.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'DELETE',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "boolean");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in _delete!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow COUNT
     */
    count() {
        const localVarPath = this.basePath + '/Labs/Count';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "InlineResponse200");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in count!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow COUNT with filter
     * @param filter FBV meadow filter
     */
    countFiltered(filter) {
        const localVarPath = this.basePath + '/Labs/FilteredTo/{filter}/Count'
            .replace('{' + 'filter' + '}', encodeURIComponent(String(filter)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'filter' is not null or undefined
        if (filter === null || filter === undefined) {
            throw new Error('Required parameter filter was null or undefined when calling countFiltered.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "InlineResponse200");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in countFiltered!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow POST (Create)
     * @param body
     */
    create(body) {
        const localVarPath = this.basePath + '/Lab';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling create.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'POST',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "Lab")
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "Lab");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in create!`);
                    }
                }
            });
        }));
    }
    /**
     *
     * @param body
     */
    postReadCountQuery(body) {
        const localVarPath = this.basePath + '/Lab/query/count';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling postReadCountQuery.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'POST',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "QueryRequest")
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "InlineResponse200");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in postReadCountQuery!`);
                    }
                }
            });
        }));
    }
    /**
     *
     * @param body
     */
    postReadQuery(body) {
        const localVarPath = this.basePath + '/Lab/query/read';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling postReadQuery.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'POST',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "QueryRequest")
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "Array<Lab>");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in postReadQuery!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow READ
     * @param id ID of record
     */
    read(id) {
        const localVarPath = this.basePath + '/Lab/{id}'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling read.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "Lab");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in read!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow READ list
     * @param begin Beginning (skip) number of records (to page)
     * @param max Maximum number of records to return
     */
    reads(begin, max) {
        const localVarPath = this.basePath + '/Labs/{begin}/{max}'
            .replace('{' + 'begin' + '}', encodeURIComponent(String(begin)))
            .replace('{' + 'max' + '}', encodeURIComponent(String(max)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'begin' is not null or undefined
        if (begin === null || begin === undefined) {
            throw new Error('Required parameter begin was null or undefined when calling reads.');
        }
        // verify required parameter 'max' is not null or undefined
        if (max === null || max === undefined) {
            throw new Error('Required parameter max was null or undefined when calling reads.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "Array<Lab>");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in reads!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow READ filtered list
     * @param filter FBV meadow filter
     * @param begin Beginning (skip) number of records (to page)
     * @param max Maximum number of records to return
     */
    readsFiltered(filter, begin, max) {
        const localVarPath = this.basePath + '/Labs/FilteredTo/{filter}/{begin}/{max}'
            .replace('{' + 'filter' + '}', encodeURIComponent(String(filter)))
            .replace('{' + 'begin' + '}', encodeURIComponent(String(begin)))
            .replace('{' + 'max' + '}', encodeURIComponent(String(max)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'filter' is not null or undefined
        if (filter === null || filter === undefined) {
            throw new Error('Required parameter filter was null or undefined when calling readsFiltered.');
        }
        // verify required parameter 'begin' is not null or undefined
        if (begin === null || begin === undefined) {
            throw new Error('Required parameter begin was null or undefined when calling readsFiltered.');
        }
        // verify required parameter 'max' is not null or undefined
        if (max === null || max === undefined) {
            throw new Error('Required parameter max was null or undefined when calling readsFiltered.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "Array<Lab>");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in readsFiltered!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow PUT (Update)
     * @param body
     */
    update(body) {
        const localVarPath = this.basePath + '/Lab';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling update.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'PUT',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "Lab")
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "Lab");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in update!`);
                    }
                }
            });
        }));
    }
    getLastResponse() {
        let response = this._lastResponse;
        this._lastResponse = null;
        return response;
    }
}
exports.LabApi = LabApi;
var LabMaterialAssignmentApiApiKeys;
(function (LabMaterialAssignmentApiApiKeys) {
})(LabMaterialAssignmentApiApiKeys = exports.LabMaterialAssignmentApiApiKeys || (exports.LabMaterialAssignmentApiApiKeys = {}));
class LabMaterialAssignmentApi {
    constructor(basePathOrUsername, password, basePath) {
        this._basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this._lastResponse = null;
        this._timeout = DEFAULT_TIMEOUT;
        this.authentications = {
            'default': new VoidAuth(),
        };
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    set useQuerystring(value) {
        this._useQuerystring = value;
    }
    set basePath(basePath) {
        this._basePath = basePath;
    }
    get basePath() {
        return this._basePath;
    }
    set timeout(pTimeout) {
        this._timeout = pTimeout;
    }
    get timeout() {
        return this._timeout;
    }
    setDefaultAuthentication(auth) {
        this.authentications.default = auth;
    }
    setApiKey(key, value) {
        this.authentications[LabMaterialAssignmentApiApiKeys[key]].apiKey = value;
    }
    /**
     * Meadow DELETE
     * @param id ID of record
     */
    _delete(id) {
        const localVarPath = this.basePath + '/LabMaterialAssignment/{id}'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling _delete.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'DELETE',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "boolean");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in _delete!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow COUNT
     */
    count() {
        const localVarPath = this.basePath + '/LabMaterialAssignments/Count';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "InlineResponse200");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in count!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow COUNT with filter
     * @param filter FBV meadow filter
     */
    countFiltered(filter) {
        const localVarPath = this.basePath + '/LabMaterialAssignments/FilteredTo/{filter}/Count'
            .replace('{' + 'filter' + '}', encodeURIComponent(String(filter)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'filter' is not null or undefined
        if (filter === null || filter === undefined) {
            throw new Error('Required parameter filter was null or undefined when calling countFiltered.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "InlineResponse200");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in countFiltered!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow POST (Create)
     * @param body
     */
    create(body) {
        const localVarPath = this.basePath + '/LabMaterialAssignment';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling create.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'POST',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "LabMaterialAssignment")
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "LabMaterialAssignment");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in create!`);
                    }
                }
            });
        }));
    }
    /**
     *
     * @param body
     */
    postReadCountQuery(body) {
        const localVarPath = this.basePath + '/LabMaterialAssignment/query/count';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling postReadCountQuery.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'POST',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "QueryRequest")
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "InlineResponse200");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in postReadCountQuery!`);
                    }
                }
            });
        }));
    }
    /**
     *
     * @param body
     */
    postReadQuery(body) {
        const localVarPath = this.basePath + '/LabMaterialAssignment/query/read';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling postReadQuery.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'POST',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "QueryRequest")
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "Array<LabMaterialAssignment>");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in postReadQuery!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow READ
     * @param id ID of record
     */
    read(id) {
        const localVarPath = this.basePath + '/LabMaterialAssignment/{id}'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling read.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "LabMaterialAssignment");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in read!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow READ list
     * @param begin Beginning (skip) number of records (to page)
     * @param max Maximum number of records to return
     */
    reads(begin, max) {
        const localVarPath = this.basePath + '/LabMaterialAssignments/{begin}/{max}'
            .replace('{' + 'begin' + '}', encodeURIComponent(String(begin)))
            .replace('{' + 'max' + '}', encodeURIComponent(String(max)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'begin' is not null or undefined
        if (begin === null || begin === undefined) {
            throw new Error('Required parameter begin was null or undefined when calling reads.');
        }
        // verify required parameter 'max' is not null or undefined
        if (max === null || max === undefined) {
            throw new Error('Required parameter max was null or undefined when calling reads.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "Array<LabMaterialAssignment>");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in reads!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow READ filtered list
     * @param filter FBV meadow filter
     * @param begin Beginning (skip) number of records (to page)
     * @param max Maximum number of records to return
     */
    readsFiltered(filter, begin, max) {
        const localVarPath = this.basePath + '/LabMaterialAssignments/FilteredTo/{filter}/{begin}/{max}'
            .replace('{' + 'filter' + '}', encodeURIComponent(String(filter)))
            .replace('{' + 'begin' + '}', encodeURIComponent(String(begin)))
            .replace('{' + 'max' + '}', encodeURIComponent(String(max)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'filter' is not null or undefined
        if (filter === null || filter === undefined) {
            throw new Error('Required parameter filter was null or undefined when calling readsFiltered.');
        }
        // verify required parameter 'begin' is not null or undefined
        if (begin === null || begin === undefined) {
            throw new Error('Required parameter begin was null or undefined when calling readsFiltered.');
        }
        // verify required parameter 'max' is not null or undefined
        if (max === null || max === undefined) {
            throw new Error('Required parameter max was null or undefined when calling readsFiltered.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "Array<LabMaterialAssignment>");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in readsFiltered!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow PUT (Update)
     * @param body
     */
    update(body) {
        const localVarPath = this.basePath + '/LabMaterialAssignment';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling update.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'PUT',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "LabMaterialAssignment")
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "LabMaterialAssignment");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in update!`);
                    }
                }
            });
        }));
    }
    getLastResponse() {
        let response = this._lastResponse;
        this._lastResponse = null;
        return response;
    }
}
exports.LabMaterialAssignmentApi = LabMaterialAssignmentApi;
var LabTestApprovalApiApiKeys;
(function (LabTestApprovalApiApiKeys) {
})(LabTestApprovalApiApiKeys = exports.LabTestApprovalApiApiKeys || (exports.LabTestApprovalApiApiKeys = {}));
class LabTestApprovalApi {
    constructor(basePathOrUsername, password, basePath) {
        this._basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this._lastResponse = null;
        this._timeout = DEFAULT_TIMEOUT;
        this.authentications = {
            'default': new VoidAuth(),
        };
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    set useQuerystring(value) {
        this._useQuerystring = value;
    }
    set basePath(basePath) {
        this._basePath = basePath;
    }
    get basePath() {
        return this._basePath;
    }
    set timeout(pTimeout) {
        this._timeout = pTimeout;
    }
    get timeout() {
        return this._timeout;
    }
    setDefaultAuthentication(auth) {
        this.authentications.default = auth;
    }
    setApiKey(key, value) {
        this.authentications[LabTestApprovalApiApiKeys[key]].apiKey = value;
    }
    /**
     * Meadow DELETE
     * @param id ID of record
     */
    _delete(id) {
        const localVarPath = this.basePath + '/LabTestApproval/{id}'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling _delete.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'DELETE',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "boolean");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in _delete!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow COUNT
     */
    count() {
        const localVarPath = this.basePath + '/LabTestApprovals/Count';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "InlineResponse200");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in count!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow COUNT with filter
     * @param filter FBV meadow filter
     */
    countFiltered(filter) {
        const localVarPath = this.basePath + '/LabTestApprovals/FilteredTo/{filter}/Count'
            .replace('{' + 'filter' + '}', encodeURIComponent(String(filter)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'filter' is not null or undefined
        if (filter === null || filter === undefined) {
            throw new Error('Required parameter filter was null or undefined when calling countFiltered.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "InlineResponse200");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in countFiltered!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow POST (Create)
     * @param body
     */
    create(body) {
        const localVarPath = this.basePath + '/LabTestApproval';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling create.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'POST',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "LabTestApproval")
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "LabTestApproval");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in create!`);
                    }
                }
            });
        }));
    }
    /**
     *
     * @param body
     */
    postReadCountQuery(body) {
        const localVarPath = this.basePath + '/LabTestApproval/query/count';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling postReadCountQuery.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'POST',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "QueryRequest")
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "InlineResponse200");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in postReadCountQuery!`);
                    }
                }
            });
        }));
    }
    /**
     *
     * @param body
     */
    postReadQuery(body) {
        const localVarPath = this.basePath + '/LabTestApproval/query/read';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling postReadQuery.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'POST',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "QueryRequest")
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "Array<LabTestApproval>");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in postReadQuery!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow READ
     * @param id ID of record
     */
    read(id) {
        const localVarPath = this.basePath + '/LabTestApproval/{id}'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling read.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "LabTestApproval");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in read!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow READ list
     * @param begin Beginning (skip) number of records (to page)
     * @param max Maximum number of records to return
     */
    reads(begin, max) {
        const localVarPath = this.basePath + '/LabTestApprovals/{begin}/{max}'
            .replace('{' + 'begin' + '}', encodeURIComponent(String(begin)))
            .replace('{' + 'max' + '}', encodeURIComponent(String(max)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'begin' is not null or undefined
        if (begin === null || begin === undefined) {
            throw new Error('Required parameter begin was null or undefined when calling reads.');
        }
        // verify required parameter 'max' is not null or undefined
        if (max === null || max === undefined) {
            throw new Error('Required parameter max was null or undefined when calling reads.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "Array<LabTestApproval>");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in reads!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow READ filtered list
     * @param filter FBV meadow filter
     * @param begin Beginning (skip) number of records (to page)
     * @param max Maximum number of records to return
     */
    readsFiltered(filter, begin, max) {
        const localVarPath = this.basePath + '/LabTestApprovals/FilteredTo/{filter}/{begin}/{max}'
            .replace('{' + 'filter' + '}', encodeURIComponent(String(filter)))
            .replace('{' + 'begin' + '}', encodeURIComponent(String(begin)))
            .replace('{' + 'max' + '}', encodeURIComponent(String(max)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'filter' is not null or undefined
        if (filter === null || filter === undefined) {
            throw new Error('Required parameter filter was null or undefined when calling readsFiltered.');
        }
        // verify required parameter 'begin' is not null or undefined
        if (begin === null || begin === undefined) {
            throw new Error('Required parameter begin was null or undefined when calling readsFiltered.');
        }
        // verify required parameter 'max' is not null or undefined
        if (max === null || max === undefined) {
            throw new Error('Required parameter max was null or undefined when calling readsFiltered.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "Array<LabTestApproval>");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in readsFiltered!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow PUT (Update)
     * @param body
     */
    update(body) {
        const localVarPath = this.basePath + '/LabTestApproval';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling update.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'PUT',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "LabTestApproval")
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "LabTestApproval");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in update!`);
                    }
                }
            });
        }));
    }
    getLastResponse() {
        let response = this._lastResponse;
        this._lastResponse = null;
        return response;
    }
}
exports.LabTestApprovalApi = LabTestApprovalApi;
var LabTestDefaultApiApiKeys;
(function (LabTestDefaultApiApiKeys) {
})(LabTestDefaultApiApiKeys = exports.LabTestDefaultApiApiKeys || (exports.LabTestDefaultApiApiKeys = {}));
class LabTestDefaultApi {
    constructor(basePathOrUsername, password, basePath) {
        this._basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this._lastResponse = null;
        this._timeout = DEFAULT_TIMEOUT;
        this.authentications = {
            'default': new VoidAuth(),
        };
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    set useQuerystring(value) {
        this._useQuerystring = value;
    }
    set basePath(basePath) {
        this._basePath = basePath;
    }
    get basePath() {
        return this._basePath;
    }
    set timeout(pTimeout) {
        this._timeout = pTimeout;
    }
    get timeout() {
        return this._timeout;
    }
    setDefaultAuthentication(auth) {
        this.authentications.default = auth;
    }
    setApiKey(key, value) {
        this.authentications[LabTestDefaultApiApiKeys[key]].apiKey = value;
    }
    /**
     * Meadow DELETE
     * @param id ID of record
     */
    _delete(id) {
        const localVarPath = this.basePath + '/LabTestDefault/{id}'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling _delete.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'DELETE',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "boolean");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in _delete!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow COUNT
     */
    count() {
        const localVarPath = this.basePath + '/LabTestDefaults/Count';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "InlineResponse200");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in count!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow COUNT with filter
     * @param filter FBV meadow filter
     */
    countFiltered(filter) {
        const localVarPath = this.basePath + '/LabTestDefaults/FilteredTo/{filter}/Count'
            .replace('{' + 'filter' + '}', encodeURIComponent(String(filter)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'filter' is not null or undefined
        if (filter === null || filter === undefined) {
            throw new Error('Required parameter filter was null or undefined when calling countFiltered.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "InlineResponse200");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in countFiltered!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow POST (Create)
     * @param body
     */
    create(body) {
        const localVarPath = this.basePath + '/LabTestDefault';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling create.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'POST',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "LabTestDefault")
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "LabTestDefault");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in create!`);
                    }
                }
            });
        }));
    }
    /**
     *
     * @param body
     */
    postReadCountQuery(body) {
        const localVarPath = this.basePath + '/LabTestDefault/query/count';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling postReadCountQuery.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'POST',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "QueryRequest")
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "InlineResponse200");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in postReadCountQuery!`);
                    }
                }
            });
        }));
    }
    /**
     *
     * @param body
     */
    postReadQuery(body) {
        const localVarPath = this.basePath + '/LabTestDefault/query/read';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling postReadQuery.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'POST',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "QueryRequest")
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "Array<LabTestDefault>");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in postReadQuery!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow READ
     * @param id ID of record
     */
    read(id) {
        const localVarPath = this.basePath + '/LabTestDefault/{id}'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling read.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "LabTestDefault");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in read!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow READ list
     * @param begin Beginning (skip) number of records (to page)
     * @param max Maximum number of records to return
     */
    reads(begin, max) {
        const localVarPath = this.basePath + '/LabTestDefaults/{begin}/{max}'
            .replace('{' + 'begin' + '}', encodeURIComponent(String(begin)))
            .replace('{' + 'max' + '}', encodeURIComponent(String(max)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'begin' is not null or undefined
        if (begin === null || begin === undefined) {
            throw new Error('Required parameter begin was null or undefined when calling reads.');
        }
        // verify required parameter 'max' is not null or undefined
        if (max === null || max === undefined) {
            throw new Error('Required parameter max was null or undefined when calling reads.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "Array<LabTestDefault>");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in reads!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow READ filtered list
     * @param filter FBV meadow filter
     * @param begin Beginning (skip) number of records (to page)
     * @param max Maximum number of records to return
     */
    readsFiltered(filter, begin, max) {
        const localVarPath = this.basePath + '/LabTestDefaults/FilteredTo/{filter}/{begin}/{max}'
            .replace('{' + 'filter' + '}', encodeURIComponent(String(filter)))
            .replace('{' + 'begin' + '}', encodeURIComponent(String(begin)))
            .replace('{' + 'max' + '}', encodeURIComponent(String(max)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'filter' is not null or undefined
        if (filter === null || filter === undefined) {
            throw new Error('Required parameter filter was null or undefined when calling readsFiltered.');
        }
        // verify required parameter 'begin' is not null or undefined
        if (begin === null || begin === undefined) {
            throw new Error('Required parameter begin was null or undefined when calling readsFiltered.');
        }
        // verify required parameter 'max' is not null or undefined
        if (max === null || max === undefined) {
            throw new Error('Required parameter max was null or undefined when calling readsFiltered.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "Array<LabTestDefault>");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in readsFiltered!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow PUT (Update)
     * @param body
     */
    update(body) {
        const localVarPath = this.basePath + '/LabTestDefault';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling update.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'PUT',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "LabTestDefault")
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "LabTestDefault");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in update!`);
                    }
                }
            });
        }));
    }
    getLastResponse() {
        let response = this._lastResponse;
        this._lastResponse = null;
        return response;
    }
}
exports.LabTestDefaultApi = LabTestDefaultApi;
var LineItemApiApiKeys;
(function (LineItemApiApiKeys) {
})(LineItemApiApiKeys = exports.LineItemApiApiKeys || (exports.LineItemApiApiKeys = {}));
class LineItemApi {
    constructor(basePathOrUsername, password, basePath) {
        this._basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this._lastResponse = null;
        this._timeout = DEFAULT_TIMEOUT;
        this.authentications = {
            'default': new VoidAuth(),
        };
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    set useQuerystring(value) {
        this._useQuerystring = value;
    }
    set basePath(basePath) {
        this._basePath = basePath;
    }
    get basePath() {
        return this._basePath;
    }
    set timeout(pTimeout) {
        this._timeout = pTimeout;
    }
    get timeout() {
        return this._timeout;
    }
    setDefaultAuthentication(auth) {
        this.authentications.default = auth;
    }
    setApiKey(key, value) {
        this.authentications[LineItemApiApiKeys[key]].apiKey = value;
    }
    /**
     * Meadow DELETE
     * @param id ID of record
     */
    _delete(id) {
        const localVarPath = this.basePath + '/LineItem/{id}'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling _delete.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'DELETE',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "boolean");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in _delete!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow COUNT
     */
    count() {
        const localVarPath = this.basePath + '/LineItems/Count';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "InlineResponse200");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in count!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow COUNT with filter
     * @param filter FBV meadow filter
     */
    countFiltered(filter) {
        const localVarPath = this.basePath + '/LineItems/FilteredTo/{filter}/Count'
            .replace('{' + 'filter' + '}', encodeURIComponent(String(filter)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'filter' is not null or undefined
        if (filter === null || filter === undefined) {
            throw new Error('Required parameter filter was null or undefined when calling countFiltered.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "InlineResponse200");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in countFiltered!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow POST (Create)
     * @param body
     */
    create(body) {
        const localVarPath = this.basePath + '/LineItem';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling create.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'POST',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "LineItem")
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "LineItem");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in create!`);
                    }
                }
            });
        }));
    }
    /**
     *
     * @param body
     */
    postReadCountQuery(body) {
        const localVarPath = this.basePath + '/LineItem/query/count';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling postReadCountQuery.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'POST',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "QueryRequest")
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "InlineResponse200");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in postReadCountQuery!`);
                    }
                }
            });
        }));
    }
    /**
     *
     * @param body
     */
    postReadQuery(body) {
        const localVarPath = this.basePath + '/LineItem/query/read';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling postReadQuery.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'POST',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "QueryRequest")
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "Array<LineItem>");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in postReadQuery!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow READ
     * @param id ID of record
     */
    read(id) {
        const localVarPath = this.basePath + '/LineItem/{id}'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling read.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "LineItem");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in read!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow READ list
     * @param begin Beginning (skip) number of records (to page)
     * @param max Maximum number of records to return
     */
    reads(begin, max) {
        const localVarPath = this.basePath + '/LineItems/{begin}/{max}'
            .replace('{' + 'begin' + '}', encodeURIComponent(String(begin)))
            .replace('{' + 'max' + '}', encodeURIComponent(String(max)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'begin' is not null or undefined
        if (begin === null || begin === undefined) {
            throw new Error('Required parameter begin was null or undefined when calling reads.');
        }
        // verify required parameter 'max' is not null or undefined
        if (max === null || max === undefined) {
            throw new Error('Required parameter max was null or undefined when calling reads.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "Array<LineItem>");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in reads!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow READ filtered list
     * @param filter FBV meadow filter
     * @param begin Beginning (skip) number of records (to page)
     * @param max Maximum number of records to return
     */
    readsFiltered(filter, begin, max) {
        const localVarPath = this.basePath + '/LineItems/FilteredTo/{filter}/{begin}/{max}'
            .replace('{' + 'filter' + '}', encodeURIComponent(String(filter)))
            .replace('{' + 'begin' + '}', encodeURIComponent(String(begin)))
            .replace('{' + 'max' + '}', encodeURIComponent(String(max)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'filter' is not null or undefined
        if (filter === null || filter === undefined) {
            throw new Error('Required parameter filter was null or undefined when calling readsFiltered.');
        }
        // verify required parameter 'begin' is not null or undefined
        if (begin === null || begin === undefined) {
            throw new Error('Required parameter begin was null or undefined when calling readsFiltered.');
        }
        // verify required parameter 'max' is not null or undefined
        if (max === null || max === undefined) {
            throw new Error('Required parameter max was null or undefined when calling readsFiltered.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "Array<LineItem>");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in readsFiltered!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow PUT (Update)
     * @param body
     */
    update(body) {
        const localVarPath = this.basePath + '/LineItem';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling update.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'PUT',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "LineItem")
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "LineItem");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in update!`);
                    }
                }
            });
        }));
    }
    getLastResponse() {
        let response = this._lastResponse;
        this._lastResponse = null;
        return response;
    }
}
exports.LineItemApi = LineItemApi;
var MaterialApiApiKeys;
(function (MaterialApiApiKeys) {
})(MaterialApiApiKeys = exports.MaterialApiApiKeys || (exports.MaterialApiApiKeys = {}));
class MaterialApi {
    constructor(basePathOrUsername, password, basePath) {
        this._basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this._lastResponse = null;
        this._timeout = DEFAULT_TIMEOUT;
        this.authentications = {
            'default': new VoidAuth(),
        };
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    set useQuerystring(value) {
        this._useQuerystring = value;
    }
    set basePath(basePath) {
        this._basePath = basePath;
    }
    get basePath() {
        return this._basePath;
    }
    set timeout(pTimeout) {
        this._timeout = pTimeout;
    }
    get timeout() {
        return this._timeout;
    }
    setDefaultAuthentication(auth) {
        this.authentications.default = auth;
    }
    setApiKey(key, value) {
        this.authentications[MaterialApiApiKeys[key]].apiKey = value;
    }
    /**
     * Meadow DELETE
     * @param id ID of record
     */
    _delete(id) {
        const localVarPath = this.basePath + '/Material/{id}'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling _delete.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'DELETE',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "boolean");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in _delete!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow COUNT
     */
    count() {
        const localVarPath = this.basePath + '/Materials/Count';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "InlineResponse200");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in count!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow COUNT with filter
     * @param filter FBV meadow filter
     */
    countFiltered(filter) {
        const localVarPath = this.basePath + '/Materials/FilteredTo/{filter}/Count'
            .replace('{' + 'filter' + '}', encodeURIComponent(String(filter)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'filter' is not null or undefined
        if (filter === null || filter === undefined) {
            throw new Error('Required parameter filter was null or undefined when calling countFiltered.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "InlineResponse200");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in countFiltered!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow POST (Create)
     * @param body
     */
    create(body) {
        const localVarPath = this.basePath + '/Material';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling create.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'POST',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "Material")
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "Material");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in create!`);
                    }
                }
            });
        }));
    }
    /**
     *
     * @param body
     */
    postReadCountQuery(body) {
        const localVarPath = this.basePath + '/Material/query/count';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling postReadCountQuery.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'POST',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "QueryRequest")
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "InlineResponse200");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in postReadCountQuery!`);
                    }
                }
            });
        }));
    }
    /**
     *
     * @param body
     */
    postReadQuery(body) {
        const localVarPath = this.basePath + '/Material/query/read';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling postReadQuery.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'POST',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "QueryRequest")
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "Array<Material>");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in postReadQuery!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow READ
     * @param id ID of record
     */
    read(id) {
        const localVarPath = this.basePath + '/Material/{id}'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling read.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "Material");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in read!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow READ list
     * @param begin Beginning (skip) number of records (to page)
     * @param max Maximum number of records to return
     */
    reads(begin, max) {
        const localVarPath = this.basePath + '/Materials/{begin}/{max}'
            .replace('{' + 'begin' + '}', encodeURIComponent(String(begin)))
            .replace('{' + 'max' + '}', encodeURIComponent(String(max)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'begin' is not null or undefined
        if (begin === null || begin === undefined) {
            throw new Error('Required parameter begin was null or undefined when calling reads.');
        }
        // verify required parameter 'max' is not null or undefined
        if (max === null || max === undefined) {
            throw new Error('Required parameter max was null or undefined when calling reads.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "Array<Material>");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in reads!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow READ filtered list
     * @param filter FBV meadow filter
     * @param begin Beginning (skip) number of records (to page)
     * @param max Maximum number of records to return
     */
    readsFiltered(filter, begin, max) {
        const localVarPath = this.basePath + '/Materials/FilteredTo/{filter}/{begin}/{max}'
            .replace('{' + 'filter' + '}', encodeURIComponent(String(filter)))
            .replace('{' + 'begin' + '}', encodeURIComponent(String(begin)))
            .replace('{' + 'max' + '}', encodeURIComponent(String(max)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'filter' is not null or undefined
        if (filter === null || filter === undefined) {
            throw new Error('Required parameter filter was null or undefined when calling readsFiltered.');
        }
        // verify required parameter 'begin' is not null or undefined
        if (begin === null || begin === undefined) {
            throw new Error('Required parameter begin was null or undefined when calling readsFiltered.');
        }
        // verify required parameter 'max' is not null or undefined
        if (max === null || max === undefined) {
            throw new Error('Required parameter max was null or undefined when calling readsFiltered.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "Array<Material>");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in readsFiltered!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow PUT (Update)
     * @param body
     */
    update(body) {
        const localVarPath = this.basePath + '/Material';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling update.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'PUT',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "Material")
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "Material");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in update!`);
                    }
                }
            });
        }));
    }
    getLastResponse() {
        let response = this._lastResponse;
        this._lastResponse = null;
        return response;
    }
}
exports.MaterialApi = MaterialApi;
var MaterialLineItemJoinApiApiKeys;
(function (MaterialLineItemJoinApiApiKeys) {
})(MaterialLineItemJoinApiApiKeys = exports.MaterialLineItemJoinApiApiKeys || (exports.MaterialLineItemJoinApiApiKeys = {}));
class MaterialLineItemJoinApi {
    constructor(basePathOrUsername, password, basePath) {
        this._basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this._lastResponse = null;
        this._timeout = DEFAULT_TIMEOUT;
        this.authentications = {
            'default': new VoidAuth(),
        };
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    set useQuerystring(value) {
        this._useQuerystring = value;
    }
    set basePath(basePath) {
        this._basePath = basePath;
    }
    get basePath() {
        return this._basePath;
    }
    set timeout(pTimeout) {
        this._timeout = pTimeout;
    }
    get timeout() {
        return this._timeout;
    }
    setDefaultAuthentication(auth) {
        this.authentications.default = auth;
    }
    setApiKey(key, value) {
        this.authentications[MaterialLineItemJoinApiApiKeys[key]].apiKey = value;
    }
    /**
     * Meadow DELETE
     * @param id ID of record
     */
    _delete(id) {
        const localVarPath = this.basePath + '/MaterialLineItemJoin/{id}'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling _delete.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'DELETE',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "boolean");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in _delete!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow COUNT
     */
    count() {
        const localVarPath = this.basePath + '/MaterialLineItemJoins/Count';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "InlineResponse200");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in count!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow COUNT with filter
     * @param filter FBV meadow filter
     */
    countFiltered(filter) {
        const localVarPath = this.basePath + '/MaterialLineItemJoins/FilteredTo/{filter}/Count'
            .replace('{' + 'filter' + '}', encodeURIComponent(String(filter)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'filter' is not null or undefined
        if (filter === null || filter === undefined) {
            throw new Error('Required parameter filter was null or undefined when calling countFiltered.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "InlineResponse200");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in countFiltered!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow POST (Create)
     * @param body
     */
    create(body) {
        const localVarPath = this.basePath + '/MaterialLineItemJoin';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling create.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'POST',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "MaterialLineItemJoin")
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "MaterialLineItemJoin");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in create!`);
                    }
                }
            });
        }));
    }
    /**
     *
     * @param body
     */
    postReadCountQuery(body) {
        const localVarPath = this.basePath + '/MaterialLineItemJoin/query/count';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling postReadCountQuery.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'POST',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "QueryRequest")
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "InlineResponse200");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in postReadCountQuery!`);
                    }
                }
            });
        }));
    }
    /**
     *
     * @param body
     */
    postReadQuery(body) {
        const localVarPath = this.basePath + '/MaterialLineItemJoin/query/read';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling postReadQuery.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'POST',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "QueryRequest")
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "Array<MaterialLineItemJoin>");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in postReadQuery!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow READ
     * @param id ID of record
     */
    read(id) {
        const localVarPath = this.basePath + '/MaterialLineItemJoin/{id}'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling read.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "MaterialLineItemJoin");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in read!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow READ list
     * @param begin Beginning (skip) number of records (to page)
     * @param max Maximum number of records to return
     */
    reads(begin, max) {
        const localVarPath = this.basePath + '/MaterialLineItemJoins/{begin}/{max}'
            .replace('{' + 'begin' + '}', encodeURIComponent(String(begin)))
            .replace('{' + 'max' + '}', encodeURIComponent(String(max)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'begin' is not null or undefined
        if (begin === null || begin === undefined) {
            throw new Error('Required parameter begin was null or undefined when calling reads.');
        }
        // verify required parameter 'max' is not null or undefined
        if (max === null || max === undefined) {
            throw new Error('Required parameter max was null or undefined when calling reads.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "Array<MaterialLineItemJoin>");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in reads!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow READ filtered list
     * @param filter FBV meadow filter
     * @param begin Beginning (skip) number of records (to page)
     * @param max Maximum number of records to return
     */
    readsFiltered(filter, begin, max) {
        const localVarPath = this.basePath + '/MaterialLineItemJoins/FilteredTo/{filter}/{begin}/{max}'
            .replace('{' + 'filter' + '}', encodeURIComponent(String(filter)))
            .replace('{' + 'begin' + '}', encodeURIComponent(String(begin)))
            .replace('{' + 'max' + '}', encodeURIComponent(String(max)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'filter' is not null or undefined
        if (filter === null || filter === undefined) {
            throw new Error('Required parameter filter was null or undefined when calling readsFiltered.');
        }
        // verify required parameter 'begin' is not null or undefined
        if (begin === null || begin === undefined) {
            throw new Error('Required parameter begin was null or undefined when calling readsFiltered.');
        }
        // verify required parameter 'max' is not null or undefined
        if (max === null || max === undefined) {
            throw new Error('Required parameter max was null or undefined when calling readsFiltered.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "Array<MaterialLineItemJoin>");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in readsFiltered!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow PUT (Update)
     * @param body
     */
    update(body) {
        const localVarPath = this.basePath + '/MaterialLineItemJoin';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling update.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'PUT',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "MaterialLineItemJoin")
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "MaterialLineItemJoin");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in update!`);
                    }
                }
            });
        }));
    }
    getLastResponse() {
        let response = this._lastResponse;
        this._lastResponse = null;
        return response;
    }
}
exports.MaterialLineItemJoinApi = MaterialLineItemJoinApi;
var MaterialPayItemJoinApiApiKeys;
(function (MaterialPayItemJoinApiApiKeys) {
})(MaterialPayItemJoinApiApiKeys = exports.MaterialPayItemJoinApiApiKeys || (exports.MaterialPayItemJoinApiApiKeys = {}));
class MaterialPayItemJoinApi {
    constructor(basePathOrUsername, password, basePath) {
        this._basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this._lastResponse = null;
        this._timeout = DEFAULT_TIMEOUT;
        this.authentications = {
            'default': new VoidAuth(),
        };
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    set useQuerystring(value) {
        this._useQuerystring = value;
    }
    set basePath(basePath) {
        this._basePath = basePath;
    }
    get basePath() {
        return this._basePath;
    }
    set timeout(pTimeout) {
        this._timeout = pTimeout;
    }
    get timeout() {
        return this._timeout;
    }
    setDefaultAuthentication(auth) {
        this.authentications.default = auth;
    }
    setApiKey(key, value) {
        this.authentications[MaterialPayItemJoinApiApiKeys[key]].apiKey = value;
    }
    /**
     * Meadow DELETE
     * @param id ID of record
     */
    _delete(id) {
        const localVarPath = this.basePath + '/MaterialPayItemJoin/{id}'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling _delete.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'DELETE',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "boolean");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in _delete!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow COUNT
     */
    count() {
        const localVarPath = this.basePath + '/MaterialPayItemJoins/Count';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "InlineResponse200");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in count!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow COUNT with filter
     * @param filter FBV meadow filter
     */
    countFiltered(filter) {
        const localVarPath = this.basePath + '/MaterialPayItemJoins/FilteredTo/{filter}/Count'
            .replace('{' + 'filter' + '}', encodeURIComponent(String(filter)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'filter' is not null or undefined
        if (filter === null || filter === undefined) {
            throw new Error('Required parameter filter was null or undefined when calling countFiltered.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "InlineResponse200");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in countFiltered!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow POST (Create)
     * @param body
     */
    create(body) {
        const localVarPath = this.basePath + '/MaterialPayItemJoin';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling create.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'POST',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "MaterialPayItemJoin")
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "MaterialPayItemJoin");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in create!`);
                    }
                }
            });
        }));
    }
    /**
     *
     * @param body
     */
    postReadCountQuery(body) {
        const localVarPath = this.basePath + '/MaterialPayItemJoin/query/count';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling postReadCountQuery.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'POST',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "QueryRequest")
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "InlineResponse200");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in postReadCountQuery!`);
                    }
                }
            });
        }));
    }
    /**
     *
     * @param body
     */
    postReadQuery(body) {
        const localVarPath = this.basePath + '/MaterialPayItemJoin/query/read';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling postReadQuery.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'POST',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "QueryRequest")
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "Array<MaterialPayItemJoin>");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in postReadQuery!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow READ
     * @param id ID of record
     */
    read(id) {
        const localVarPath = this.basePath + '/MaterialPayItemJoin/{id}'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling read.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "MaterialPayItemJoin");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in read!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow READ list
     * @param begin Beginning (skip) number of records (to page)
     * @param max Maximum number of records to return
     */
    reads(begin, max) {
        const localVarPath = this.basePath + '/MaterialPayItemJoins/{begin}/{max}'
            .replace('{' + 'begin' + '}', encodeURIComponent(String(begin)))
            .replace('{' + 'max' + '}', encodeURIComponent(String(max)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'begin' is not null or undefined
        if (begin === null || begin === undefined) {
            throw new Error('Required parameter begin was null or undefined when calling reads.');
        }
        // verify required parameter 'max' is not null or undefined
        if (max === null || max === undefined) {
            throw new Error('Required parameter max was null or undefined when calling reads.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "Array<MaterialPayItemJoin>");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in reads!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow READ filtered list
     * @param filter FBV meadow filter
     * @param begin Beginning (skip) number of records (to page)
     * @param max Maximum number of records to return
     */
    readsFiltered(filter, begin, max) {
        const localVarPath = this.basePath + '/MaterialPayItemJoins/FilteredTo/{filter}/{begin}/{max}'
            .replace('{' + 'filter' + '}', encodeURIComponent(String(filter)))
            .replace('{' + 'begin' + '}', encodeURIComponent(String(begin)))
            .replace('{' + 'max' + '}', encodeURIComponent(String(max)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'filter' is not null or undefined
        if (filter === null || filter === undefined) {
            throw new Error('Required parameter filter was null or undefined when calling readsFiltered.');
        }
        // verify required parameter 'begin' is not null or undefined
        if (begin === null || begin === undefined) {
            throw new Error('Required parameter begin was null or undefined when calling readsFiltered.');
        }
        // verify required parameter 'max' is not null or undefined
        if (max === null || max === undefined) {
            throw new Error('Required parameter max was null or undefined when calling readsFiltered.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "Array<MaterialPayItemJoin>");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in readsFiltered!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow PUT (Update)
     * @param body
     */
    update(body) {
        const localVarPath = this.basePath + '/MaterialPayItemJoin';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling update.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'PUT',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "MaterialPayItemJoin")
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "MaterialPayItemJoin");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in update!`);
                    }
                }
            });
        }));
    }
    getLastResponse() {
        let response = this._lastResponse;
        this._lastResponse = null;
        return response;
    }
}
exports.MaterialPayItemJoinApi = MaterialPayItemJoinApi;
var MaterialRecordOfMaterialEntryJoinApiApiKeys;
(function (MaterialRecordOfMaterialEntryJoinApiApiKeys) {
})(MaterialRecordOfMaterialEntryJoinApiApiKeys = exports.MaterialRecordOfMaterialEntryJoinApiApiKeys || (exports.MaterialRecordOfMaterialEntryJoinApiApiKeys = {}));
class MaterialRecordOfMaterialEntryJoinApi {
    constructor(basePathOrUsername, password, basePath) {
        this._basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this._lastResponse = null;
        this._timeout = DEFAULT_TIMEOUT;
        this.authentications = {
            'default': new VoidAuth(),
        };
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    set useQuerystring(value) {
        this._useQuerystring = value;
    }
    set basePath(basePath) {
        this._basePath = basePath;
    }
    get basePath() {
        return this._basePath;
    }
    set timeout(pTimeout) {
        this._timeout = pTimeout;
    }
    get timeout() {
        return this._timeout;
    }
    setDefaultAuthentication(auth) {
        this.authentications.default = auth;
    }
    setApiKey(key, value) {
        this.authentications[MaterialRecordOfMaterialEntryJoinApiApiKeys[key]].apiKey = value;
    }
    /**
     * Meadow DELETE
     * @param id ID of record
     */
    _delete(id) {
        const localVarPath = this.basePath + '/MaterialRecordOfMaterialEntryJoin/{id}'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling _delete.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'DELETE',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "boolean");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in _delete!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow COUNT
     */
    count() {
        const localVarPath = this.basePath + '/MaterialRecordOfMaterialEntryJoins/Count';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "InlineResponse200");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in count!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow COUNT with filter
     * @param filter FBV meadow filter
     */
    countFiltered(filter) {
        const localVarPath = this.basePath + '/MaterialRecordOfMaterialEntryJoins/FilteredTo/{filter}/Count'
            .replace('{' + 'filter' + '}', encodeURIComponent(String(filter)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'filter' is not null or undefined
        if (filter === null || filter === undefined) {
            throw new Error('Required parameter filter was null or undefined when calling countFiltered.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "InlineResponse200");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in countFiltered!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow POST (Create)
     * @param body
     */
    create(body) {
        const localVarPath = this.basePath + '/MaterialRecordOfMaterialEntryJoin';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling create.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'POST',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "MaterialRecordOfMaterialEntryJoin")
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "MaterialRecordOfMaterialEntryJoin");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in create!`);
                    }
                }
            });
        }));
    }
    /**
     *
     * @param body
     */
    postReadCountQuery(body) {
        const localVarPath = this.basePath + '/MaterialRecordOfMaterialEntryJoin/query/count';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling postReadCountQuery.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'POST',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "QueryRequest")
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "InlineResponse200");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in postReadCountQuery!`);
                    }
                }
            });
        }));
    }
    /**
     *
     * @param body
     */
    postReadQuery(body) {
        const localVarPath = this.basePath + '/MaterialRecordOfMaterialEntryJoin/query/read';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling postReadQuery.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'POST',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "QueryRequest")
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "Array<MaterialRecordOfMaterialEntryJoin>");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in postReadQuery!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow READ
     * @param id ID of record
     */
    read(id) {
        const localVarPath = this.basePath + '/MaterialRecordOfMaterialEntryJoin/{id}'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling read.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "MaterialRecordOfMaterialEntryJoin");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in read!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow READ list
     * @param begin Beginning (skip) number of records (to page)
     * @param max Maximum number of records to return
     */
    reads(begin, max) {
        const localVarPath = this.basePath + '/MaterialRecordOfMaterialEntryJoins/{begin}/{max}'
            .replace('{' + 'begin' + '}', encodeURIComponent(String(begin)))
            .replace('{' + 'max' + '}', encodeURIComponent(String(max)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'begin' is not null or undefined
        if (begin === null || begin === undefined) {
            throw new Error('Required parameter begin was null or undefined when calling reads.');
        }
        // verify required parameter 'max' is not null or undefined
        if (max === null || max === undefined) {
            throw new Error('Required parameter max was null or undefined when calling reads.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "Array<MaterialRecordOfMaterialEntryJoin>");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in reads!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow READ filtered list
     * @param filter FBV meadow filter
     * @param begin Beginning (skip) number of records (to page)
     * @param max Maximum number of records to return
     */
    readsFiltered(filter, begin, max) {
        const localVarPath = this.basePath + '/MaterialRecordOfMaterialEntryJoins/FilteredTo/{filter}/{begin}/{max}'
            .replace('{' + 'filter' + '}', encodeURIComponent(String(filter)))
            .replace('{' + 'begin' + '}', encodeURIComponent(String(begin)))
            .replace('{' + 'max' + '}', encodeURIComponent(String(max)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'filter' is not null or undefined
        if (filter === null || filter === undefined) {
            throw new Error('Required parameter filter was null or undefined when calling readsFiltered.');
        }
        // verify required parameter 'begin' is not null or undefined
        if (begin === null || begin === undefined) {
            throw new Error('Required parameter begin was null or undefined when calling readsFiltered.');
        }
        // verify required parameter 'max' is not null or undefined
        if (max === null || max === undefined) {
            throw new Error('Required parameter max was null or undefined when calling readsFiltered.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "Array<MaterialRecordOfMaterialEntryJoin>");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in readsFiltered!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow PUT (Update)
     * @param body
     */
    update(body) {
        const localVarPath = this.basePath + '/MaterialRecordOfMaterialEntryJoin';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling update.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'PUT',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "MaterialRecordOfMaterialEntryJoin")
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "MaterialRecordOfMaterialEntryJoin");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in update!`);
                    }
                }
            });
        }));
    }
    getLastResponse() {
        let response = this._lastResponse;
        this._lastResponse = null;
        return response;
    }
}
exports.MaterialRecordOfMaterialEntryJoinApi = MaterialRecordOfMaterialEntryJoinApi;
var MixSpecificationApiApiKeys;
(function (MixSpecificationApiApiKeys) {
})(MixSpecificationApiApiKeys = exports.MixSpecificationApiApiKeys || (exports.MixSpecificationApiApiKeys = {}));
class MixSpecificationApi {
    constructor(basePathOrUsername, password, basePath) {
        this._basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this._lastResponse = null;
        this._timeout = DEFAULT_TIMEOUT;
        this.authentications = {
            'default': new VoidAuth(),
        };
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    set useQuerystring(value) {
        this._useQuerystring = value;
    }
    set basePath(basePath) {
        this._basePath = basePath;
    }
    get basePath() {
        return this._basePath;
    }
    set timeout(pTimeout) {
        this._timeout = pTimeout;
    }
    get timeout() {
        return this._timeout;
    }
    setDefaultAuthentication(auth) {
        this.authentications.default = auth;
    }
    setApiKey(key, value) {
        this.authentications[MixSpecificationApiApiKeys[key]].apiKey = value;
    }
    /**
     * Meadow DELETE
     * @param id ID of record
     */
    _delete(id) {
        const localVarPath = this.basePath + '/MixSpecification/{id}'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling _delete.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'DELETE',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "boolean");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in _delete!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow COUNT
     */
    count() {
        const localVarPath = this.basePath + '/MixSpecifications/Count';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "InlineResponse200");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in count!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow COUNT with filter
     * @param filter FBV meadow filter
     */
    countFiltered(filter) {
        const localVarPath = this.basePath + '/MixSpecifications/FilteredTo/{filter}/Count'
            .replace('{' + 'filter' + '}', encodeURIComponent(String(filter)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'filter' is not null or undefined
        if (filter === null || filter === undefined) {
            throw new Error('Required parameter filter was null or undefined when calling countFiltered.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "InlineResponse200");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in countFiltered!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow POST (Create)
     * @param body
     */
    create(body) {
        const localVarPath = this.basePath + '/MixSpecification';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling create.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'POST',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "MixSpecification")
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "MixSpecification");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in create!`);
                    }
                }
            });
        }));
    }
    /**
     *
     * @param body
     */
    postReadCountQuery(body) {
        const localVarPath = this.basePath + '/MixSpecification/query/count';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling postReadCountQuery.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'POST',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "QueryRequest")
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "InlineResponse200");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in postReadCountQuery!`);
                    }
                }
            });
        }));
    }
    /**
     *
     * @param body
     */
    postReadQuery(body) {
        const localVarPath = this.basePath + '/MixSpecification/query/read';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling postReadQuery.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'POST',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "QueryRequest")
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "Array<MixSpecification>");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in postReadQuery!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow READ
     * @param id ID of record
     */
    read(id) {
        const localVarPath = this.basePath + '/MixSpecification/{id}'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling read.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "MixSpecification");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in read!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow READ list
     * @param begin Beginning (skip) number of records (to page)
     * @param max Maximum number of records to return
     */
    reads(begin, max) {
        const localVarPath = this.basePath + '/MixSpecifications/{begin}/{max}'
            .replace('{' + 'begin' + '}', encodeURIComponent(String(begin)))
            .replace('{' + 'max' + '}', encodeURIComponent(String(max)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'begin' is not null or undefined
        if (begin === null || begin === undefined) {
            throw new Error('Required parameter begin was null or undefined when calling reads.');
        }
        // verify required parameter 'max' is not null or undefined
        if (max === null || max === undefined) {
            throw new Error('Required parameter max was null or undefined when calling reads.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "Array<MixSpecification>");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in reads!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow READ filtered list
     * @param filter FBV meadow filter
     * @param begin Beginning (skip) number of records (to page)
     * @param max Maximum number of records to return
     */
    readsFiltered(filter, begin, max) {
        const localVarPath = this.basePath + '/MixSpecifications/FilteredTo/{filter}/{begin}/{max}'
            .replace('{' + 'filter' + '}', encodeURIComponent(String(filter)))
            .replace('{' + 'begin' + '}', encodeURIComponent(String(begin)))
            .replace('{' + 'max' + '}', encodeURIComponent(String(max)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'filter' is not null or undefined
        if (filter === null || filter === undefined) {
            throw new Error('Required parameter filter was null or undefined when calling readsFiltered.');
        }
        // verify required parameter 'begin' is not null or undefined
        if (begin === null || begin === undefined) {
            throw new Error('Required parameter begin was null or undefined when calling readsFiltered.');
        }
        // verify required parameter 'max' is not null or undefined
        if (max === null || max === undefined) {
            throw new Error('Required parameter max was null or undefined when calling readsFiltered.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "Array<MixSpecification>");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in readsFiltered!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow PUT (Update)
     * @param body
     */
    update(body) {
        const localVarPath = this.basePath + '/MixSpecification';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling update.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'PUT',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "MixSpecification")
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "MixSpecification");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in update!`);
                    }
                }
            });
        }));
    }
    getLastResponse() {
        let response = this._lastResponse;
        this._lastResponse = null;
        return response;
    }
}
exports.MixSpecificationApi = MixSpecificationApi;
var MixSpecificationMaterialJoinApiApiKeys;
(function (MixSpecificationMaterialJoinApiApiKeys) {
})(MixSpecificationMaterialJoinApiApiKeys = exports.MixSpecificationMaterialJoinApiApiKeys || (exports.MixSpecificationMaterialJoinApiApiKeys = {}));
class MixSpecificationMaterialJoinApi {
    constructor(basePathOrUsername, password, basePath) {
        this._basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this._lastResponse = null;
        this._timeout = DEFAULT_TIMEOUT;
        this.authentications = {
            'default': new VoidAuth(),
        };
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    set useQuerystring(value) {
        this._useQuerystring = value;
    }
    set basePath(basePath) {
        this._basePath = basePath;
    }
    get basePath() {
        return this._basePath;
    }
    set timeout(pTimeout) {
        this._timeout = pTimeout;
    }
    get timeout() {
        return this._timeout;
    }
    setDefaultAuthentication(auth) {
        this.authentications.default = auth;
    }
    setApiKey(key, value) {
        this.authentications[MixSpecificationMaterialJoinApiApiKeys[key]].apiKey = value;
    }
    /**
     * Meadow DELETE
     * @param id ID of record
     */
    _delete(id) {
        const localVarPath = this.basePath + '/MixSpecificationMaterialJoin/{id}'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling _delete.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'DELETE',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "boolean");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in _delete!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow COUNT
     */
    count() {
        const localVarPath = this.basePath + '/MixSpecificationMaterialJoins/Count';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "InlineResponse200");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in count!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow COUNT with filter
     * @param filter FBV meadow filter
     */
    countFiltered(filter) {
        const localVarPath = this.basePath + '/MixSpecificationMaterialJoins/FilteredTo/{filter}/Count'
            .replace('{' + 'filter' + '}', encodeURIComponent(String(filter)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'filter' is not null or undefined
        if (filter === null || filter === undefined) {
            throw new Error('Required parameter filter was null or undefined when calling countFiltered.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "InlineResponse200");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in countFiltered!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow POST (Create)
     * @param body
     */
    create(body) {
        const localVarPath = this.basePath + '/MixSpecificationMaterialJoin';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling create.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'POST',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "MixSpecificationMaterialJoin")
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "MixSpecificationMaterialJoin");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in create!`);
                    }
                }
            });
        }));
    }
    /**
     *
     * @param body
     */
    postReadCountQuery(body) {
        const localVarPath = this.basePath + '/MixSpecificationMaterialJoin/query/count';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling postReadCountQuery.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'POST',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "QueryRequest")
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "InlineResponse200");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in postReadCountQuery!`);
                    }
                }
            });
        }));
    }
    /**
     *
     * @param body
     */
    postReadQuery(body) {
        const localVarPath = this.basePath + '/MixSpecificationMaterialJoin/query/read';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling postReadQuery.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'POST',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "QueryRequest")
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "Array<MixSpecificationMaterialJoin>");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in postReadQuery!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow READ
     * @param id ID of record
     */
    read(id) {
        const localVarPath = this.basePath + '/MixSpecificationMaterialJoin/{id}'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling read.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "MixSpecificationMaterialJoin");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in read!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow READ list
     * @param begin Beginning (skip) number of records (to page)
     * @param max Maximum number of records to return
     */
    reads(begin, max) {
        const localVarPath = this.basePath + '/MixSpecificationMaterialJoins/{begin}/{max}'
            .replace('{' + 'begin' + '}', encodeURIComponent(String(begin)))
            .replace('{' + 'max' + '}', encodeURIComponent(String(max)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'begin' is not null or undefined
        if (begin === null || begin === undefined) {
            throw new Error('Required parameter begin was null or undefined when calling reads.');
        }
        // verify required parameter 'max' is not null or undefined
        if (max === null || max === undefined) {
            throw new Error('Required parameter max was null or undefined when calling reads.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "Array<MixSpecificationMaterialJoin>");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in reads!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow READ filtered list
     * @param filter FBV meadow filter
     * @param begin Beginning (skip) number of records (to page)
     * @param max Maximum number of records to return
     */
    readsFiltered(filter, begin, max) {
        const localVarPath = this.basePath + '/MixSpecificationMaterialJoins/FilteredTo/{filter}/{begin}/{max}'
            .replace('{' + 'filter' + '}', encodeURIComponent(String(filter)))
            .replace('{' + 'begin' + '}', encodeURIComponent(String(begin)))
            .replace('{' + 'max' + '}', encodeURIComponent(String(max)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'filter' is not null or undefined
        if (filter === null || filter === undefined) {
            throw new Error('Required parameter filter was null or undefined when calling readsFiltered.');
        }
        // verify required parameter 'begin' is not null or undefined
        if (begin === null || begin === undefined) {
            throw new Error('Required parameter begin was null or undefined when calling readsFiltered.');
        }
        // verify required parameter 'max' is not null or undefined
        if (max === null || max === undefined) {
            throw new Error('Required parameter max was null or undefined when calling readsFiltered.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "Array<MixSpecificationMaterialJoin>");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in readsFiltered!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow PUT (Update)
     * @param body
     */
    update(body) {
        const localVarPath = this.basePath + '/MixSpecificationMaterialJoin';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling update.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'PUT',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "MixSpecificationMaterialJoin")
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "MixSpecificationMaterialJoin");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in update!`);
                    }
                }
            });
        }));
    }
    getLastResponse() {
        let response = this._lastResponse;
        this._lastResponse = null;
        return response;
    }
}
exports.MixSpecificationMaterialJoinApi = MixSpecificationMaterialJoinApi;
var ModuleApiApiKeys;
(function (ModuleApiApiKeys) {
})(ModuleApiApiKeys = exports.ModuleApiApiKeys || (exports.ModuleApiApiKeys = {}));
class ModuleApi {
    constructor(basePathOrUsername, password, basePath) {
        this._basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this._lastResponse = null;
        this._timeout = DEFAULT_TIMEOUT;
        this.authentications = {
            'default': new VoidAuth(),
        };
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    set useQuerystring(value) {
        this._useQuerystring = value;
    }
    set basePath(basePath) {
        this._basePath = basePath;
    }
    get basePath() {
        return this._basePath;
    }
    set timeout(pTimeout) {
        this._timeout = pTimeout;
    }
    get timeout() {
        return this._timeout;
    }
    setDefaultAuthentication(auth) {
        this.authentications.default = auth;
    }
    setApiKey(key, value) {
        this.authentications[ModuleApiApiKeys[key]].apiKey = value;
    }
    /**
     * Meadow DELETE
     * @param id ID of record
     */
    _delete(id) {
        const localVarPath = this.basePath + '/Module/{id}'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling _delete.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'DELETE',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "boolean");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in _delete!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow COUNT
     */
    count() {
        const localVarPath = this.basePath + '/Modules/Count';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "InlineResponse200");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in count!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow COUNT with filter
     * @param filter FBV meadow filter
     */
    countFiltered(filter) {
        const localVarPath = this.basePath + '/Modules/FilteredTo/{filter}/Count'
            .replace('{' + 'filter' + '}', encodeURIComponent(String(filter)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'filter' is not null or undefined
        if (filter === null || filter === undefined) {
            throw new Error('Required parameter filter was null or undefined when calling countFiltered.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "InlineResponse200");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in countFiltered!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow POST (Create)
     * @param body
     */
    create(body) {
        const localVarPath = this.basePath + '/Module';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling create.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'POST',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "ModuleModel")
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "ModuleModel");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in create!`);
                    }
                }
            });
        }));
    }
    /**
     *
     * @param body
     */
    postReadCountQuery(body) {
        const localVarPath = this.basePath + '/Module/query/count';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling postReadCountQuery.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'POST',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "QueryRequest")
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "InlineResponse200");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in postReadCountQuery!`);
                    }
                }
            });
        }));
    }
    /**
     *
     * @param body
     */
    postReadQuery(body) {
        const localVarPath = this.basePath + '/Module/query/read';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling postReadQuery.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'POST',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "QueryRequest")
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "Array<ModuleModel>");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in postReadQuery!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow READ
     * @param id ID of record
     */
    read(id) {
        const localVarPath = this.basePath + '/Module/{id}'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling read.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "ModuleModel");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in read!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow READ list
     * @param begin Beginning (skip) number of records (to page)
     * @param max Maximum number of records to return
     */
    reads(begin, max) {
        const localVarPath = this.basePath + '/Modules/{begin}/{max}'
            .replace('{' + 'begin' + '}', encodeURIComponent(String(begin)))
            .replace('{' + 'max' + '}', encodeURIComponent(String(max)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'begin' is not null or undefined
        if (begin === null || begin === undefined) {
            throw new Error('Required parameter begin was null or undefined when calling reads.');
        }
        // verify required parameter 'max' is not null or undefined
        if (max === null || max === undefined) {
            throw new Error('Required parameter max was null or undefined when calling reads.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "Array<ModuleModel>");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in reads!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow READ filtered list
     * @param filter FBV meadow filter
     * @param begin Beginning (skip) number of records (to page)
     * @param max Maximum number of records to return
     */
    readsFiltered(filter, begin, max) {
        const localVarPath = this.basePath + '/Modules/FilteredTo/{filter}/{begin}/{max}'
            .replace('{' + 'filter' + '}', encodeURIComponent(String(filter)))
            .replace('{' + 'begin' + '}', encodeURIComponent(String(begin)))
            .replace('{' + 'max' + '}', encodeURIComponent(String(max)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'filter' is not null or undefined
        if (filter === null || filter === undefined) {
            throw new Error('Required parameter filter was null or undefined when calling readsFiltered.');
        }
        // verify required parameter 'begin' is not null or undefined
        if (begin === null || begin === undefined) {
            throw new Error('Required parameter begin was null or undefined when calling readsFiltered.');
        }
        // verify required parameter 'max' is not null or undefined
        if (max === null || max === undefined) {
            throw new Error('Required parameter max was null or undefined when calling readsFiltered.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "Array<ModuleModel>");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in readsFiltered!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow PUT (Update)
     * @param body
     */
    update(body) {
        const localVarPath = this.basePath + '/Module';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling update.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'PUT',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "ModuleModel")
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "ModuleModel");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in update!`);
                    }
                }
            });
        }));
    }
    getLastResponse() {
        let response = this._lastResponse;
        this._lastResponse = null;
        return response;
    }
}
exports.ModuleApi = ModuleApi;
var NotificationApiApiKeys;
(function (NotificationApiApiKeys) {
})(NotificationApiApiKeys = exports.NotificationApiApiKeys || (exports.NotificationApiApiKeys = {}));
class NotificationApi {
    constructor(basePathOrUsername, password, basePath) {
        this._basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this._lastResponse = null;
        this._timeout = DEFAULT_TIMEOUT;
        this.authentications = {
            'default': new VoidAuth(),
        };
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    set useQuerystring(value) {
        this._useQuerystring = value;
    }
    set basePath(basePath) {
        this._basePath = basePath;
    }
    get basePath() {
        return this._basePath;
    }
    set timeout(pTimeout) {
        this._timeout = pTimeout;
    }
    get timeout() {
        return this._timeout;
    }
    setDefaultAuthentication(auth) {
        this.authentications.default = auth;
    }
    setApiKey(key, value) {
        this.authentications[NotificationApiApiKeys[key]].apiKey = value;
    }
    /**
     * Meadow DELETE
     * @param id ID of record
     */
    _delete(id) {
        const localVarPath = this.basePath + '/Notification/{id}'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling _delete.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'DELETE',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "boolean");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in _delete!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow COUNT
     */
    count() {
        const localVarPath = this.basePath + '/Notifications/Count';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "InlineResponse200");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in count!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow COUNT with filter
     * @param filter FBV meadow filter
     */
    countFiltered(filter) {
        const localVarPath = this.basePath + '/Notifications/FilteredTo/{filter}/Count'
            .replace('{' + 'filter' + '}', encodeURIComponent(String(filter)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'filter' is not null or undefined
        if (filter === null || filter === undefined) {
            throw new Error('Required parameter filter was null or undefined when calling countFiltered.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "InlineResponse200");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in countFiltered!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow POST (Create)
     * @param body
     */
    create(body) {
        const localVarPath = this.basePath + '/Notification';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling create.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'POST',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "Notification")
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "Notification");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in create!`);
                    }
                }
            });
        }));
    }
    /**
     *
     * @param body
     */
    postReadCountQuery(body) {
        const localVarPath = this.basePath + '/Notification/query/count';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling postReadCountQuery.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'POST',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "QueryRequest")
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "InlineResponse200");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in postReadCountQuery!`);
                    }
                }
            });
        }));
    }
    /**
     *
     * @param body
     */
    postReadQuery(body) {
        const localVarPath = this.basePath + '/Notification/query/read';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling postReadQuery.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'POST',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "QueryRequest")
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "Array<Notification>");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in postReadQuery!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow READ
     * @param id ID of record
     */
    read(id) {
        const localVarPath = this.basePath + '/Notification/{id}'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling read.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "Notification");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in read!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow READ list
     * @param begin Beginning (skip) number of records (to page)
     * @param max Maximum number of records to return
     */
    reads(begin, max) {
        const localVarPath = this.basePath + '/Notifications/{begin}/{max}'
            .replace('{' + 'begin' + '}', encodeURIComponent(String(begin)))
            .replace('{' + 'max' + '}', encodeURIComponent(String(max)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'begin' is not null or undefined
        if (begin === null || begin === undefined) {
            throw new Error('Required parameter begin was null or undefined when calling reads.');
        }
        // verify required parameter 'max' is not null or undefined
        if (max === null || max === undefined) {
            throw new Error('Required parameter max was null or undefined when calling reads.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "Array<Notification>");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in reads!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow READ filtered list
     * @param filter FBV meadow filter
     * @param begin Beginning (skip) number of records (to page)
     * @param max Maximum number of records to return
     */
    readsFiltered(filter, begin, max) {
        const localVarPath = this.basePath + '/Notifications/FilteredTo/{filter}/{begin}/{max}'
            .replace('{' + 'filter' + '}', encodeURIComponent(String(filter)))
            .replace('{' + 'begin' + '}', encodeURIComponent(String(begin)))
            .replace('{' + 'max' + '}', encodeURIComponent(String(max)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'filter' is not null or undefined
        if (filter === null || filter === undefined) {
            throw new Error('Required parameter filter was null or undefined when calling readsFiltered.');
        }
        // verify required parameter 'begin' is not null or undefined
        if (begin === null || begin === undefined) {
            throw new Error('Required parameter begin was null or undefined when calling readsFiltered.');
        }
        // verify required parameter 'max' is not null or undefined
        if (max === null || max === undefined) {
            throw new Error('Required parameter max was null or undefined when calling readsFiltered.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "Array<Notification>");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in readsFiltered!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow PUT (Update)
     * @param body
     */
    update(body) {
        const localVarPath = this.basePath + '/Notification';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling update.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'PUT',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "Notification")
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "Notification");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in update!`);
                    }
                }
            });
        }));
    }
    getLastResponse() {
        let response = this._lastResponse;
        this._lastResponse = null;
        return response;
    }
}
exports.NotificationApi = NotificationApi;
var ObservationApiApiKeys;
(function (ObservationApiApiKeys) {
})(ObservationApiApiKeys = exports.ObservationApiApiKeys || (exports.ObservationApiApiKeys = {}));
class ObservationApi {
    constructor(basePathOrUsername, password, basePath) {
        this._basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this._lastResponse = null;
        this._timeout = DEFAULT_TIMEOUT;
        this.authentications = {
            'default': new VoidAuth(),
        };
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    set useQuerystring(value) {
        this._useQuerystring = value;
    }
    set basePath(basePath) {
        this._basePath = basePath;
    }
    get basePath() {
        return this._basePath;
    }
    set timeout(pTimeout) {
        this._timeout = pTimeout;
    }
    get timeout() {
        return this._timeout;
    }
    setDefaultAuthentication(auth) {
        this.authentications.default = auth;
    }
    setApiKey(key, value) {
        this.authentications[ObservationApiApiKeys[key]].apiKey = value;
    }
    /**
     * Meadow DELETE
     * @param id ID of record
     */
    _delete(id) {
        const localVarPath = this.basePath + '/Observation/{id}'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling _delete.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'DELETE',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "boolean");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in _delete!`);
                    }
                }
            });
        }));
    }
    /**
     * Index all Observations for a single day (solr)
     * @param SynchronizeByDay
     */
    beginIndexByDay(SynchronizeByDay) {
        const localVarPath = this.basePath + '/ObservationSearchSyncByDay/{SynchronizeByDay}'
            .replace('{' + 'SynchronizeByDay' + '}', encodeURIComponent(String(SynchronizeByDay)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'SynchronizeByDay' is not null or undefined
        if (SynchronizeByDay === null || SynchronizeByDay === undefined) {
            throw new Error('Required parameter SynchronizeByDay was null or undefined when calling beginIndexByDay.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in beginIndexByDay!`);
                    }
                }
            });
        }));
    }
    /**
     * Index all Observations for a single project (solr)
     * @param IDProject ID of record
     */
    beginIndexByProject(IDProject) {
        const localVarPath = this.basePath + '/ObservationSearchSyncByProject/{IDProject}'
            .replace('{' + 'IDProject' + '}', encodeURIComponent(String(IDProject)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'IDProject' is not null or undefined
        if (IDProject === null || IDProject === undefined) {
            throw new Error('Required parameter IDProject was null or undefined when calling beginIndexByProject.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in beginIndexByProject!`);
                    }
                }
            });
        }));
    }
    /**
     * Delete and rebuild entire Observation search index (solr)
     */
    beginObservationSearchRebuild() {
        const localVarPath = this.basePath + '/ObservationSearchRebuild';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in beginObservationSearchRebuild!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow COUNT
     */
    count() {
        const localVarPath = this.basePath + '/Observations/Count';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "InlineResponse200");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in count!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow COUNT with filter
     * @param filter FBV meadow filter
     */
    countFiltered(filter) {
        const localVarPath = this.basePath + '/Observations/FilteredTo/{filter}/Count'
            .replace('{' + 'filter' + '}', encodeURIComponent(String(filter)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'filter' is not null or undefined
        if (filter === null || filter === undefined) {
            throw new Error('Required parameter filter was null or undefined when calling countFiltered.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "InlineResponse200");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in countFiltered!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow POST (Create)
     * @param body
     */
    create(body) {
        const localVarPath = this.basePath + '/Observation';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling create.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'POST',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "ObservationModel")
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "ObservationModel");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in create!`);
                    }
                }
            });
        }));
    }
    /**
     *
     * @param IDProject ID of record
     * @param SpritePageNumber
     */
    downloadObservationCollectionImage(IDProject, SpritePageNumber) {
        const localVarPath = this.basePath + '/Observation/Project/{IDProject}/Sprites/{SpritePageNumber}'
            .replace('{' + 'IDProject' + '}', encodeURIComponent(String(IDProject)))
            .replace('{' + 'SpritePageNumber' + '}', encodeURIComponent(String(SpritePageNumber)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'IDProject' is not null or undefined
        if (IDProject === null || IDProject === undefined) {
            throw new Error('Required parameter IDProject was null or undefined when calling downloadObservationCollectionImage.');
        }
        // verify required parameter 'SpritePageNumber' is not null or undefined
        if (SpritePageNumber === null || SpritePageNumber === undefined) {
            throw new Error('Required parameter SpritePageNumber was null or undefined when calling downloadObservationCollectionImage.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            encoding: null,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "Buffer");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in downloadObservationCollectionImage!`);
                    }
                }
            });
        }));
    }
    /**
     * Download Observation Image - Get transcoded media file for an observation. If not found, asks transcoder to regenerate it
     * @param IDObservation ID of record
     * @param Size e.g. Thumbnail,Standard,Preview,Enhanced
     */
    downloadObservationImage(IDObservation, Size) {
        const localVarPath = this.basePath + '/Observation/{IDObservation}/Image/{Size}'
            .replace('{' + 'IDObservation' + '}', encodeURIComponent(String(IDObservation)))
            .replace('{' + 'Size' + '}', encodeURIComponent(String(Size)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'IDObservation' is not null or undefined
        if (IDObservation === null || IDObservation === undefined) {
            throw new Error('Required parameter IDObservation was null or undefined when calling downloadObservationImage.');
        }
        // verify required parameter 'Size' is not null or undefined
        if (Size === null || Size === undefined) {
            throw new Error('Required parameter Size was null or undefined when calling downloadObservationImage.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            encoding: null,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "Buffer");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in downloadObservationImage!`);
                    }
                }
            });
        }));
    }
    /**
     * Get Observation Image Hash - Get time on observation media item from mongo.
     * @param Size e.g. Thumbnail,Standard,Preview,Enhanced
     * @param Version
     */
    getObservationImageHash(Size, Version) {
        const localVarPath = this.basePath + '/Observation/ImageHash/{Size}/V/{Version}'
            .replace('{' + 'Size' + '}', encodeURIComponent(String(Size)))
            .replace('{' + 'Version' + '}', encodeURIComponent(String(Version)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'Size' is not null or undefined
        if (Size === null || Size === undefined) {
            throw new Error('Required parameter Size was null or undefined when calling getObservationImageHash.');
        }
        // verify required parameter 'Version' is not null or undefined
        if (Version === null || Version === undefined) {
            throw new Error('Required parameter Version was null or undefined when calling getObservationImageHash.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in getObservationImageHash!`);
                    }
                }
            });
        }));
    }
    /**
     *
     * @param SynchronizeFromDate
     * @param Begin Beginning (skip) number of records (to page)
     * @param Cap Maximum number of records to return
     */
    getUpdatedObservations(SynchronizeFromDate, Begin, Cap) {
        const localVarPath = this.basePath + '/Observations/Sync/{SynchronizeFromDate}/{Begin}/{Cap}'
            .replace('{' + 'SynchronizeFromDate' + '}', encodeURIComponent(String(SynchronizeFromDate)))
            .replace('{' + 'Begin' + '}', encodeURIComponent(String(Begin)))
            .replace('{' + 'Cap' + '}', encodeURIComponent(String(Cap)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'SynchronizeFromDate' is not null or undefined
        if (SynchronizeFromDate === null || SynchronizeFromDate === undefined) {
            throw new Error('Required parameter SynchronizeFromDate was null or undefined when calling getUpdatedObservations.');
        }
        // verify required parameter 'Begin' is not null or undefined
        if (Begin === null || Begin === undefined) {
            throw new Error('Required parameter Begin was null or undefined when calling getUpdatedObservations.');
        }
        // verify required parameter 'Cap' is not null or undefined
        if (Cap === null || Cap === undefined) {
            throw new Error('Required parameter Cap was null or undefined when calling getUpdatedObservations.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "Array<ObservationModel>");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in getUpdatedObservations!`);
                    }
                }
            });
        }));
    }
    /**
     * postCloneBulkObservations API
     * @param body
     */
    postCloneBulkObservations(body) {
        const localVarPath = this.basePath + '/Observations/Clone';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling postCloneBulkObservations.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'POST',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "ObservationCloneRequest")
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "Array<ObservationModel>");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in postCloneBulkObservations!`);
                    }
                }
            });
        }));
    }
    /**
     * postCloneObservation API
     * @param IDObservation ID of record
     */
    postCloneObservation(IDObservation) {
        const localVarPath = this.basePath + '/Observation/{IDObservation}/Clone'
            .replace('{' + 'IDObservation' + '}', encodeURIComponent(String(IDObservation)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'IDObservation' is not null or undefined
        if (IDObservation === null || IDObservation === undefined) {
            throw new Error('Required parameter IDObservation was null or undefined when calling postCloneObservation.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'POST',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "ObservationModel");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in postCloneObservation!`);
                    }
                }
            });
        }));
    }
    /**
     * Add a tag to a set of Observations (by ID)
     */
    postObservationsBatchTagAdd() {
        const localVarPath = this.basePath + '/ObservationsBatchTag/Add';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'POST',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in postObservationsBatchTagAdd!`);
                    }
                }
            });
        }));
    }
    /**
     * Remove a tag to a set of Observations (by ID)
     */
    postObservationsBatchTagRemove() {
        const localVarPath = this.basePath + '/ObservationsBatchTag/Remove';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'POST',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in postObservationsBatchTagRemove!`);
                    }
                }
            });
        }));
    }
    /**
     *
     * @param body
     */
    postReadCountQuery(body) {
        const localVarPath = this.basePath + '/Observation/query/count';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling postReadCountQuery.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'POST',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "QueryRequest")
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "InlineResponse200");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in postReadCountQuery!`);
                    }
                }
            });
        }));
    }
    /**
     *
     * @param body
     */
    postReadQuery(body) {
        const localVarPath = this.basePath + '/Observation/query/read';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling postReadQuery.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'POST',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "QueryRequest")
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "Array<ObservationModel>");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in postReadQuery!`);
                    }
                }
            });
        }));
    }
    /**
     * Index specific Observations (solr)
     * @param IDObservation ID of record
     */
    pushObservationSearchIndexByIDs(IDObservation) {
        const localVarPath = this.basePath + '/ObservationSearchSyncByID/{IDObservation}'
            .replace('{' + 'IDObservation' + '}', encodeURIComponent(String(IDObservation)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'IDObservation' is not null or undefined
        if (IDObservation === null || IDObservation === undefined) {
            throw new Error('Required parameter IDObservation was null or undefined when calling pushObservationSearchIndexByIDs.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in pushObservationSearchIndexByIDs!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow READ
     * @param id ID of record
     */
    read(id) {
        const localVarPath = this.basePath + '/Observation/{id}'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling read.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "ObservationModel");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in read!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow READ list
     * @param begin Beginning (skip) number of records (to page)
     * @param max Maximum number of records to return
     */
    reads(begin, max) {
        const localVarPath = this.basePath + '/Observations/{begin}/{max}'
            .replace('{' + 'begin' + '}', encodeURIComponent(String(begin)))
            .replace('{' + 'max' + '}', encodeURIComponent(String(max)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'begin' is not null or undefined
        if (begin === null || begin === undefined) {
            throw new Error('Required parameter begin was null or undefined when calling reads.');
        }
        // verify required parameter 'max' is not null or undefined
        if (max === null || max === undefined) {
            throw new Error('Required parameter max was null or undefined when calling reads.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "Array<ObservationModel>");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in reads!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow READ filtered list
     * @param filter FBV meadow filter
     * @param begin Beginning (skip) number of records (to page)
     * @param max Maximum number of records to return
     */
    readsFiltered(filter, begin, max) {
        const localVarPath = this.basePath + '/Observations/FilteredTo/{filter}/{begin}/{max}'
            .replace('{' + 'filter' + '}', encodeURIComponent(String(filter)))
            .replace('{' + 'begin' + '}', encodeURIComponent(String(begin)))
            .replace('{' + 'max' + '}', encodeURIComponent(String(max)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'filter' is not null or undefined
        if (filter === null || filter === undefined) {
            throw new Error('Required parameter filter was null or undefined when calling readsFiltered.');
        }
        // verify required parameter 'begin' is not null or undefined
        if (begin === null || begin === undefined) {
            throw new Error('Required parameter begin was null or undefined when calling readsFiltered.');
        }
        // verify required parameter 'max' is not null or undefined
        if (max === null || max === undefined) {
            throw new Error('Required parameter max was null or undefined when calling readsFiltered.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "Array<ObservationModel>");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in readsFiltered!`);
                    }
                }
            });
        }));
    }
    /**
     * Sync Observations  Process (since this is so complex): 1. FOR EACH OBSERVATION     1.1 Archive the Observation     1.2 Merge in the Changes     1.3 Translate the Observation Details     1.4 PERFORM SYNC MATCH AND UPDATE WHERE NECESSARY (TALK TO TRENT)     1.5 After all Detail records are successfully stored, Update Observation so Observation.definition contains the serialized array of Details 2. Get all observation records for this user that have changed since the sync date
     * @param SynchronizeFromDate
     * @param Begin Beginning (skip) number of records (to page)
     * @param Cap Maximum number of records to return
     */
    syncObservations(SynchronizeFromDate, Begin, Cap) {
        const localVarPath = this.basePath + '/Observations/Sync/{SynchronizeFromDate}/{Begin}/{Cap}'
            .replace('{' + 'SynchronizeFromDate' + '}', encodeURIComponent(String(SynchronizeFromDate)))
            .replace('{' + 'Begin' + '}', encodeURIComponent(String(Begin)))
            .replace('{' + 'Cap' + '}', encodeURIComponent(String(Cap)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'SynchronizeFromDate' is not null or undefined
        if (SynchronizeFromDate === null || SynchronizeFromDate === undefined) {
            throw new Error('Required parameter SynchronizeFromDate was null or undefined when calling syncObservations.');
        }
        // verify required parameter 'Begin' is not null or undefined
        if (Begin === null || Begin === undefined) {
            throw new Error('Required parameter Begin was null or undefined when calling syncObservations.');
        }
        // verify required parameter 'Cap' is not null or undefined
        if (Cap === null || Cap === undefined) {
            throw new Error('Required parameter Cap was null or undefined when calling syncObservations.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'POST',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in syncObservations!`);
                    }
                }
            });
        }));
    }
    /**
     * Touch Observation record UpdateDate and set Transcoded flag - When media files are updated, we want other devices to see the changes and pull it down
     * @param IDObservation ID of record
     */
    transcodeTouchObservation(IDObservation) {
        const localVarPath = this.basePath + '/Observation/{IDObservation}/TranscodeTouch'
            .replace('{' + 'IDObservation' + '}', encodeURIComponent(String(IDObservation)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'IDObservation' is not null or undefined
        if (IDObservation === null || IDObservation === undefined) {
            throw new Error('Required parameter IDObservation was null or undefined when calling transcodeTouchObservation.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in transcodeTouchObservation!`);
                    }
                }
            });
        }));
    }
    /**
     * UNDelete a specific observation
     * @param IDObservation ID of record
     */
    undeleteObservation(IDObservation) {
        const localVarPath = this.basePath + '/Observation/Undelete/{IDObservation}'
            .replace('{' + 'IDObservation' + '}', encodeURIComponent(String(IDObservation)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'IDObservation' is not null or undefined
        if (IDObservation === null || IDObservation === undefined) {
            throw new Error('Required parameter IDObservation was null or undefined when calling undeleteObservation.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in undeleteObservation!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow PUT (Update)
     * @param body
     */
    update(body) {
        const localVarPath = this.basePath + '/Observation';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling update.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'PUT',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "ObservationModel")
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "ObservationModel");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in update!`);
                    }
                }
            });
        }));
    }
    getLastResponse() {
        let response = this._lastResponse;
        this._lastResponse = null;
        return response;
    }
}
exports.ObservationApi = ObservationApi;
var ObservationApprovalApiApiKeys;
(function (ObservationApprovalApiApiKeys) {
})(ObservationApprovalApiApiKeys = exports.ObservationApprovalApiApiKeys || (exports.ObservationApprovalApiApiKeys = {}));
class ObservationApprovalApi {
    constructor(basePathOrUsername, password, basePath) {
        this._basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this._lastResponse = null;
        this._timeout = DEFAULT_TIMEOUT;
        this.authentications = {
            'default': new VoidAuth(),
        };
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    set useQuerystring(value) {
        this._useQuerystring = value;
    }
    set basePath(basePath) {
        this._basePath = basePath;
    }
    get basePath() {
        return this._basePath;
    }
    set timeout(pTimeout) {
        this._timeout = pTimeout;
    }
    get timeout() {
        return this._timeout;
    }
    setDefaultAuthentication(auth) {
        this.authentications.default = auth;
    }
    setApiKey(key, value) {
        this.authentications[ObservationApprovalApiApiKeys[key]].apiKey = value;
    }
    /**
     * Get list of Approvers for Observation
     * @param IDObservation ID of record
     */
    getObservationApproverList(IDObservation) {
        const localVarPath = this.basePath + '/ObservationApproval/{IDObservation}/ApproverList'
            .replace('{' + 'IDObservation' + '}', encodeURIComponent(String(IDObservation)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'IDObservation' is not null or undefined
        if (IDObservation === null || IDObservation === undefined) {
            throw new Error('Required parameter IDObservation was null or undefined when calling getObservationApproverList.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in getObservationApproverList!`);
                    }
                }
            });
        }));
    }
    /**
     * Get current Approval state of Observation, and available actions for respective user as it relates to that state
     * @param IDObservation ID of record
     */
    getObservationState(IDObservation) {
        const localVarPath = this.basePath + '/ObservationApproval/{IDObservation}/State'
            .replace('{' + 'IDObservation' + '}', encodeURIComponent(String(IDObservation)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'IDObservation' is not null or undefined
        if (IDObservation === null || IDObservation === undefined) {
            throw new Error('Required parameter IDObservation was null or undefined when calling getObservationState.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in getObservationState!`);
                    }
                }
            });
        }));
    }
    /**
     * Perform Approval state transition action against Observation
     */
    postChangeObservationtState() {
        const localVarPath = this.basePath + '/ObservationApproval';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'POST',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in postChangeObservationtState!`);
                    }
                }
            });
        }));
    }
    getLastResponse() {
        let response = this._lastResponse;
        this._lastResponse = null;
        return response;
    }
}
exports.ObservationApprovalApi = ObservationApprovalApi;
var ObservationCloneTemplatesApiApiKeys;
(function (ObservationCloneTemplatesApiApiKeys) {
})(ObservationCloneTemplatesApiApiKeys = exports.ObservationCloneTemplatesApiApiKeys || (exports.ObservationCloneTemplatesApiApiKeys = {}));
class ObservationCloneTemplatesApi {
    constructor(basePathOrUsername, password, basePath) {
        this._basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this._lastResponse = null;
        this._timeout = DEFAULT_TIMEOUT;
        this.authentications = {
            'default': new VoidAuth(),
        };
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    set useQuerystring(value) {
        this._useQuerystring = value;
    }
    set basePath(basePath) {
        this._basePath = basePath;
    }
    get basePath() {
        return this._basePath;
    }
    set timeout(pTimeout) {
        this._timeout = pTimeout;
    }
    get timeout() {
        return this._timeout;
    }
    setDefaultAuthentication(auth) {
        this.authentications.default = auth;
    }
    setApiKey(key, value) {
        this.authentications[ObservationCloneTemplatesApiApiKeys[key]].apiKey = value;
    }
    /**
     *
     * @param IDProject ID of record
     */
    getCloneTemplates(IDProject) {
        const localVarPath = this.basePath + '/ObservationCloneTemplates/{IDProject}'
            .replace('{' + 'IDProject' + '}', encodeURIComponent(String(IDProject)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'IDProject' is not null or undefined
        if (IDProject === null || IDProject === undefined) {
            throw new Error('Required parameter IDProject was null or undefined when calling getCloneTemplates.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in getCloneTemplates!`);
                    }
                }
            });
        }));
    }
    getLastResponse() {
        let response = this._lastResponse;
        this._lastResponse = null;
        return response;
    }
}
exports.ObservationCloneTemplatesApi = ObservationCloneTemplatesApi;
var ObservationSearchsApiApiKeys;
(function (ObservationSearchsApiApiKeys) {
})(ObservationSearchsApiApiKeys = exports.ObservationSearchsApiApiKeys || (exports.ObservationSearchsApiApiKeys = {}));
class ObservationSearchsApi {
    constructor(basePathOrUsername, password, basePath) {
        this._basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this._lastResponse = null;
        this._timeout = DEFAULT_TIMEOUT;
        this.authentications = {
            'default': new VoidAuth(),
        };
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    set useQuerystring(value) {
        this._useQuerystring = value;
    }
    set basePath(basePath) {
        this._basePath = basePath;
    }
    get basePath() {
        return this._basePath;
    }
    set timeout(pTimeout) {
        this._timeout = pTimeout;
    }
    get timeout() {
        return this._timeout;
    }
    setDefaultAuthentication(auth) {
        this.authentications.default = auth;
    }
    setApiKey(key, value) {
        this.authentications[ObservationSearchsApiApiKeys[key]].apiKey = value;
    }
    /**
     * Search Observations using search index (solr)
     * @param IDProject ID of record
     * @param Begin Beginning (skip) number of records (to page)
     * @param SearchQuery solr search query
     * @param Cap Maximum number of records to return
     */
    getObservationSearch(IDProject, Begin, SearchQuery, Cap) {
        const localVarPath = this.basePath + '/ObservationSearchs/{IDProject}/{SearchQuery}/{Begin}/{Cap}'
            .replace('{' + 'IDProject' + '}', encodeURIComponent(String(IDProject)))
            .replace('{' + 'Begin' + '}', encodeURIComponent(String(Begin)))
            .replace('{' + 'SearchQuery' + '}', encodeURIComponent(String(SearchQuery)))
            .replace('{' + 'Cap' + '}', encodeURIComponent(String(Cap)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'IDProject' is not null or undefined
        if (IDProject === null || IDProject === undefined) {
            throw new Error('Required parameter IDProject was null or undefined when calling getObservationSearch.');
        }
        // verify required parameter 'Begin' is not null or undefined
        if (Begin === null || Begin === undefined) {
            throw new Error('Required parameter Begin was null or undefined when calling getObservationSearch.');
        }
        // verify required parameter 'SearchQuery' is not null or undefined
        if (SearchQuery === null || SearchQuery === undefined) {
            throw new Error('Required parameter SearchQuery was null or undefined when calling getObservationSearch.');
        }
        // verify required parameter 'Cap' is not null or undefined
        if (Cap === null || Cap === undefined) {
            throw new Error('Required parameter Cap was null or undefined when calling getObservationSearch.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in getObservationSearch!`);
                    }
                }
            });
        }));
    }
    /**
     * Search Observations using search index (solr)
     * @param IDProject ID of record
     * @param SearchQuery solr search query
     */
    getObservationSearchCount(IDProject, SearchQuery) {
        const localVarPath = this.basePath + '/ObservationSearchs/Count/{IDProject}/{SearchQuery}'
            .replace('{' + 'IDProject' + '}', encodeURIComponent(String(IDProject)))
            .replace('{' + 'SearchQuery' + '}', encodeURIComponent(String(SearchQuery)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'IDProject' is not null or undefined
        if (IDProject === null || IDProject === undefined) {
            throw new Error('Required parameter IDProject was null or undefined when calling getObservationSearchCount.');
        }
        // verify required parameter 'SearchQuery' is not null or undefined
        if (SearchQuery === null || SearchQuery === undefined) {
            throw new Error('Required parameter SearchQuery was null or undefined when calling getObservationSearchCount.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in getObservationSearchCount!`);
                    }
                }
            });
        }));
    }
    getLastResponse() {
        let response = this._lastResponse;
        this._lastResponse = null;
        return response;
    }
}
exports.ObservationSearchsApi = ObservationSearchsApi;
var ObservationSendToApiApiKeys;
(function (ObservationSendToApiApiKeys) {
})(ObservationSendToApiApiKeys = exports.ObservationSendToApiApiKeys || (exports.ObservationSendToApiApiKeys = {}));
class ObservationSendToApi {
    constructor(basePathOrUsername, password, basePath) {
        this._basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this._lastResponse = null;
        this._timeout = DEFAULT_TIMEOUT;
        this.authentications = {
            'default': new VoidAuth(),
        };
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    set useQuerystring(value) {
        this._useQuerystring = value;
    }
    set basePath(basePath) {
        this._basePath = basePath;
    }
    get basePath() {
        return this._basePath;
    }
    set timeout(pTimeout) {
        this._timeout = pTimeout;
    }
    get timeout() {
        return this._timeout;
    }
    setDefaultAuthentication(auth) {
        this.authentications.default = auth;
    }
    setApiKey(key, value) {
        this.authentications[ObservationSendToApiApiKeys[key]].apiKey = value;
    }
    /**
     *
     * @param IDObservation ID of record
     * @param EmailAddress
     */
    getObservationSendToEmail(IDObservation, EmailAddress) {
        const localVarPath = this.basePath + '/ObservationSendTo/{IDObservation}/Email/{EmailAddress}'
            .replace('{' + 'IDObservation' + '}', encodeURIComponent(String(IDObservation)))
            .replace('{' + 'EmailAddress' + '}', encodeURIComponent(String(EmailAddress)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'IDObservation' is not null or undefined
        if (IDObservation === null || IDObservation === undefined) {
            throw new Error('Required parameter IDObservation was null or undefined when calling getObservationSendToEmail.');
        }
        // verify required parameter 'EmailAddress' is not null or undefined
        if (EmailAddress === null || EmailAddress === undefined) {
            throw new Error('Required parameter EmailAddress was null or undefined when calling getObservationSendToEmail.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in getObservationSendToEmail!`);
                    }
                }
            });
        }));
    }
    /**
     *
     */
    postObservationSendToEmail() {
        const localVarPath = this.basePath + '/ObservationSendTo/Email';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'POST',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in postObservationSendToEmail!`);
                    }
                }
            });
        }));
    }
    getLastResponse() {
        let response = this._lastResponse;
        this._lastResponse = null;
        return response;
    }
}
exports.ObservationSendToApi = ObservationSendToApi;
var ObservationsBatchTagApiApiKeys;
(function (ObservationsBatchTagApiApiKeys) {
})(ObservationsBatchTagApiApiKeys = exports.ObservationsBatchTagApiApiKeys || (exports.ObservationsBatchTagApiApiKeys = {}));
class ObservationsBatchTagApi {
    constructor(basePathOrUsername, password, basePath) {
        this._basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this._lastResponse = null;
        this._timeout = DEFAULT_TIMEOUT;
        this.authentications = {
            'default': new VoidAuth(),
        };
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    set useQuerystring(value) {
        this._useQuerystring = value;
    }
    set basePath(basePath) {
        this._basePath = basePath;
    }
    get basePath() {
        return this._basePath;
    }
    set timeout(pTimeout) {
        this._timeout = pTimeout;
    }
    get timeout() {
        return this._timeout;
    }
    setDefaultAuthentication(auth) {
        this.authentications.default = auth;
    }
    setApiKey(key, value) {
        this.authentications[ObservationsBatchTagApiApiKeys[key]].apiKey = value;
    }
    /**
     * Add a tag to a set of Observations (by ID)
     */
    postObservationsBatchTagAdd() {
        const localVarPath = this.basePath + '/ObservationsBatchTag/Add';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'POST',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in postObservationsBatchTagAdd!`);
                    }
                }
            });
        }));
    }
    /**
     * Remove a tag to a set of Observations (by ID)
     */
    postObservationsBatchTagRemove() {
        const localVarPath = this.basePath + '/ObservationsBatchTag/Remove';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'POST',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in postObservationsBatchTagRemove!`);
                    }
                }
            });
        }));
    }
    getLastResponse() {
        let response = this._lastResponse;
        this._lastResponse = null;
        return response;
    }
}
exports.ObservationsBatchTagApi = ObservationsBatchTagApi;
var ObservationsByDocumentApiApiKeys;
(function (ObservationsByDocumentApiApiKeys) {
})(ObservationsByDocumentApiApiKeys = exports.ObservationsByDocumentApiApiKeys || (exports.ObservationsByDocumentApiApiKeys = {}));
class ObservationsByDocumentApi {
    constructor(basePathOrUsername, password, basePath) {
        this._basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this._lastResponse = null;
        this._timeout = DEFAULT_TIMEOUT;
        this.authentications = {
            'default': new VoidAuth(),
        };
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    set useQuerystring(value) {
        this._useQuerystring = value;
    }
    set basePath(basePath) {
        this._basePath = basePath;
    }
    get basePath() {
        return this._basePath;
    }
    set timeout(pTimeout) {
        this._timeout = pTimeout;
    }
    get timeout() {
        return this._timeout;
    }
    setDefaultAuthentication(auth) {
        this.authentications.default = auth;
    }
    setApiKey(key, value) {
        this.authentications[ObservationsByDocumentApiApiKeys[key]].apiKey = value;
    }
    /**
     * Find all observations associated to a document.
     * @param IDDocument ID of record
     * @param Begin Beginning (skip) number of records (to page)
     * @param Cap Maximum number of records to return
     */
    getObservationsByDocument(IDDocument, Begin, Cap) {
        const localVarPath = this.basePath + '/ObservationsByDocument/{IDDocument}/{Begin}/{Cap}'
            .replace('{' + 'IDDocument' + '}', encodeURIComponent(String(IDDocument)))
            .replace('{' + 'Begin' + '}', encodeURIComponent(String(Begin)))
            .replace('{' + 'Cap' + '}', encodeURIComponent(String(Cap)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'IDDocument' is not null or undefined
        if (IDDocument === null || IDDocument === undefined) {
            throw new Error('Required parameter IDDocument was null or undefined when calling getObservationsByDocument.');
        }
        // verify required parameter 'Begin' is not null or undefined
        if (Begin === null || Begin === undefined) {
            throw new Error('Required parameter Begin was null or undefined when calling getObservationsByDocument.');
        }
        // verify required parameter 'Cap' is not null or undefined
        if (Cap === null || Cap === undefined) {
            throw new Error('Required parameter Cap was null or undefined when calling getObservationsByDocument.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in getObservationsByDocument!`);
                    }
                }
            });
        }));
    }
    /**
     * Find observations NOT associated to any documents.
     * @param IDProject ID of record
     * @param Cap Maximum number of records to return
     */
    getObservationsByNoDocument(IDProject, Cap) {
        const localVarPath = this.basePath + '/ObservationsByNoDocument/{IDProject}/{Cap}'
            .replace('{' + 'IDProject' + '}', encodeURIComponent(String(IDProject)))
            .replace('{' + 'Cap' + '}', encodeURIComponent(String(Cap)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'IDProject' is not null or undefined
        if (IDProject === null || IDProject === undefined) {
            throw new Error('Required parameter IDProject was null or undefined when calling getObservationsByNoDocument.');
        }
        // verify required parameter 'Cap' is not null or undefined
        if (Cap === null || Cap === undefined) {
            throw new Error('Required parameter Cap was null or undefined when calling getObservationsByNoDocument.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in getObservationsByNoDocument!`);
                    }
                }
            });
        }));
    }
    getLastResponse() {
        let response = this._lastResponse;
        this._lastResponse = null;
        return response;
    }
}
exports.ObservationsByDocumentApi = ObservationsByDocumentApi;
var ObservationsByUpdateDateApiApiKeys;
(function (ObservationsByUpdateDateApiApiKeys) {
})(ObservationsByUpdateDateApiApiKeys = exports.ObservationsByUpdateDateApiApiKeys || (exports.ObservationsByUpdateDateApiApiKeys = {}));
class ObservationsByUpdateDateApi {
    constructor(basePathOrUsername, password, basePath) {
        this._basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this._lastResponse = null;
        this._timeout = DEFAULT_TIMEOUT;
        this.authentications = {
            'default': new VoidAuth(),
        };
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    set useQuerystring(value) {
        this._useQuerystring = value;
    }
    set basePath(basePath) {
        this._basePath = basePath;
    }
    get basePath() {
        return this._basePath;
    }
    set timeout(pTimeout) {
        this._timeout = pTimeout;
    }
    get timeout() {
        return this._timeout;
    }
    setDefaultAuthentication(auth) {
        this.authentications.default = auth;
    }
    setApiKey(key, value) {
        this.authentications[ObservationsByUpdateDateApiApiKeys[key]].apiKey = value;
    }
    /**
     * Fetch list of observations where date is earlier than ByDate.
     * @param ByDate
     * @param Cap Maximum number of records to return
     */
    getObservationsByUpdateDate(ByDate, Cap) {
        const localVarPath = this.basePath + '/ObservationsByUpdateDate/{ByDate}/{Cap}'
            .replace('{' + 'ByDate' + '}', encodeURIComponent(String(ByDate)))
            .replace('{' + 'Cap' + '}', encodeURIComponent(String(Cap)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'ByDate' is not null or undefined
        if (ByDate === null || ByDate === undefined) {
            throw new Error('Required parameter ByDate was null or undefined when calling getObservationsByUpdateDate.');
        }
        // verify required parameter 'Cap' is not null or undefined
        if (Cap === null || Cap === undefined) {
            throw new Error('Required parameter Cap was null or undefined when calling getObservationsByUpdateDate.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in getObservationsByUpdateDate!`);
                    }
                }
            });
        }));
    }
    getLastResponse() {
        let response = this._lastResponse;
        this._lastResponse = null;
        return response;
    }
}
exports.ObservationsByUpdateDateApi = ObservationsByUpdateDateApi;
var ObservationsFilterApiApiKeys;
(function (ObservationsFilterApiApiKeys) {
})(ObservationsFilterApiApiKeys = exports.ObservationsFilterApiApiKeys || (exports.ObservationsFilterApiApiKeys = {}));
class ObservationsFilterApi {
    constructor(basePathOrUsername, password, basePath) {
        this._basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this._lastResponse = null;
        this._timeout = DEFAULT_TIMEOUT;
        this.authentications = {
            'default': new VoidAuth(),
        };
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    set useQuerystring(value) {
        this._useQuerystring = value;
    }
    set basePath(basePath) {
        this._basePath = basePath;
    }
    get basePath() {
        return this._basePath;
    }
    set timeout(pTimeout) {
        this._timeout = pTimeout;
    }
    get timeout() {
        return this._timeout;
    }
    setDefaultAuthentication(auth) {
        this.authentications.default = auth;
    }
    setApiKey(key, value) {
        this.authentications[ObservationsFilterApiApiKeys[key]].apiKey = value;
    }
    /**
     * Search Observations using search index (solr)
     * @param body
     * @param Begin Beginning (skip) number of records (to page)
     * @param Cap Maximum number of records to return
     */
    getObservationsFilter(body, Begin, Cap) {
        const localVarPath = this.basePath + '/ObservationsFilter/{Begin}/{Cap}'
            .replace('{' + 'Begin' + '}', encodeURIComponent(String(Begin)))
            .replace('{' + 'Cap' + '}', encodeURIComponent(String(Cap)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling getObservationsFilter.');
        }
        // verify required parameter 'Begin' is not null or undefined
        if (Begin === null || Begin === undefined) {
            throw new Error('Required parameter Begin was null or undefined when calling getObservationsFilter.');
        }
        // verify required parameter 'Cap' is not null or undefined
        if (Cap === null || Cap === undefined) {
            throw new Error('Required parameter Cap was null or undefined when calling getObservationsFilter.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'POST',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "ObservationFilterRequest")
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in getObservationsFilter!`);
                    }
                }
            });
        }));
    }
    /**
     * Search Observations using search index (solr)
     * @param body
     */
    getObservationsFilterCount(body) {
        const localVarPath = this.basePath + '/ObservationsFilter/Count';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling getObservationsFilterCount.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'POST',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "ObservationFilterRequest")
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in getObservationsFilterCount!`);
                    }
                }
            });
        }));
    }
    getLastResponse() {
        let response = this._lastResponse;
        this._lastResponse = null;
        return response;
    }
}
exports.ObservationsFilterApi = ObservationsFilterApi;
var OrganizationApiApiKeys;
(function (OrganizationApiApiKeys) {
})(OrganizationApiApiKeys = exports.OrganizationApiApiKeys || (exports.OrganizationApiApiKeys = {}));
class OrganizationApi {
    constructor(basePathOrUsername, password, basePath) {
        this._basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this._lastResponse = null;
        this._timeout = DEFAULT_TIMEOUT;
        this.authentications = {
            'default': new VoidAuth(),
        };
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    set useQuerystring(value) {
        this._useQuerystring = value;
    }
    set basePath(basePath) {
        this._basePath = basePath;
    }
    get basePath() {
        return this._basePath;
    }
    set timeout(pTimeout) {
        this._timeout = pTimeout;
    }
    get timeout() {
        return this._timeout;
    }
    setDefaultAuthentication(auth) {
        this.authentications.default = auth;
    }
    setApiKey(key, value) {
        this.authentications[OrganizationApiApiKeys[key]].apiKey = value;
    }
    /**
     * Meadow DELETE
     * @param id ID of record
     */
    _delete(id) {
        const localVarPath = this.basePath + '/Organization/{id}'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling _delete.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'DELETE',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "boolean");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in _delete!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow COUNT
     */
    count() {
        const localVarPath = this.basePath + '/Organizations/Count';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "InlineResponse200");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in count!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow COUNT with filter
     * @param filter FBV meadow filter
     */
    countFiltered(filter) {
        const localVarPath = this.basePath + '/Organizations/FilteredTo/{filter}/Count'
            .replace('{' + 'filter' + '}', encodeURIComponent(String(filter)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'filter' is not null or undefined
        if (filter === null || filter === undefined) {
            throw new Error('Required parameter filter was null or undefined when calling countFiltered.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "InlineResponse200");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in countFiltered!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow POST (Create)
     * @param body
     */
    create(body) {
        const localVarPath = this.basePath + '/Organization';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling create.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'POST',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "Organization")
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "Organization");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in create!`);
                    }
                }
            });
        }));
    }
    /**
     *
     * @param body
     */
    postReadCountQuery(body) {
        const localVarPath = this.basePath + '/Organization/query/count';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling postReadCountQuery.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'POST',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "QueryRequest")
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "InlineResponse200");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in postReadCountQuery!`);
                    }
                }
            });
        }));
    }
    /**
     *
     * @param body
     */
    postReadQuery(body) {
        const localVarPath = this.basePath + '/Organization/query/read';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling postReadQuery.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'POST',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "QueryRequest")
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "Array<Organization>");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in postReadQuery!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow READ
     * @param id ID of record
     */
    read(id) {
        const localVarPath = this.basePath + '/Organization/{id}'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling read.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "Organization");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in read!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow READ list
     * @param begin Beginning (skip) number of records (to page)
     * @param max Maximum number of records to return
     */
    reads(begin, max) {
        const localVarPath = this.basePath + '/Organizations/{begin}/{max}'
            .replace('{' + 'begin' + '}', encodeURIComponent(String(begin)))
            .replace('{' + 'max' + '}', encodeURIComponent(String(max)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'begin' is not null or undefined
        if (begin === null || begin === undefined) {
            throw new Error('Required parameter begin was null or undefined when calling reads.');
        }
        // verify required parameter 'max' is not null or undefined
        if (max === null || max === undefined) {
            throw new Error('Required parameter max was null or undefined when calling reads.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "Array<Organization>");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in reads!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow READ filtered list
     * @param filter FBV meadow filter
     * @param begin Beginning (skip) number of records (to page)
     * @param max Maximum number of records to return
     */
    readsFiltered(filter, begin, max) {
        const localVarPath = this.basePath + '/Organizations/FilteredTo/{filter}/{begin}/{max}'
            .replace('{' + 'filter' + '}', encodeURIComponent(String(filter)))
            .replace('{' + 'begin' + '}', encodeURIComponent(String(begin)))
            .replace('{' + 'max' + '}', encodeURIComponent(String(max)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'filter' is not null or undefined
        if (filter === null || filter === undefined) {
            throw new Error('Required parameter filter was null or undefined when calling readsFiltered.');
        }
        // verify required parameter 'begin' is not null or undefined
        if (begin === null || begin === undefined) {
            throw new Error('Required parameter begin was null or undefined when calling readsFiltered.');
        }
        // verify required parameter 'max' is not null or undefined
        if (max === null || max === undefined) {
            throw new Error('Required parameter max was null or undefined when calling readsFiltered.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "Array<Organization>");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in readsFiltered!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow PUT (Update)
     * @param body
     */
    update(body) {
        const localVarPath = this.basePath + '/Organization';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling update.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'PUT',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "Organization")
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "Organization");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in update!`);
                    }
                }
            });
        }));
    }
    getLastResponse() {
        let response = this._lastResponse;
        this._lastResponse = null;
        return response;
    }
}
exports.OrganizationApi = OrganizationApi;
var OrganizationMaterialJoinApiApiKeys;
(function (OrganizationMaterialJoinApiApiKeys) {
})(OrganizationMaterialJoinApiApiKeys = exports.OrganizationMaterialJoinApiApiKeys || (exports.OrganizationMaterialJoinApiApiKeys = {}));
class OrganizationMaterialJoinApi {
    constructor(basePathOrUsername, password, basePath) {
        this._basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this._lastResponse = null;
        this._timeout = DEFAULT_TIMEOUT;
        this.authentications = {
            'default': new VoidAuth(),
        };
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    set useQuerystring(value) {
        this._useQuerystring = value;
    }
    set basePath(basePath) {
        this._basePath = basePath;
    }
    get basePath() {
        return this._basePath;
    }
    set timeout(pTimeout) {
        this._timeout = pTimeout;
    }
    get timeout() {
        return this._timeout;
    }
    setDefaultAuthentication(auth) {
        this.authentications.default = auth;
    }
    setApiKey(key, value) {
        this.authentications[OrganizationMaterialJoinApiApiKeys[key]].apiKey = value;
    }
    /**
     * Meadow DELETE
     * @param id ID of record
     */
    _delete(id) {
        const localVarPath = this.basePath + '/OrganizationMaterialJoin/{id}'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling _delete.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'DELETE',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "boolean");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in _delete!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow COUNT
     */
    count() {
        const localVarPath = this.basePath + '/OrganizationMaterialJoins/Count';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "InlineResponse200");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in count!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow COUNT with filter
     * @param filter FBV meadow filter
     */
    countFiltered(filter) {
        const localVarPath = this.basePath + '/OrganizationMaterialJoins/FilteredTo/{filter}/Count'
            .replace('{' + 'filter' + '}', encodeURIComponent(String(filter)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'filter' is not null or undefined
        if (filter === null || filter === undefined) {
            throw new Error('Required parameter filter was null or undefined when calling countFiltered.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "InlineResponse200");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in countFiltered!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow POST (Create)
     * @param body
     */
    create(body) {
        const localVarPath = this.basePath + '/OrganizationMaterialJoin';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling create.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'POST',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "OrganizationMaterialJoin")
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "OrganizationMaterialJoin");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in create!`);
                    }
                }
            });
        }));
    }
    /**
     *
     * @param body
     */
    postReadCountQuery(body) {
        const localVarPath = this.basePath + '/OrganizationMaterialJoin/query/count';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling postReadCountQuery.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'POST',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "QueryRequest")
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "InlineResponse200");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in postReadCountQuery!`);
                    }
                }
            });
        }));
    }
    /**
     *
     * @param body
     */
    postReadQuery(body) {
        const localVarPath = this.basePath + '/OrganizationMaterialJoin/query/read';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling postReadQuery.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'POST',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "QueryRequest")
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "Array<OrganizationMaterialJoin>");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in postReadQuery!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow READ
     * @param id ID of record
     */
    read(id) {
        const localVarPath = this.basePath + '/OrganizationMaterialJoin/{id}'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling read.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "OrganizationMaterialJoin");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in read!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow READ list
     * @param begin Beginning (skip) number of records (to page)
     * @param max Maximum number of records to return
     */
    reads(begin, max) {
        const localVarPath = this.basePath + '/OrganizationMaterialJoins/{begin}/{max}'
            .replace('{' + 'begin' + '}', encodeURIComponent(String(begin)))
            .replace('{' + 'max' + '}', encodeURIComponent(String(max)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'begin' is not null or undefined
        if (begin === null || begin === undefined) {
            throw new Error('Required parameter begin was null or undefined when calling reads.');
        }
        // verify required parameter 'max' is not null or undefined
        if (max === null || max === undefined) {
            throw new Error('Required parameter max was null or undefined when calling reads.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "Array<OrganizationMaterialJoin>");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in reads!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow READ filtered list
     * @param filter FBV meadow filter
     * @param begin Beginning (skip) number of records (to page)
     * @param max Maximum number of records to return
     */
    readsFiltered(filter, begin, max) {
        const localVarPath = this.basePath + '/OrganizationMaterialJoins/FilteredTo/{filter}/{begin}/{max}'
            .replace('{' + 'filter' + '}', encodeURIComponent(String(filter)))
            .replace('{' + 'begin' + '}', encodeURIComponent(String(begin)))
            .replace('{' + 'max' + '}', encodeURIComponent(String(max)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'filter' is not null or undefined
        if (filter === null || filter === undefined) {
            throw new Error('Required parameter filter was null or undefined when calling readsFiltered.');
        }
        // verify required parameter 'begin' is not null or undefined
        if (begin === null || begin === undefined) {
            throw new Error('Required parameter begin was null or undefined when calling readsFiltered.');
        }
        // verify required parameter 'max' is not null or undefined
        if (max === null || max === undefined) {
            throw new Error('Required parameter max was null or undefined when calling readsFiltered.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "Array<OrganizationMaterialJoin>");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in readsFiltered!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow PUT (Update)
     * @param body
     */
    update(body) {
        const localVarPath = this.basePath + '/OrganizationMaterialJoin';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling update.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'PUT',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "OrganizationMaterialJoin")
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "OrganizationMaterialJoin");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in update!`);
                    }
                }
            });
        }));
    }
    getLastResponse() {
        let response = this._lastResponse;
        this._lastResponse = null;
        return response;
    }
}
exports.OrganizationMaterialJoinApi = OrganizationMaterialJoinApi;
var PayItemApiApiKeys;
(function (PayItemApiApiKeys) {
})(PayItemApiApiKeys = exports.PayItemApiApiKeys || (exports.PayItemApiApiKeys = {}));
class PayItemApi {
    constructor(basePathOrUsername, password, basePath) {
        this._basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this._lastResponse = null;
        this._timeout = DEFAULT_TIMEOUT;
        this.authentications = {
            'default': new VoidAuth(),
        };
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    set useQuerystring(value) {
        this._useQuerystring = value;
    }
    set basePath(basePath) {
        this._basePath = basePath;
    }
    get basePath() {
        return this._basePath;
    }
    set timeout(pTimeout) {
        this._timeout = pTimeout;
    }
    get timeout() {
        return this._timeout;
    }
    setDefaultAuthentication(auth) {
        this.authentications.default = auth;
    }
    setApiKey(key, value) {
        this.authentications[PayItemApiApiKeys[key]].apiKey = value;
    }
    /**
     * Meadow DELETE
     * @param id ID of record
     */
    _delete(id) {
        const localVarPath = this.basePath + '/PayItem/{id}'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling _delete.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'DELETE',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "boolean");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in _delete!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow COUNT
     */
    count() {
        const localVarPath = this.basePath + '/PayItems/Count';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "InlineResponse200");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in count!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow COUNT with filter
     * @param filter FBV meadow filter
     */
    countFiltered(filter) {
        const localVarPath = this.basePath + '/PayItems/FilteredTo/{filter}/Count'
            .replace('{' + 'filter' + '}', encodeURIComponent(String(filter)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'filter' is not null or undefined
        if (filter === null || filter === undefined) {
            throw new Error('Required parameter filter was null or undefined when calling countFiltered.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "InlineResponse200");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in countFiltered!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow POST (Create)
     * @param body
     */
    create(body) {
        const localVarPath = this.basePath + '/PayItem';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling create.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'POST',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "PayItemModel")
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "PayItemModel");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in create!`);
                    }
                }
            });
        }));
    }
    /**
     *
     * @param body
     */
    postReadCountQuery(body) {
        const localVarPath = this.basePath + '/PayItem/query/count';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling postReadCountQuery.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'POST',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "QueryRequest")
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "InlineResponse200");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in postReadCountQuery!`);
                    }
                }
            });
        }));
    }
    /**
     *
     * @param body
     */
    postReadQuery(body) {
        const localVarPath = this.basePath + '/PayItem/query/read';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling postReadQuery.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'POST',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "QueryRequest")
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "Array<PayItemModel>");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in postReadQuery!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow READ
     * @param id ID of record
     */
    read(id) {
        const localVarPath = this.basePath + '/PayItem/{id}'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling read.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "PayItemModel");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in read!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow READ list
     * @param begin Beginning (skip) number of records (to page)
     * @param max Maximum number of records to return
     */
    reads(begin, max) {
        const localVarPath = this.basePath + '/PayItems/{begin}/{max}'
            .replace('{' + 'begin' + '}', encodeURIComponent(String(begin)))
            .replace('{' + 'max' + '}', encodeURIComponent(String(max)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'begin' is not null or undefined
        if (begin === null || begin === undefined) {
            throw new Error('Required parameter begin was null or undefined when calling reads.');
        }
        // verify required parameter 'max' is not null or undefined
        if (max === null || max === undefined) {
            throw new Error('Required parameter max was null or undefined when calling reads.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "Array<PayItemModel>");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in reads!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow READ filtered list
     * @param filter FBV meadow filter
     * @param begin Beginning (skip) number of records (to page)
     * @param max Maximum number of records to return
     */
    readsFiltered(filter, begin, max) {
        const localVarPath = this.basePath + '/PayItems/FilteredTo/{filter}/{begin}/{max}'
            .replace('{' + 'filter' + '}', encodeURIComponent(String(filter)))
            .replace('{' + 'begin' + '}', encodeURIComponent(String(begin)))
            .replace('{' + 'max' + '}', encodeURIComponent(String(max)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'filter' is not null or undefined
        if (filter === null || filter === undefined) {
            throw new Error('Required parameter filter was null or undefined when calling readsFiltered.');
        }
        // verify required parameter 'begin' is not null or undefined
        if (begin === null || begin === undefined) {
            throw new Error('Required parameter begin was null or undefined when calling readsFiltered.');
        }
        // verify required parameter 'max' is not null or undefined
        if (max === null || max === undefined) {
            throw new Error('Required parameter max was null or undefined when calling readsFiltered.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "Array<PayItemModel>");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in readsFiltered!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow PUT (Update)
     * @param body
     */
    update(body) {
        const localVarPath = this.basePath + '/PayItem';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling update.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'PUT',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "PayItemModel")
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "PayItemModel");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in update!`);
                    }
                }
            });
        }));
    }
    getLastResponse() {
        let response = this._lastResponse;
        this._lastResponse = null;
        return response;
    }
}
exports.PayItemApi = PayItemApi;
var ProductApiApiKeys;
(function (ProductApiApiKeys) {
})(ProductApiApiKeys = exports.ProductApiApiKeys || (exports.ProductApiApiKeys = {}));
class ProductApi {
    constructor(basePathOrUsername, password, basePath) {
        this._basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this._lastResponse = null;
        this._timeout = DEFAULT_TIMEOUT;
        this.authentications = {
            'default': new VoidAuth(),
        };
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    set useQuerystring(value) {
        this._useQuerystring = value;
    }
    set basePath(basePath) {
        this._basePath = basePath;
    }
    get basePath() {
        return this._basePath;
    }
    set timeout(pTimeout) {
        this._timeout = pTimeout;
    }
    get timeout() {
        return this._timeout;
    }
    setDefaultAuthentication(auth) {
        this.authentications.default = auth;
    }
    setApiKey(key, value) {
        this.authentications[ProductApiApiKeys[key]].apiKey = value;
    }
    /**
     * Meadow DELETE
     * @param id ID of record
     */
    _delete(id) {
        const localVarPath = this.basePath + '/Product/{id}'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling _delete.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'DELETE',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "boolean");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in _delete!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow COUNT
     */
    count() {
        const localVarPath = this.basePath + '/Products/Count';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "InlineResponse200");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in count!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow COUNT with filter
     * @param filter FBV meadow filter
     */
    countFiltered(filter) {
        const localVarPath = this.basePath + '/Products/FilteredTo/{filter}/Count'
            .replace('{' + 'filter' + '}', encodeURIComponent(String(filter)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'filter' is not null or undefined
        if (filter === null || filter === undefined) {
            throw new Error('Required parameter filter was null or undefined when calling countFiltered.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "InlineResponse200");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in countFiltered!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow POST (Create)
     * @param body
     */
    create(body) {
        const localVarPath = this.basePath + '/Product';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling create.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'POST',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "Product")
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "Product");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in create!`);
                    }
                }
            });
        }));
    }
    /**
     *
     * @param body
     */
    postReadCountQuery(body) {
        const localVarPath = this.basePath + '/Product/query/count';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling postReadCountQuery.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'POST',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "QueryRequest")
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "InlineResponse200");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in postReadCountQuery!`);
                    }
                }
            });
        }));
    }
    /**
     *
     * @param body
     */
    postReadQuery(body) {
        const localVarPath = this.basePath + '/Product/query/read';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling postReadQuery.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'POST',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "QueryRequest")
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "Array<Product>");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in postReadQuery!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow READ
     * @param id ID of record
     */
    read(id) {
        const localVarPath = this.basePath + '/Product/{id}'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling read.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "Product");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in read!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow READ list
     * @param begin Beginning (skip) number of records (to page)
     * @param max Maximum number of records to return
     */
    reads(begin, max) {
        const localVarPath = this.basePath + '/Products/{begin}/{max}'
            .replace('{' + 'begin' + '}', encodeURIComponent(String(begin)))
            .replace('{' + 'max' + '}', encodeURIComponent(String(max)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'begin' is not null or undefined
        if (begin === null || begin === undefined) {
            throw new Error('Required parameter begin was null or undefined when calling reads.');
        }
        // verify required parameter 'max' is not null or undefined
        if (max === null || max === undefined) {
            throw new Error('Required parameter max was null or undefined when calling reads.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "Array<Product>");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in reads!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow READ filtered list
     * @param filter FBV meadow filter
     * @param begin Beginning (skip) number of records (to page)
     * @param max Maximum number of records to return
     */
    readsFiltered(filter, begin, max) {
        const localVarPath = this.basePath + '/Products/FilteredTo/{filter}/{begin}/{max}'
            .replace('{' + 'filter' + '}', encodeURIComponent(String(filter)))
            .replace('{' + 'begin' + '}', encodeURIComponent(String(begin)))
            .replace('{' + 'max' + '}', encodeURIComponent(String(max)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'filter' is not null or undefined
        if (filter === null || filter === undefined) {
            throw new Error('Required parameter filter was null or undefined when calling readsFiltered.');
        }
        // verify required parameter 'begin' is not null or undefined
        if (begin === null || begin === undefined) {
            throw new Error('Required parameter begin was null or undefined when calling readsFiltered.');
        }
        // verify required parameter 'max' is not null or undefined
        if (max === null || max === undefined) {
            throw new Error('Required parameter max was null or undefined when calling readsFiltered.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "Array<Product>");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in readsFiltered!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow PUT (Update)
     * @param body
     */
    update(body) {
        const localVarPath = this.basePath + '/Product';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling update.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'PUT',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "Product")
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "Product");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in update!`);
                    }
                }
            });
        }));
    }
    getLastResponse() {
        let response = this._lastResponse;
        this._lastResponse = null;
        return response;
    }
}
exports.ProductApi = ProductApi;
var ProductionPlantApiApiKeys;
(function (ProductionPlantApiApiKeys) {
})(ProductionPlantApiApiKeys = exports.ProductionPlantApiApiKeys || (exports.ProductionPlantApiApiKeys = {}));
class ProductionPlantApi {
    constructor(basePathOrUsername, password, basePath) {
        this._basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this._lastResponse = null;
        this._timeout = DEFAULT_TIMEOUT;
        this.authentications = {
            'default': new VoidAuth(),
        };
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    set useQuerystring(value) {
        this._useQuerystring = value;
    }
    set basePath(basePath) {
        this._basePath = basePath;
    }
    get basePath() {
        return this._basePath;
    }
    set timeout(pTimeout) {
        this._timeout = pTimeout;
    }
    get timeout() {
        return this._timeout;
    }
    setDefaultAuthentication(auth) {
        this.authentications.default = auth;
    }
    setApiKey(key, value) {
        this.authentications[ProductionPlantApiApiKeys[key]].apiKey = value;
    }
    /**
     * Meadow DELETE
     * @param id ID of record
     */
    _delete(id) {
        const localVarPath = this.basePath + '/ProductionPlant/{id}'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling _delete.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'DELETE',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "boolean");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in _delete!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow COUNT
     */
    count() {
        const localVarPath = this.basePath + '/ProductionPlants/Count';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "InlineResponse200");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in count!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow COUNT with filter
     * @param filter FBV meadow filter
     */
    countFiltered(filter) {
        const localVarPath = this.basePath + '/ProductionPlants/FilteredTo/{filter}/Count'
            .replace('{' + 'filter' + '}', encodeURIComponent(String(filter)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'filter' is not null or undefined
        if (filter === null || filter === undefined) {
            throw new Error('Required parameter filter was null or undefined when calling countFiltered.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "InlineResponse200");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in countFiltered!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow POST (Create)
     * @param body
     */
    create(body) {
        const localVarPath = this.basePath + '/ProductionPlant';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling create.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'POST',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "ProductionPlant")
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "ProductionPlant");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in create!`);
                    }
                }
            });
        }));
    }
    /**
     *
     * @param body
     */
    postReadCountQuery(body) {
        const localVarPath = this.basePath + '/ProductionPlant/query/count';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling postReadCountQuery.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'POST',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "QueryRequest")
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "InlineResponse200");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in postReadCountQuery!`);
                    }
                }
            });
        }));
    }
    /**
     *
     * @param body
     */
    postReadQuery(body) {
        const localVarPath = this.basePath + '/ProductionPlant/query/read';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling postReadQuery.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'POST',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "QueryRequest")
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "Array<ProductionPlant>");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in postReadQuery!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow READ
     * @param id ID of record
     */
    read(id) {
        const localVarPath = this.basePath + '/ProductionPlant/{id}'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling read.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "ProductionPlant");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in read!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow READ list
     * @param begin Beginning (skip) number of records (to page)
     * @param max Maximum number of records to return
     */
    reads(begin, max) {
        const localVarPath = this.basePath + '/ProductionPlants/{begin}/{max}'
            .replace('{' + 'begin' + '}', encodeURIComponent(String(begin)))
            .replace('{' + 'max' + '}', encodeURIComponent(String(max)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'begin' is not null or undefined
        if (begin === null || begin === undefined) {
            throw new Error('Required parameter begin was null or undefined when calling reads.');
        }
        // verify required parameter 'max' is not null or undefined
        if (max === null || max === undefined) {
            throw new Error('Required parameter max was null or undefined when calling reads.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "Array<ProductionPlant>");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in reads!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow READ filtered list
     * @param filter FBV meadow filter
     * @param begin Beginning (skip) number of records (to page)
     * @param max Maximum number of records to return
     */
    readsFiltered(filter, begin, max) {
        const localVarPath = this.basePath + '/ProductionPlants/FilteredTo/{filter}/{begin}/{max}'
            .replace('{' + 'filter' + '}', encodeURIComponent(String(filter)))
            .replace('{' + 'begin' + '}', encodeURIComponent(String(begin)))
            .replace('{' + 'max' + '}', encodeURIComponent(String(max)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'filter' is not null or undefined
        if (filter === null || filter === undefined) {
            throw new Error('Required parameter filter was null or undefined when calling readsFiltered.');
        }
        // verify required parameter 'begin' is not null or undefined
        if (begin === null || begin === undefined) {
            throw new Error('Required parameter begin was null or undefined when calling readsFiltered.');
        }
        // verify required parameter 'max' is not null or undefined
        if (max === null || max === undefined) {
            throw new Error('Required parameter max was null or undefined when calling readsFiltered.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "Array<ProductionPlant>");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in readsFiltered!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow PUT (Update)
     * @param body
     */
    update(body) {
        const localVarPath = this.basePath + '/ProductionPlant';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling update.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'PUT',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "ProductionPlant")
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "ProductionPlant");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in update!`);
                    }
                }
            });
        }));
    }
    getLastResponse() {
        let response = this._lastResponse;
        this._lastResponse = null;
        return response;
    }
}
exports.ProductionPlantApi = ProductionPlantApi;
var ProductionPlantMaterialApprovalApiApiKeys;
(function (ProductionPlantMaterialApprovalApiApiKeys) {
})(ProductionPlantMaterialApprovalApiApiKeys = exports.ProductionPlantMaterialApprovalApiApiKeys || (exports.ProductionPlantMaterialApprovalApiApiKeys = {}));
class ProductionPlantMaterialApprovalApi {
    constructor(basePathOrUsername, password, basePath) {
        this._basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this._lastResponse = null;
        this._timeout = DEFAULT_TIMEOUT;
        this.authentications = {
            'default': new VoidAuth(),
        };
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    set useQuerystring(value) {
        this._useQuerystring = value;
    }
    set basePath(basePath) {
        this._basePath = basePath;
    }
    get basePath() {
        return this._basePath;
    }
    set timeout(pTimeout) {
        this._timeout = pTimeout;
    }
    get timeout() {
        return this._timeout;
    }
    setDefaultAuthentication(auth) {
        this.authentications.default = auth;
    }
    setApiKey(key, value) {
        this.authentications[ProductionPlantMaterialApprovalApiApiKeys[key]].apiKey = value;
    }
    /**
     * Meadow DELETE
     * @param id ID of record
     */
    _delete(id) {
        const localVarPath = this.basePath + '/ProductionPlantMaterialApproval/{id}'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling _delete.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'DELETE',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "boolean");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in _delete!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow COUNT
     */
    count() {
        const localVarPath = this.basePath + '/ProductionPlantMaterialApprovals/Count';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "InlineResponse200");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in count!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow COUNT with filter
     * @param filter FBV meadow filter
     */
    countFiltered(filter) {
        const localVarPath = this.basePath + '/ProductionPlantMaterialApprovals/FilteredTo/{filter}/Count'
            .replace('{' + 'filter' + '}', encodeURIComponent(String(filter)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'filter' is not null or undefined
        if (filter === null || filter === undefined) {
            throw new Error('Required parameter filter was null or undefined when calling countFiltered.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "InlineResponse200");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in countFiltered!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow POST (Create)
     * @param body
     */
    create(body) {
        const localVarPath = this.basePath + '/ProductionPlantMaterialApproval';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling create.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'POST',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "ProductionPlantMaterialApproval")
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "ProductionPlantMaterialApproval");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in create!`);
                    }
                }
            });
        }));
    }
    /**
     *
     * @param body
     */
    postReadCountQuery(body) {
        const localVarPath = this.basePath + '/ProductionPlantMaterialApproval/query/count';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling postReadCountQuery.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'POST',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "QueryRequest")
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "InlineResponse200");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in postReadCountQuery!`);
                    }
                }
            });
        }));
    }
    /**
     *
     * @param body
     */
    postReadQuery(body) {
        const localVarPath = this.basePath + '/ProductionPlantMaterialApproval/query/read';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling postReadQuery.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'POST',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "QueryRequest")
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "Array<ProductionPlantMaterialApproval>");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in postReadQuery!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow READ
     * @param id ID of record
     */
    read(id) {
        const localVarPath = this.basePath + '/ProductionPlantMaterialApproval/{id}'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling read.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "ProductionPlantMaterialApproval");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in read!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow READ list
     * @param begin Beginning (skip) number of records (to page)
     * @param max Maximum number of records to return
     */
    reads(begin, max) {
        const localVarPath = this.basePath + '/ProductionPlantMaterialApprovals/{begin}/{max}'
            .replace('{' + 'begin' + '}', encodeURIComponent(String(begin)))
            .replace('{' + 'max' + '}', encodeURIComponent(String(max)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'begin' is not null or undefined
        if (begin === null || begin === undefined) {
            throw new Error('Required parameter begin was null or undefined when calling reads.');
        }
        // verify required parameter 'max' is not null or undefined
        if (max === null || max === undefined) {
            throw new Error('Required parameter max was null or undefined when calling reads.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "Array<ProductionPlantMaterialApproval>");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in reads!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow READ filtered list
     * @param filter FBV meadow filter
     * @param begin Beginning (skip) number of records (to page)
     * @param max Maximum number of records to return
     */
    readsFiltered(filter, begin, max) {
        const localVarPath = this.basePath + '/ProductionPlantMaterialApprovals/FilteredTo/{filter}/{begin}/{max}'
            .replace('{' + 'filter' + '}', encodeURIComponent(String(filter)))
            .replace('{' + 'begin' + '}', encodeURIComponent(String(begin)))
            .replace('{' + 'max' + '}', encodeURIComponent(String(max)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'filter' is not null or undefined
        if (filter === null || filter === undefined) {
            throw new Error('Required parameter filter was null or undefined when calling readsFiltered.');
        }
        // verify required parameter 'begin' is not null or undefined
        if (begin === null || begin === undefined) {
            throw new Error('Required parameter begin was null or undefined when calling readsFiltered.');
        }
        // verify required parameter 'max' is not null or undefined
        if (max === null || max === undefined) {
            throw new Error('Required parameter max was null or undefined when calling readsFiltered.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "Array<ProductionPlantMaterialApproval>");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in readsFiltered!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow PUT (Update)
     * @param body
     */
    update(body) {
        const localVarPath = this.basePath + '/ProductionPlantMaterialApproval';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling update.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'PUT',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "ProductionPlantMaterialApproval")
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "ProductionPlantMaterialApproval");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in update!`);
                    }
                }
            });
        }));
    }
    getLastResponse() {
        let response = this._lastResponse;
        this._lastResponse = null;
        return response;
    }
}
exports.ProductionPlantMaterialApprovalApi = ProductionPlantMaterialApprovalApi;
var ProjectApiApiKeys;
(function (ProjectApiApiKeys) {
})(ProjectApiApiKeys = exports.ProjectApiApiKeys || (exports.ProjectApiApiKeys = {}));
class ProjectApi {
    constructor(basePathOrUsername, password, basePath) {
        this._basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this._lastResponse = null;
        this._timeout = DEFAULT_TIMEOUT;
        this.authentications = {
            'default': new VoidAuth(),
        };
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    set useQuerystring(value) {
        this._useQuerystring = value;
    }
    set basePath(basePath) {
        this._basePath = basePath;
    }
    get basePath() {
        return this._basePath;
    }
    set timeout(pTimeout) {
        this._timeout = pTimeout;
    }
    get timeout() {
        return this._timeout;
    }
    setDefaultAuthentication(auth) {
        this.authentications.default = auth;
    }
    setApiKey(key, value) {
        this.authentications[ProjectApiApiKeys[key]].apiKey = value;
    }
    /**
     * Meadow DELETE
     * @param id ID of record
     */
    _delete(id) {
        const localVarPath = this.basePath + '/Project/{id}'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling _delete.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'DELETE',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "boolean");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in _delete!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow COUNT
     */
    count() {
        const localVarPath = this.basePath + '/Projects/Count';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "InlineResponse200");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in count!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow COUNT with filter
     * @param filter FBV meadow filter
     */
    countFiltered(filter) {
        const localVarPath = this.basePath + '/Projects/FilteredTo/{filter}/Count'
            .replace('{' + 'filter' + '}', encodeURIComponent(String(filter)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'filter' is not null or undefined
        if (filter === null || filter === undefined) {
            throw new Error('Required parameter filter was null or undefined when calling countFiltered.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "InlineResponse200");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in countFiltered!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow POST (Create)
     * @param body
     */
    create(body) {
        const localVarPath = this.basePath + '/Project';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling create.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'POST',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "ProjectModel")
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "ProjectModel");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in create!`);
                    }
                }
            });
        }));
    }
    /**
     *
     * @param body
     */
    postReadCountQuery(body) {
        const localVarPath = this.basePath + '/Project/query/count';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling postReadCountQuery.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'POST',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "QueryRequest")
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "InlineResponse200");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in postReadCountQuery!`);
                    }
                }
            });
        }));
    }
    /**
     *
     * @param body
     */
    postReadQuery(body) {
        const localVarPath = this.basePath + '/Project/query/read';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling postReadQuery.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'POST',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "QueryRequest")
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "Array<ProjectModel>");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in postReadQuery!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow READ
     * @param id ID of record
     */
    read(id) {
        const localVarPath = this.basePath + '/Project/{id}'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling read.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "ProjectModel");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in read!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow READ list
     * @param begin Beginning (skip) number of records (to page)
     * @param max Maximum number of records to return
     */
    reads(begin, max) {
        const localVarPath = this.basePath + '/Projects/{begin}/{max}'
            .replace('{' + 'begin' + '}', encodeURIComponent(String(begin)))
            .replace('{' + 'max' + '}', encodeURIComponent(String(max)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'begin' is not null or undefined
        if (begin === null || begin === undefined) {
            throw new Error('Required parameter begin was null or undefined when calling reads.');
        }
        // verify required parameter 'max' is not null or undefined
        if (max === null || max === undefined) {
            throw new Error('Required parameter max was null or undefined when calling reads.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "Array<ProjectModel>");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in reads!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow READ filtered list
     * @param filter FBV meadow filter
     * @param begin Beginning (skip) number of records (to page)
     * @param max Maximum number of records to return
     */
    readsFiltered(filter, begin, max) {
        const localVarPath = this.basePath + '/Projects/FilteredTo/{filter}/{begin}/{max}'
            .replace('{' + 'filter' + '}', encodeURIComponent(String(filter)))
            .replace('{' + 'begin' + '}', encodeURIComponent(String(begin)))
            .replace('{' + 'max' + '}', encodeURIComponent(String(max)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'filter' is not null or undefined
        if (filter === null || filter === undefined) {
            throw new Error('Required parameter filter was null or undefined when calling readsFiltered.');
        }
        // verify required parameter 'begin' is not null or undefined
        if (begin === null || begin === undefined) {
            throw new Error('Required parameter begin was null or undefined when calling readsFiltered.');
        }
        // verify required parameter 'max' is not null or undefined
        if (max === null || max === undefined) {
            throw new Error('Required parameter max was null or undefined when calling readsFiltered.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "Array<ProjectModel>");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in readsFiltered!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow PUT (Update)
     * @param body
     */
    update(body) {
        const localVarPath = this.basePath + '/Project';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling update.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'PUT',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "ProjectModel")
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "ProjectModel");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in update!`);
                    }
                }
            });
        }));
    }
    getLastResponse() {
        let response = this._lastResponse;
        this._lastResponse = null;
        return response;
    }
}
exports.ProjectApi = ProjectApi;
var RecordOfMaterialApiApiKeys;
(function (RecordOfMaterialApiApiKeys) {
})(RecordOfMaterialApiApiKeys = exports.RecordOfMaterialApiApiKeys || (exports.RecordOfMaterialApiApiKeys = {}));
class RecordOfMaterialApi {
    constructor(basePathOrUsername, password, basePath) {
        this._basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this._lastResponse = null;
        this._timeout = DEFAULT_TIMEOUT;
        this.authentications = {
            'default': new VoidAuth(),
        };
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    set useQuerystring(value) {
        this._useQuerystring = value;
    }
    set basePath(basePath) {
        this._basePath = basePath;
    }
    get basePath() {
        return this._basePath;
    }
    set timeout(pTimeout) {
        this._timeout = pTimeout;
    }
    get timeout() {
        return this._timeout;
    }
    setDefaultAuthentication(auth) {
        this.authentications.default = auth;
    }
    setApiKey(key, value) {
        this.authentications[RecordOfMaterialApiApiKeys[key]].apiKey = value;
    }
    /**
     * Meadow DELETE
     * @param id ID of record
     */
    _delete(id) {
        const localVarPath = this.basePath + '/RecordOfMaterial/{id}'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling _delete.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'DELETE',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "boolean");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in _delete!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow COUNT
     */
    count() {
        const localVarPath = this.basePath + '/RecordOfMaterials/Count';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "InlineResponse200");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in count!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow COUNT with filter
     * @param filter FBV meadow filter
     */
    countFiltered(filter) {
        const localVarPath = this.basePath + '/RecordOfMaterials/FilteredTo/{filter}/Count'
            .replace('{' + 'filter' + '}', encodeURIComponent(String(filter)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'filter' is not null or undefined
        if (filter === null || filter === undefined) {
            throw new Error('Required parameter filter was null or undefined when calling countFiltered.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "InlineResponse200");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in countFiltered!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow POST (Create)
     * @param body
     */
    create(body) {
        const localVarPath = this.basePath + '/RecordOfMaterial';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling create.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'POST',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "RecordOfMaterial")
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "RecordOfMaterial");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in create!`);
                    }
                }
            });
        }));
    }
    /**
     *
     * @param body
     */
    postReadCountQuery(body) {
        const localVarPath = this.basePath + '/RecordOfMaterial/query/count';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling postReadCountQuery.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'POST',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "QueryRequest")
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "InlineResponse200");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in postReadCountQuery!`);
                    }
                }
            });
        }));
    }
    /**
     *
     * @param body
     */
    postReadQuery(body) {
        const localVarPath = this.basePath + '/RecordOfMaterial/query/read';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling postReadQuery.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'POST',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "QueryRequest")
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "Array<RecordOfMaterial>");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in postReadQuery!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow READ
     * @param id ID of record
     */
    read(id) {
        const localVarPath = this.basePath + '/RecordOfMaterial/{id}'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling read.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "RecordOfMaterial");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in read!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow READ list
     * @param begin Beginning (skip) number of records (to page)
     * @param max Maximum number of records to return
     */
    reads(begin, max) {
        const localVarPath = this.basePath + '/RecordOfMaterials/{begin}/{max}'
            .replace('{' + 'begin' + '}', encodeURIComponent(String(begin)))
            .replace('{' + 'max' + '}', encodeURIComponent(String(max)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'begin' is not null or undefined
        if (begin === null || begin === undefined) {
            throw new Error('Required parameter begin was null or undefined when calling reads.');
        }
        // verify required parameter 'max' is not null or undefined
        if (max === null || max === undefined) {
            throw new Error('Required parameter max was null or undefined when calling reads.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "Array<RecordOfMaterial>");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in reads!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow READ filtered list
     * @param filter FBV meadow filter
     * @param begin Beginning (skip) number of records (to page)
     * @param max Maximum number of records to return
     */
    readsFiltered(filter, begin, max) {
        const localVarPath = this.basePath + '/RecordOfMaterials/FilteredTo/{filter}/{begin}/{max}'
            .replace('{' + 'filter' + '}', encodeURIComponent(String(filter)))
            .replace('{' + 'begin' + '}', encodeURIComponent(String(begin)))
            .replace('{' + 'max' + '}', encodeURIComponent(String(max)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'filter' is not null or undefined
        if (filter === null || filter === undefined) {
            throw new Error('Required parameter filter was null or undefined when calling readsFiltered.');
        }
        // verify required parameter 'begin' is not null or undefined
        if (begin === null || begin === undefined) {
            throw new Error('Required parameter begin was null or undefined when calling readsFiltered.');
        }
        // verify required parameter 'max' is not null or undefined
        if (max === null || max === undefined) {
            throw new Error('Required parameter max was null or undefined when calling readsFiltered.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "Array<RecordOfMaterial>");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in readsFiltered!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow PUT (Update)
     * @param body
     */
    update(body) {
        const localVarPath = this.basePath + '/RecordOfMaterial';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling update.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'PUT',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "RecordOfMaterial")
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "RecordOfMaterial");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in update!`);
                    }
                }
            });
        }));
    }
    getLastResponse() {
        let response = this._lastResponse;
        this._lastResponse = null;
        return response;
    }
}
exports.RecordOfMaterialApi = RecordOfMaterialApi;
var RecordOfMaterialEntryApiApiKeys;
(function (RecordOfMaterialEntryApiApiKeys) {
})(RecordOfMaterialEntryApiApiKeys = exports.RecordOfMaterialEntryApiApiKeys || (exports.RecordOfMaterialEntryApiApiKeys = {}));
class RecordOfMaterialEntryApi {
    constructor(basePathOrUsername, password, basePath) {
        this._basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this._lastResponse = null;
        this._timeout = DEFAULT_TIMEOUT;
        this.authentications = {
            'default': new VoidAuth(),
        };
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    set useQuerystring(value) {
        this._useQuerystring = value;
    }
    set basePath(basePath) {
        this._basePath = basePath;
    }
    get basePath() {
        return this._basePath;
    }
    set timeout(pTimeout) {
        this._timeout = pTimeout;
    }
    get timeout() {
        return this._timeout;
    }
    setDefaultAuthentication(auth) {
        this.authentications.default = auth;
    }
    setApiKey(key, value) {
        this.authentications[RecordOfMaterialEntryApiApiKeys[key]].apiKey = value;
    }
    /**
     * Meadow DELETE
     * @param id ID of record
     */
    _delete(id) {
        const localVarPath = this.basePath + '/RecordOfMaterialEntry/{id}'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling _delete.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'DELETE',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "boolean");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in _delete!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow COUNT
     */
    count() {
        const localVarPath = this.basePath + '/RecordOfMaterialEntrys/Count';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "InlineResponse200");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in count!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow COUNT with filter
     * @param filter FBV meadow filter
     */
    countFiltered(filter) {
        const localVarPath = this.basePath + '/RecordOfMaterialEntrys/FilteredTo/{filter}/Count'
            .replace('{' + 'filter' + '}', encodeURIComponent(String(filter)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'filter' is not null or undefined
        if (filter === null || filter === undefined) {
            throw new Error('Required parameter filter was null or undefined when calling countFiltered.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "InlineResponse200");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in countFiltered!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow POST (Create)
     * @param body
     */
    create(body) {
        const localVarPath = this.basePath + '/RecordOfMaterialEntry';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling create.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'POST',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "RecordOfMaterialEntry")
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "RecordOfMaterialEntry");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in create!`);
                    }
                }
            });
        }));
    }
    /**
     *
     * @param body
     */
    postReadCountQuery(body) {
        const localVarPath = this.basePath + '/RecordOfMaterialEntry/query/count';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling postReadCountQuery.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'POST',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "QueryRequest")
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "InlineResponse200");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in postReadCountQuery!`);
                    }
                }
            });
        }));
    }
    /**
     *
     * @param body
     */
    postReadQuery(body) {
        const localVarPath = this.basePath + '/RecordOfMaterialEntry/query/read';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling postReadQuery.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'POST',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "QueryRequest")
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "Array<RecordOfMaterialEntry>");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in postReadQuery!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow READ
     * @param id ID of record
     */
    read(id) {
        const localVarPath = this.basePath + '/RecordOfMaterialEntry/{id}'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling read.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "RecordOfMaterialEntry");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in read!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow READ list
     * @param begin Beginning (skip) number of records (to page)
     * @param max Maximum number of records to return
     */
    reads(begin, max) {
        const localVarPath = this.basePath + '/RecordOfMaterialEntrys/{begin}/{max}'
            .replace('{' + 'begin' + '}', encodeURIComponent(String(begin)))
            .replace('{' + 'max' + '}', encodeURIComponent(String(max)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'begin' is not null or undefined
        if (begin === null || begin === undefined) {
            throw new Error('Required parameter begin was null or undefined when calling reads.');
        }
        // verify required parameter 'max' is not null or undefined
        if (max === null || max === undefined) {
            throw new Error('Required parameter max was null or undefined when calling reads.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "Array<RecordOfMaterialEntry>");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in reads!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow READ filtered list
     * @param filter FBV meadow filter
     * @param begin Beginning (skip) number of records (to page)
     * @param max Maximum number of records to return
     */
    readsFiltered(filter, begin, max) {
        const localVarPath = this.basePath + '/RecordOfMaterialEntrys/FilteredTo/{filter}/{begin}/{max}'
            .replace('{' + 'filter' + '}', encodeURIComponent(String(filter)))
            .replace('{' + 'begin' + '}', encodeURIComponent(String(begin)))
            .replace('{' + 'max' + '}', encodeURIComponent(String(max)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'filter' is not null or undefined
        if (filter === null || filter === undefined) {
            throw new Error('Required parameter filter was null or undefined when calling readsFiltered.');
        }
        // verify required parameter 'begin' is not null or undefined
        if (begin === null || begin === undefined) {
            throw new Error('Required parameter begin was null or undefined when calling readsFiltered.');
        }
        // verify required parameter 'max' is not null or undefined
        if (max === null || max === undefined) {
            throw new Error('Required parameter max was null or undefined when calling readsFiltered.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "Array<RecordOfMaterialEntry>");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in readsFiltered!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow PUT (Update)
     * @param body
     */
    update(body) {
        const localVarPath = this.basePath + '/RecordOfMaterialEntry';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling update.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'PUT',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "RecordOfMaterialEntry")
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "RecordOfMaterialEntry");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in update!`);
                    }
                }
            });
        }));
    }
    getLastResponse() {
        let response = this._lastResponse;
        this._lastResponse = null;
        return response;
    }
}
exports.RecordOfMaterialEntryApi = RecordOfMaterialEntryApi;
var RecordOfMaterialEntryArchiveApiApiKeys;
(function (RecordOfMaterialEntryArchiveApiApiKeys) {
})(RecordOfMaterialEntryArchiveApiApiKeys = exports.RecordOfMaterialEntryArchiveApiApiKeys || (exports.RecordOfMaterialEntryArchiveApiApiKeys = {}));
class RecordOfMaterialEntryArchiveApi {
    constructor(basePathOrUsername, password, basePath) {
        this._basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this._lastResponse = null;
        this._timeout = DEFAULT_TIMEOUT;
        this.authentications = {
            'default': new VoidAuth(),
        };
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    set useQuerystring(value) {
        this._useQuerystring = value;
    }
    set basePath(basePath) {
        this._basePath = basePath;
    }
    get basePath() {
        return this._basePath;
    }
    set timeout(pTimeout) {
        this._timeout = pTimeout;
    }
    get timeout() {
        return this._timeout;
    }
    setDefaultAuthentication(auth) {
        this.authentications.default = auth;
    }
    setApiKey(key, value) {
        this.authentications[RecordOfMaterialEntryArchiveApiApiKeys[key]].apiKey = value;
    }
    /**
     * Meadow DELETE
     * @param id ID of record
     */
    _delete(id) {
        const localVarPath = this.basePath + '/RecordOfMaterialEntryArchive/{id}'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling _delete.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'DELETE',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "boolean");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in _delete!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow COUNT
     */
    count() {
        const localVarPath = this.basePath + '/RecordOfMaterialEntryArchives/Count';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "InlineResponse200");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in count!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow COUNT with filter
     * @param filter FBV meadow filter
     */
    countFiltered(filter) {
        const localVarPath = this.basePath + '/RecordOfMaterialEntryArchives/FilteredTo/{filter}/Count'
            .replace('{' + 'filter' + '}', encodeURIComponent(String(filter)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'filter' is not null or undefined
        if (filter === null || filter === undefined) {
            throw new Error('Required parameter filter was null or undefined when calling countFiltered.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "InlineResponse200");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in countFiltered!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow POST (Create)
     * @param body
     */
    create(body) {
        const localVarPath = this.basePath + '/RecordOfMaterialEntryArchive';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling create.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'POST',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "RecordOfMaterialEntryArchive")
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "RecordOfMaterialEntryArchive");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in create!`);
                    }
                }
            });
        }));
    }
    /**
     *
     * @param body
     */
    postReadCountQuery(body) {
        const localVarPath = this.basePath + '/RecordOfMaterialEntryArchive/query/count';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling postReadCountQuery.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'POST',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "QueryRequest")
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "InlineResponse200");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in postReadCountQuery!`);
                    }
                }
            });
        }));
    }
    /**
     *
     * @param body
     */
    postReadQuery(body) {
        const localVarPath = this.basePath + '/RecordOfMaterialEntryArchive/query/read';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling postReadQuery.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'POST',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "QueryRequest")
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "Array<RecordOfMaterialEntryArchive>");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in postReadQuery!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow READ
     * @param id ID of record
     */
    read(id) {
        const localVarPath = this.basePath + '/RecordOfMaterialEntryArchive/{id}'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling read.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "RecordOfMaterialEntryArchive");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in read!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow READ list
     * @param begin Beginning (skip) number of records (to page)
     * @param max Maximum number of records to return
     */
    reads(begin, max) {
        const localVarPath = this.basePath + '/RecordOfMaterialEntryArchives/{begin}/{max}'
            .replace('{' + 'begin' + '}', encodeURIComponent(String(begin)))
            .replace('{' + 'max' + '}', encodeURIComponent(String(max)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'begin' is not null or undefined
        if (begin === null || begin === undefined) {
            throw new Error('Required parameter begin was null or undefined when calling reads.');
        }
        // verify required parameter 'max' is not null or undefined
        if (max === null || max === undefined) {
            throw new Error('Required parameter max was null or undefined when calling reads.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "Array<RecordOfMaterialEntryArchive>");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in reads!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow READ filtered list
     * @param filter FBV meadow filter
     * @param begin Beginning (skip) number of records (to page)
     * @param max Maximum number of records to return
     */
    readsFiltered(filter, begin, max) {
        const localVarPath = this.basePath + '/RecordOfMaterialEntryArchives/FilteredTo/{filter}/{begin}/{max}'
            .replace('{' + 'filter' + '}', encodeURIComponent(String(filter)))
            .replace('{' + 'begin' + '}', encodeURIComponent(String(begin)))
            .replace('{' + 'max' + '}', encodeURIComponent(String(max)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'filter' is not null or undefined
        if (filter === null || filter === undefined) {
            throw new Error('Required parameter filter was null or undefined when calling readsFiltered.');
        }
        // verify required parameter 'begin' is not null or undefined
        if (begin === null || begin === undefined) {
            throw new Error('Required parameter begin was null or undefined when calling readsFiltered.');
        }
        // verify required parameter 'max' is not null or undefined
        if (max === null || max === undefined) {
            throw new Error('Required parameter max was null or undefined when calling readsFiltered.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "Array<RecordOfMaterialEntryArchive>");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in readsFiltered!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow PUT (Update)
     * @param body
     */
    update(body) {
        const localVarPath = this.basePath + '/RecordOfMaterialEntryArchive';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling update.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'PUT',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "RecordOfMaterialEntryArchive")
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "RecordOfMaterialEntryArchive");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in update!`);
                    }
                }
            });
        }));
    }
    getLastResponse() {
        let response = this._lastResponse;
        this._lastResponse = null;
        return response;
    }
}
exports.RecordOfMaterialEntryArchiveApi = RecordOfMaterialEntryArchiveApi;
var ReportApiApiKeys;
(function (ReportApiApiKeys) {
})(ReportApiApiKeys = exports.ReportApiApiKeys || (exports.ReportApiApiKeys = {}));
class ReportApi {
    constructor(basePathOrUsername, password, basePath) {
        this._basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this._lastResponse = null;
        this._timeout = DEFAULT_TIMEOUT;
        this.authentications = {
            'default': new VoidAuth(),
        };
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    set useQuerystring(value) {
        this._useQuerystring = value;
    }
    set basePath(basePath) {
        this._basePath = basePath;
    }
    get basePath() {
        return this._basePath;
    }
    set timeout(pTimeout) {
        this._timeout = pTimeout;
    }
    get timeout() {
        return this._timeout;
    }
    setDefaultAuthentication(auth) {
        this.authentications.default = auth;
    }
    setApiKey(key, value) {
        this.authentications[ReportApiApiKeys[key]].apiKey = value;
    }
    /**
     * Meadow DELETE
     * @param id ID of record
     */
    _delete(id) {
        const localVarPath = this.basePath + '/Report/{id}'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling _delete.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'DELETE',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "boolean");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in _delete!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow COUNT
     */
    count() {
        const localVarPath = this.basePath + '/Reports/Count';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "InlineResponse200");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in count!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow COUNT with filter
     * @param filter FBV meadow filter
     */
    countFiltered(filter) {
        const localVarPath = this.basePath + '/Reports/FilteredTo/{filter}/Count'
            .replace('{' + 'filter' + '}', encodeURIComponent(String(filter)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'filter' is not null or undefined
        if (filter === null || filter === undefined) {
            throw new Error('Required parameter filter was null or undefined when calling countFiltered.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "InlineResponse200");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in countFiltered!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow POST (Create)
     * @param body
     */
    create(body) {
        const localVarPath = this.basePath + '/Report';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling create.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'POST',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "ReportModel")
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "ReportModel");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in create!`);
                    }
                }
            });
        }));
    }
    /**
     * Get list of available render types for a document type. (pdf, html, etc.)
     * @param ReportType Report type name (e.g. &#39;DCR&#39;, &#39;Headlight-Daily&#39;, etc)
     */
    getDocumentRenderByType(ReportType) {
        const localVarPath = this.basePath + '/Report/{ReportType}'
            .replace('{' + 'ReportType' + '}', encodeURIComponent(String(ReportType)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'ReportType' is not null or undefined
        if (ReportType === null || ReportType === undefined) {
            throw new Error('Required parameter ReportType was null or undefined when calling getDocumentRenderByType.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in getDocumentRenderByType!`);
                    }
                }
            });
        }));
    }
    /**
     * Request to render a report. To get rendered files, use getReportStageFile() Example HTML flow: 1. Request /Report/Render/1247/default 2. Extract GUIDReportDescription (i.e. \"0x5984be9c8b000000\") from response object. 3. Open a new browser tab to: /Report/0x5984be9c8b000000/ 4. Rendered html page will subsequently request assets (images, css, etc)
     * @param IDDocument ID of record
     * @param Renderer Render format (default, html, pdf, json, etc)
     */
    getRenderReport(IDDocument, Renderer) {
        const localVarPath = this.basePath + '/Report/Render/{IDDocument}/{Renderer}'
            .replace('{' + 'IDDocument' + '}', encodeURIComponent(String(IDDocument)))
            .replace('{' + 'Renderer' + '}', encodeURIComponent(String(Renderer)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'IDDocument' is not null or undefined
        if (IDDocument === null || IDDocument === undefined) {
            throw new Error('Required parameter IDDocument was null or undefined when calling getRenderReport.');
        }
        // verify required parameter 'Renderer' is not null or undefined
        if (Renderer === null || Renderer === undefined) {
            throw new Error('Required parameter Renderer was null or undefined when calling getRenderReport.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "ReportRenderResult");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in getRenderReport!`);
                    }
                }
            });
        }));
    }
    /**
     * Source JSON datum used to generate the report.
     * @param ReportUUID UUID of completed report render.
     */
    getReportDatum(ReportUUID) {
        const localVarPath = this.basePath + '/Report/Datum/{ReportUUID}'
            .replace('{' + 'ReportUUID' + '}', encodeURIComponent(String(ReportUUID)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'ReportUUID' is not null or undefined
        if (ReportUUID === null || ReportUUID === undefined) {
            throw new Error('Required parameter ReportUUID was null or undefined when calling getReportDatum.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in getReportDatum!`);
                    }
                }
            });
        }));
    }
    /**
     * Manifest (JSON metadata file) about the rendered report. Includes information about other generated assets.
     * @param ReportUUID UUID of completed report render.
     */
    getReportManifest(ReportUUID) {
        const localVarPath = this.basePath + '/Report/Manifest/{ReportUUID}'
            .replace('{' + 'ReportUUID' + '}', encodeURIComponent(String(ReportUUID)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'ReportUUID' is not null or undefined
        if (ReportUUID === null || ReportUUID === undefined) {
            throw new Error('Required parameter ReportUUID was null or undefined when calling getReportManifest.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in getReportManifest!`);
                    }
                }
            });
        }));
    }
    /**
     * Get staged (rendered) file for a previously rendered report.
     * @param ReportUUID UUID of completed report render.
     * @param StageFilePath Subpath to file in rendered report stage dir
     */
    getReportStageFile(ReportUUID, StageFilePath) {
        const localVarPath = this.basePath + '/Report/{ReportUUID}/{StageFilePath}'
            .replace('{' + 'ReportUUID' + '}', encodeURIComponent(String(ReportUUID)))
            .replace('{' + 'StageFilePath' + '}', encodeURIComponent(String(StageFilePath)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'ReportUUID' is not null or undefined
        if (ReportUUID === null || ReportUUID === undefined) {
            throw new Error('Required parameter ReportUUID was null or undefined when calling getReportStageFile.');
        }
        // verify required parameter 'StageFilePath' is not null or undefined
        if (StageFilePath === null || StageFilePath === undefined) {
            throw new Error('Required parameter StageFilePath was null or undefined when calling getReportStageFile.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            encoding: null,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "Buffer");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in getReportStageFile!`);
                    }
                }
            });
        }));
    }
    /**
     *
     * @param body
     */
    postReadCountQuery(body) {
        const localVarPath = this.basePath + '/Report/query/count';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling postReadCountQuery.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'POST',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "QueryRequest")
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "InlineResponse200");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in postReadCountQuery!`);
                    }
                }
            });
        }));
    }
    /**
     *
     * @param body
     */
    postReadQuery(body) {
        const localVarPath = this.basePath + '/Report/query/read';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling postReadQuery.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'POST',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "QueryRequest")
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "Array<ReportModel>");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in postReadQuery!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow READ
     * @param id ID of record
     */
    read(id) {
        const localVarPath = this.basePath + '/Report/{id}'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling read.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "ReportModel");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in read!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow READ list
     * @param begin Beginning (skip) number of records (to page)
     * @param max Maximum number of records to return
     */
    reads(begin, max) {
        const localVarPath = this.basePath + '/Reports/{begin}/{max}'
            .replace('{' + 'begin' + '}', encodeURIComponent(String(begin)))
            .replace('{' + 'max' + '}', encodeURIComponent(String(max)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'begin' is not null or undefined
        if (begin === null || begin === undefined) {
            throw new Error('Required parameter begin was null or undefined when calling reads.');
        }
        // verify required parameter 'max' is not null or undefined
        if (max === null || max === undefined) {
            throw new Error('Required parameter max was null or undefined when calling reads.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "Array<ReportModel>");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in reads!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow READ filtered list
     * @param filter FBV meadow filter
     * @param begin Beginning (skip) number of records (to page)
     * @param max Maximum number of records to return
     */
    readsFiltered(filter, begin, max) {
        const localVarPath = this.basePath + '/Reports/FilteredTo/{filter}/{begin}/{max}'
            .replace('{' + 'filter' + '}', encodeURIComponent(String(filter)))
            .replace('{' + 'begin' + '}', encodeURIComponent(String(begin)))
            .replace('{' + 'max' + '}', encodeURIComponent(String(max)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'filter' is not null or undefined
        if (filter === null || filter === undefined) {
            throw new Error('Required parameter filter was null or undefined when calling readsFiltered.');
        }
        // verify required parameter 'begin' is not null or undefined
        if (begin === null || begin === undefined) {
            throw new Error('Required parameter begin was null or undefined when calling readsFiltered.');
        }
        // verify required parameter 'max' is not null or undefined
        if (max === null || max === undefined) {
            throw new Error('Required parameter max was null or undefined when calling readsFiltered.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "Array<ReportModel>");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in readsFiltered!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow PUT (Update)
     * @param body
     */
    update(body) {
        const localVarPath = this.basePath + '/Report';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling update.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'PUT',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "ReportModel")
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "ReportModel");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in update!`);
                    }
                }
            });
        }));
    }
    getLastResponse() {
        let response = this._lastResponse;
        this._lastResponse = null;
        return response;
    }
}
exports.ReportApi = ReportApi;
var ReportNamedInstanceApiApiKeys;
(function (ReportNamedInstanceApiApiKeys) {
})(ReportNamedInstanceApiApiKeys = exports.ReportNamedInstanceApiApiKeys || (exports.ReportNamedInstanceApiApiKeys = {}));
class ReportNamedInstanceApi {
    constructor(basePathOrUsername, password, basePath) {
        this._basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this._lastResponse = null;
        this._timeout = DEFAULT_TIMEOUT;
        this.authentications = {
            'default': new VoidAuth(),
        };
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    set useQuerystring(value) {
        this._useQuerystring = value;
    }
    set basePath(basePath) {
        this._basePath = basePath;
    }
    get basePath() {
        return this._basePath;
    }
    set timeout(pTimeout) {
        this._timeout = pTimeout;
    }
    get timeout() {
        return this._timeout;
    }
    setDefaultAuthentication(auth) {
        this.authentications.default = auth;
    }
    setApiKey(key, value) {
        this.authentications[ReportNamedInstanceApiApiKeys[key]].apiKey = value;
    }
    /**
     * Meadow DELETE
     * @param id ID of record
     */
    _delete(id) {
        const localVarPath = this.basePath + '/ReportNamedInstance/{id}'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling _delete.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'DELETE',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "boolean");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in _delete!`);
                    }
                }
            });
        }));
    }
    /**
     *
     * @param IDProject ID of record
     * @param IDReportNamedInstance ID of record
     */
    addReportNamedInstanceToProject(IDProject, IDReportNamedInstance) {
        const localVarPath = this.basePath + '/ReportNamedInstance/{IDReportNamedInstance}/AddToProject/{IDProject}'
            .replace('{' + 'IDProject' + '}', encodeURIComponent(String(IDProject)))
            .replace('{' + 'IDReportNamedInstance' + '}', encodeURIComponent(String(IDReportNamedInstance)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'IDProject' is not null or undefined
        if (IDProject === null || IDProject === undefined) {
            throw new Error('Required parameter IDProject was null or undefined when calling addReportNamedInstanceToProject.');
        }
        // verify required parameter 'IDReportNamedInstance' is not null or undefined
        if (IDReportNamedInstance === null || IDReportNamedInstance === undefined) {
            throw new Error('Required parameter IDReportNamedInstance was null or undefined when calling addReportNamedInstanceToProject.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in addReportNamedInstanceToProject!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow COUNT
     */
    count() {
        const localVarPath = this.basePath + '/ReportNamedInstances/Count';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "InlineResponse200");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in count!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow COUNT with filter
     * @param filter FBV meadow filter
     */
    countFiltered(filter) {
        const localVarPath = this.basePath + '/ReportNamedInstances/FilteredTo/{filter}/Count'
            .replace('{' + 'filter' + '}', encodeURIComponent(String(filter)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'filter' is not null or undefined
        if (filter === null || filter === undefined) {
            throw new Error('Required parameter filter was null or undefined when calling countFiltered.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "InlineResponse200");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in countFiltered!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow POST (Create)
     * @param body
     */
    create(body) {
        const localVarPath = this.basePath + '/ReportNamedInstance';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling create.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'POST',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "ReportNamedInstanceModel")
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "ReportNamedInstanceModel");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in create!`);
                    }
                }
            });
        }));
    }
    /**
     *
     * @param IDProject ID of record
     * @param Begin Beginning (skip) number of records (to page)
     * @param Cap Maximum number of records to return
     */
    getReportNamedInstanceByProject(IDProject, Begin, Cap) {
        const localVarPath = this.basePath + '/ReportNamedInstancesByProject/{IDProject}/{Begin}/{Cap}'
            .replace('{' + 'IDProject' + '}', encodeURIComponent(String(IDProject)))
            .replace('{' + 'Begin' + '}', encodeURIComponent(String(Begin)))
            .replace('{' + 'Cap' + '}', encodeURIComponent(String(Cap)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'IDProject' is not null or undefined
        if (IDProject === null || IDProject === undefined) {
            throw new Error('Required parameter IDProject was null or undefined when calling getReportNamedInstanceByProject.');
        }
        // verify required parameter 'Begin' is not null or undefined
        if (Begin === null || Begin === undefined) {
            throw new Error('Required parameter Begin was null or undefined when calling getReportNamedInstanceByProject.');
        }
        // verify required parameter 'Cap' is not null or undefined
        if (Cap === null || Cap === undefined) {
            throw new Error('Required parameter Cap was null or undefined when calling getReportNamedInstanceByProject.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in getReportNamedInstanceByProject!`);
                    }
                }
            });
        }));
    }
    /**
     *
     * @param body
     */
    postReadCountQuery(body) {
        const localVarPath = this.basePath + '/ReportNamedInstance/query/count';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling postReadCountQuery.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'POST',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "QueryRequest")
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "InlineResponse200");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in postReadCountQuery!`);
                    }
                }
            });
        }));
    }
    /**
     *
     * @param body
     */
    postReadQuery(body) {
        const localVarPath = this.basePath + '/ReportNamedInstance/query/read';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling postReadQuery.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'POST',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "QueryRequest")
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "Array<ReportNamedInstanceModel>");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in postReadQuery!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow READ
     * @param id ID of record
     */
    read(id) {
        const localVarPath = this.basePath + '/ReportNamedInstance/{id}'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling read.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "ReportNamedInstanceModel");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in read!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow READ list
     * @param begin Beginning (skip) number of records (to page)
     * @param max Maximum number of records to return
     */
    reads(begin, max) {
        const localVarPath = this.basePath + '/ReportNamedInstances/{begin}/{max}'
            .replace('{' + 'begin' + '}', encodeURIComponent(String(begin)))
            .replace('{' + 'max' + '}', encodeURIComponent(String(max)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'begin' is not null or undefined
        if (begin === null || begin === undefined) {
            throw new Error('Required parameter begin was null or undefined when calling reads.');
        }
        // verify required parameter 'max' is not null or undefined
        if (max === null || max === undefined) {
            throw new Error('Required parameter max was null or undefined when calling reads.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "Array<ReportNamedInstanceModel>");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in reads!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow READ filtered list
     * @param filter FBV meadow filter
     * @param begin Beginning (skip) number of records (to page)
     * @param max Maximum number of records to return
     */
    readsFiltered(filter, begin, max) {
        const localVarPath = this.basePath + '/ReportNamedInstances/FilteredTo/{filter}/{begin}/{max}'
            .replace('{' + 'filter' + '}', encodeURIComponent(String(filter)))
            .replace('{' + 'begin' + '}', encodeURIComponent(String(begin)))
            .replace('{' + 'max' + '}', encodeURIComponent(String(max)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'filter' is not null or undefined
        if (filter === null || filter === undefined) {
            throw new Error('Required parameter filter was null or undefined when calling readsFiltered.');
        }
        // verify required parameter 'begin' is not null or undefined
        if (begin === null || begin === undefined) {
            throw new Error('Required parameter begin was null or undefined when calling readsFiltered.');
        }
        // verify required parameter 'max' is not null or undefined
        if (max === null || max === undefined) {
            throw new Error('Required parameter max was null or undefined when calling readsFiltered.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "Array<ReportNamedInstanceModel>");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in readsFiltered!`);
                    }
                }
            });
        }));
    }
    /**
     *
     * @param IDProject ID of record
     * @param IDReportNamedInstance ID of record
     */
    removeReportNamedInstanceFromProject(IDProject, IDReportNamedInstance) {
        const localVarPath = this.basePath + '/ReportNamedInstance/{IDReportNamedInstance}/RemoveFromProject/{IDProject}'
            .replace('{' + 'IDProject' + '}', encodeURIComponent(String(IDProject)))
            .replace('{' + 'IDReportNamedInstance' + '}', encodeURIComponent(String(IDReportNamedInstance)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'IDProject' is not null or undefined
        if (IDProject === null || IDProject === undefined) {
            throw new Error('Required parameter IDProject was null or undefined when calling removeReportNamedInstanceFromProject.');
        }
        // verify required parameter 'IDReportNamedInstance' is not null or undefined
        if (IDReportNamedInstance === null || IDReportNamedInstance === undefined) {
            throw new Error('Required parameter IDReportNamedInstance was null or undefined when calling removeReportNamedInstanceFromProject.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in removeReportNamedInstanceFromProject!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow PUT (Update)
     * @param body
     */
    update(body) {
        const localVarPath = this.basePath + '/ReportNamedInstance';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling update.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'PUT',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "ReportNamedInstanceModel")
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "ReportNamedInstanceModel");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in update!`);
                    }
                }
            });
        }));
    }
    getLastResponse() {
        let response = this._lastResponse;
        this._lastResponse = null;
        return response;
    }
}
exports.ReportNamedInstanceApi = ReportNamedInstanceApi;
var SampleApiApiKeys;
(function (SampleApiApiKeys) {
})(SampleApiApiKeys = exports.SampleApiApiKeys || (exports.SampleApiApiKeys = {}));
class SampleApi {
    constructor(basePathOrUsername, password, basePath) {
        this._basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this._lastResponse = null;
        this._timeout = DEFAULT_TIMEOUT;
        this.authentications = {
            'default': new VoidAuth(),
        };
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    set useQuerystring(value) {
        this._useQuerystring = value;
    }
    set basePath(basePath) {
        this._basePath = basePath;
    }
    get basePath() {
        return this._basePath;
    }
    set timeout(pTimeout) {
        this._timeout = pTimeout;
    }
    get timeout() {
        return this._timeout;
    }
    setDefaultAuthentication(auth) {
        this.authentications.default = auth;
    }
    setApiKey(key, value) {
        this.authentications[SampleApiApiKeys[key]].apiKey = value;
    }
    /**
     * Meadow DELETE
     * @param id ID of record
     */
    _delete(id) {
        const localVarPath = this.basePath + '/Sample/{id}'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling _delete.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'DELETE',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "boolean");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in _delete!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow COUNT
     */
    count() {
        const localVarPath = this.basePath + '/Samples/Count';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "InlineResponse200");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in count!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow COUNT with filter
     * @param filter FBV meadow filter
     */
    countFiltered(filter) {
        const localVarPath = this.basePath + '/Samples/FilteredTo/{filter}/Count'
            .replace('{' + 'filter' + '}', encodeURIComponent(String(filter)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'filter' is not null or undefined
        if (filter === null || filter === undefined) {
            throw new Error('Required parameter filter was null or undefined when calling countFiltered.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "InlineResponse200");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in countFiltered!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow POST (Create)
     * @param body
     */
    create(body) {
        const localVarPath = this.basePath + '/Sample';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling create.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'POST',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "Sample")
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "Sample");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in create!`);
                    }
                }
            });
        }));
    }
    /**
     *
     * @param body
     */
    postReadCountQuery(body) {
        const localVarPath = this.basePath + '/Sample/query/count';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling postReadCountQuery.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'POST',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "QueryRequest")
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "InlineResponse200");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in postReadCountQuery!`);
                    }
                }
            });
        }));
    }
    /**
     *
     * @param body
     */
    postReadQuery(body) {
        const localVarPath = this.basePath + '/Sample/query/read';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling postReadQuery.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'POST',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "QueryRequest")
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "Array<Sample>");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in postReadQuery!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow READ
     * @param id ID of record
     */
    read(id) {
        const localVarPath = this.basePath + '/Sample/{id}'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling read.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "Sample");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in read!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow READ list
     * @param begin Beginning (skip) number of records (to page)
     * @param max Maximum number of records to return
     */
    reads(begin, max) {
        const localVarPath = this.basePath + '/Samples/{begin}/{max}'
            .replace('{' + 'begin' + '}', encodeURIComponent(String(begin)))
            .replace('{' + 'max' + '}', encodeURIComponent(String(max)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'begin' is not null or undefined
        if (begin === null || begin === undefined) {
            throw new Error('Required parameter begin was null or undefined when calling reads.');
        }
        // verify required parameter 'max' is not null or undefined
        if (max === null || max === undefined) {
            throw new Error('Required parameter max was null or undefined when calling reads.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "Array<Sample>");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in reads!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow READ filtered list
     * @param filter FBV meadow filter
     * @param begin Beginning (skip) number of records (to page)
     * @param max Maximum number of records to return
     */
    readsFiltered(filter, begin, max) {
        const localVarPath = this.basePath + '/Samples/FilteredTo/{filter}/{begin}/{max}'
            .replace('{' + 'filter' + '}', encodeURIComponent(String(filter)))
            .replace('{' + 'begin' + '}', encodeURIComponent(String(begin)))
            .replace('{' + 'max' + '}', encodeURIComponent(String(max)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'filter' is not null or undefined
        if (filter === null || filter === undefined) {
            throw new Error('Required parameter filter was null or undefined when calling readsFiltered.');
        }
        // verify required parameter 'begin' is not null or undefined
        if (begin === null || begin === undefined) {
            throw new Error('Required parameter begin was null or undefined when calling readsFiltered.');
        }
        // verify required parameter 'max' is not null or undefined
        if (max === null || max === undefined) {
            throw new Error('Required parameter max was null or undefined when calling readsFiltered.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "Array<Sample>");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in readsFiltered!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow PUT (Update)
     * @param body
     */
    update(body) {
        const localVarPath = this.basePath + '/Sample';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling update.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'PUT',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "Sample")
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "Sample");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in update!`);
                    }
                }
            });
        }));
    }
    getLastResponse() {
        let response = this._lastResponse;
        this._lastResponse = null;
        return response;
    }
}
exports.SampleApi = SampleApi;
var SampleLabJoinApiApiKeys;
(function (SampleLabJoinApiApiKeys) {
})(SampleLabJoinApiApiKeys = exports.SampleLabJoinApiApiKeys || (exports.SampleLabJoinApiApiKeys = {}));
class SampleLabJoinApi {
    constructor(basePathOrUsername, password, basePath) {
        this._basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this._lastResponse = null;
        this._timeout = DEFAULT_TIMEOUT;
        this.authentications = {
            'default': new VoidAuth(),
        };
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    set useQuerystring(value) {
        this._useQuerystring = value;
    }
    set basePath(basePath) {
        this._basePath = basePath;
    }
    get basePath() {
        return this._basePath;
    }
    set timeout(pTimeout) {
        this._timeout = pTimeout;
    }
    get timeout() {
        return this._timeout;
    }
    setDefaultAuthentication(auth) {
        this.authentications.default = auth;
    }
    setApiKey(key, value) {
        this.authentications[SampleLabJoinApiApiKeys[key]].apiKey = value;
    }
    /**
     * Meadow DELETE
     * @param id ID of record
     */
    _delete(id) {
        const localVarPath = this.basePath + '/SampleLabJoin/{id}'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling _delete.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'DELETE',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "boolean");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in _delete!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow COUNT
     */
    count() {
        const localVarPath = this.basePath + '/SampleLabJoins/Count';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "InlineResponse200");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in count!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow COUNT with filter
     * @param filter FBV meadow filter
     */
    countFiltered(filter) {
        const localVarPath = this.basePath + '/SampleLabJoins/FilteredTo/{filter}/Count'
            .replace('{' + 'filter' + '}', encodeURIComponent(String(filter)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'filter' is not null or undefined
        if (filter === null || filter === undefined) {
            throw new Error('Required parameter filter was null or undefined when calling countFiltered.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "InlineResponse200");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in countFiltered!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow POST (Create)
     * @param body
     */
    create(body) {
        const localVarPath = this.basePath + '/SampleLabJoin';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling create.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'POST',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "SampleLabJoin")
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "SampleLabJoin");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in create!`);
                    }
                }
            });
        }));
    }
    /**
     *
     * @param body
     */
    postReadCountQuery(body) {
        const localVarPath = this.basePath + '/SampleLabJoin/query/count';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling postReadCountQuery.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'POST',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "QueryRequest")
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "InlineResponse200");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in postReadCountQuery!`);
                    }
                }
            });
        }));
    }
    /**
     *
     * @param body
     */
    postReadQuery(body) {
        const localVarPath = this.basePath + '/SampleLabJoin/query/read';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling postReadQuery.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'POST',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "QueryRequest")
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "Array<SampleLabJoin>");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in postReadQuery!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow READ
     * @param id ID of record
     */
    read(id) {
        const localVarPath = this.basePath + '/SampleLabJoin/{id}'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling read.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "SampleLabJoin");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in read!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow READ list
     * @param begin Beginning (skip) number of records (to page)
     * @param max Maximum number of records to return
     */
    reads(begin, max) {
        const localVarPath = this.basePath + '/SampleLabJoins/{begin}/{max}'
            .replace('{' + 'begin' + '}', encodeURIComponent(String(begin)))
            .replace('{' + 'max' + '}', encodeURIComponent(String(max)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'begin' is not null or undefined
        if (begin === null || begin === undefined) {
            throw new Error('Required parameter begin was null or undefined when calling reads.');
        }
        // verify required parameter 'max' is not null or undefined
        if (max === null || max === undefined) {
            throw new Error('Required parameter max was null or undefined when calling reads.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "Array<SampleLabJoin>");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in reads!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow READ filtered list
     * @param filter FBV meadow filter
     * @param begin Beginning (skip) number of records (to page)
     * @param max Maximum number of records to return
     */
    readsFiltered(filter, begin, max) {
        const localVarPath = this.basePath + '/SampleLabJoins/FilteredTo/{filter}/{begin}/{max}'
            .replace('{' + 'filter' + '}', encodeURIComponent(String(filter)))
            .replace('{' + 'begin' + '}', encodeURIComponent(String(begin)))
            .replace('{' + 'max' + '}', encodeURIComponent(String(max)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'filter' is not null or undefined
        if (filter === null || filter === undefined) {
            throw new Error('Required parameter filter was null or undefined when calling readsFiltered.');
        }
        // verify required parameter 'begin' is not null or undefined
        if (begin === null || begin === undefined) {
            throw new Error('Required parameter begin was null or undefined when calling readsFiltered.');
        }
        // verify required parameter 'max' is not null or undefined
        if (max === null || max === undefined) {
            throw new Error('Required parameter max was null or undefined when calling readsFiltered.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "Array<SampleLabJoin>");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in readsFiltered!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow PUT (Update)
     * @param body
     */
    update(body) {
        const localVarPath = this.basePath + '/SampleLabJoin';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling update.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'PUT',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "SampleLabJoin")
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "SampleLabJoin");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in update!`);
                    }
                }
            });
        }));
    }
    getLastResponse() {
        let response = this._lastResponse;
        this._lastResponse = null;
        return response;
    }
}
exports.SampleLabJoinApi = SampleLabJoinApi;
var SampleLineItemJoinApiApiKeys;
(function (SampleLineItemJoinApiApiKeys) {
})(SampleLineItemJoinApiApiKeys = exports.SampleLineItemJoinApiApiKeys || (exports.SampleLineItemJoinApiApiKeys = {}));
class SampleLineItemJoinApi {
    constructor(basePathOrUsername, password, basePath) {
        this._basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this._lastResponse = null;
        this._timeout = DEFAULT_TIMEOUT;
        this.authentications = {
            'default': new VoidAuth(),
        };
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    set useQuerystring(value) {
        this._useQuerystring = value;
    }
    set basePath(basePath) {
        this._basePath = basePath;
    }
    get basePath() {
        return this._basePath;
    }
    set timeout(pTimeout) {
        this._timeout = pTimeout;
    }
    get timeout() {
        return this._timeout;
    }
    setDefaultAuthentication(auth) {
        this.authentications.default = auth;
    }
    setApiKey(key, value) {
        this.authentications[SampleLineItemJoinApiApiKeys[key]].apiKey = value;
    }
    /**
     * Meadow DELETE
     * @param id ID of record
     */
    _delete(id) {
        const localVarPath = this.basePath + '/SampleLineItemJoin/{id}'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling _delete.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'DELETE',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "boolean");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in _delete!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow COUNT
     */
    count() {
        const localVarPath = this.basePath + '/SampleLineItemJoins/Count';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "InlineResponse200");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in count!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow COUNT with filter
     * @param filter FBV meadow filter
     */
    countFiltered(filter) {
        const localVarPath = this.basePath + '/SampleLineItemJoins/FilteredTo/{filter}/Count'
            .replace('{' + 'filter' + '}', encodeURIComponent(String(filter)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'filter' is not null or undefined
        if (filter === null || filter === undefined) {
            throw new Error('Required parameter filter was null or undefined when calling countFiltered.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "InlineResponse200");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in countFiltered!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow POST (Create)
     * @param body
     */
    create(body) {
        const localVarPath = this.basePath + '/SampleLineItemJoin';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling create.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'POST',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "SampleLineItemJoin")
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "SampleLineItemJoin");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in create!`);
                    }
                }
            });
        }));
    }
    /**
     *
     * @param body
     */
    postReadCountQuery(body) {
        const localVarPath = this.basePath + '/SampleLineItemJoin/query/count';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling postReadCountQuery.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'POST',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "QueryRequest")
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "InlineResponse200");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in postReadCountQuery!`);
                    }
                }
            });
        }));
    }
    /**
     *
     * @param body
     */
    postReadQuery(body) {
        const localVarPath = this.basePath + '/SampleLineItemJoin/query/read';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling postReadQuery.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'POST',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "QueryRequest")
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "Array<SampleLineItemJoin>");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in postReadQuery!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow READ
     * @param id ID of record
     */
    read(id) {
        const localVarPath = this.basePath + '/SampleLineItemJoin/{id}'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling read.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "SampleLineItemJoin");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in read!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow READ list
     * @param begin Beginning (skip) number of records (to page)
     * @param max Maximum number of records to return
     */
    reads(begin, max) {
        const localVarPath = this.basePath + '/SampleLineItemJoins/{begin}/{max}'
            .replace('{' + 'begin' + '}', encodeURIComponent(String(begin)))
            .replace('{' + 'max' + '}', encodeURIComponent(String(max)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'begin' is not null or undefined
        if (begin === null || begin === undefined) {
            throw new Error('Required parameter begin was null or undefined when calling reads.');
        }
        // verify required parameter 'max' is not null or undefined
        if (max === null || max === undefined) {
            throw new Error('Required parameter max was null or undefined when calling reads.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "Array<SampleLineItemJoin>");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in reads!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow READ filtered list
     * @param filter FBV meadow filter
     * @param begin Beginning (skip) number of records (to page)
     * @param max Maximum number of records to return
     */
    readsFiltered(filter, begin, max) {
        const localVarPath = this.basePath + '/SampleLineItemJoins/FilteredTo/{filter}/{begin}/{max}'
            .replace('{' + 'filter' + '}', encodeURIComponent(String(filter)))
            .replace('{' + 'begin' + '}', encodeURIComponent(String(begin)))
            .replace('{' + 'max' + '}', encodeURIComponent(String(max)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'filter' is not null or undefined
        if (filter === null || filter === undefined) {
            throw new Error('Required parameter filter was null or undefined when calling readsFiltered.');
        }
        // verify required parameter 'begin' is not null or undefined
        if (begin === null || begin === undefined) {
            throw new Error('Required parameter begin was null or undefined when calling readsFiltered.');
        }
        // verify required parameter 'max' is not null or undefined
        if (max === null || max === undefined) {
            throw new Error('Required parameter max was null or undefined when calling readsFiltered.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "Array<SampleLineItemJoin>");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in readsFiltered!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow PUT (Update)
     * @param body
     */
    update(body) {
        const localVarPath = this.basePath + '/SampleLineItemJoin';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling update.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'PUT',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "SampleLineItemJoin")
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "SampleLineItemJoin");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in update!`);
                    }
                }
            });
        }));
    }
    getLastResponse() {
        let response = this._lastResponse;
        this._lastResponse = null;
        return response;
    }
}
exports.SampleLineItemJoinApi = SampleLineItemJoinApi;
var SampleLogApiApiKeys;
(function (SampleLogApiApiKeys) {
})(SampleLogApiApiKeys = exports.SampleLogApiApiKeys || (exports.SampleLogApiApiKeys = {}));
class SampleLogApi {
    constructor(basePathOrUsername, password, basePath) {
        this._basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this._lastResponse = null;
        this._timeout = DEFAULT_TIMEOUT;
        this.authentications = {
            'default': new VoidAuth(),
        };
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    set useQuerystring(value) {
        this._useQuerystring = value;
    }
    set basePath(basePath) {
        this._basePath = basePath;
    }
    get basePath() {
        return this._basePath;
    }
    set timeout(pTimeout) {
        this._timeout = pTimeout;
    }
    get timeout() {
        return this._timeout;
    }
    setDefaultAuthentication(auth) {
        this.authentications.default = auth;
    }
    setApiKey(key, value) {
        this.authentications[SampleLogApiApiKeys[key]].apiKey = value;
    }
    /**
     * Meadow DELETE
     * @param id ID of record
     */
    _delete(id) {
        const localVarPath = this.basePath + '/SampleLog/{id}'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling _delete.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'DELETE',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "boolean");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in _delete!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow COUNT
     */
    count() {
        const localVarPath = this.basePath + '/SampleLogs/Count';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "InlineResponse200");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in count!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow COUNT with filter
     * @param filter FBV meadow filter
     */
    countFiltered(filter) {
        const localVarPath = this.basePath + '/SampleLogs/FilteredTo/{filter}/Count'
            .replace('{' + 'filter' + '}', encodeURIComponent(String(filter)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'filter' is not null or undefined
        if (filter === null || filter === undefined) {
            throw new Error('Required parameter filter was null or undefined when calling countFiltered.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "InlineResponse200");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in countFiltered!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow POST (Create)
     * @param body
     */
    create(body) {
        const localVarPath = this.basePath + '/SampleLog';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling create.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'POST',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "SampleLog")
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "SampleLog");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in create!`);
                    }
                }
            });
        }));
    }
    /**
     *
     * @param body
     */
    postReadCountQuery(body) {
        const localVarPath = this.basePath + '/SampleLog/query/count';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling postReadCountQuery.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'POST',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "QueryRequest")
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "InlineResponse200");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in postReadCountQuery!`);
                    }
                }
            });
        }));
    }
    /**
     *
     * @param body
     */
    postReadQuery(body) {
        const localVarPath = this.basePath + '/SampleLog/query/read';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling postReadQuery.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'POST',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "QueryRequest")
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "Array<SampleLog>");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in postReadQuery!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow READ
     * @param id ID of record
     */
    read(id) {
        const localVarPath = this.basePath + '/SampleLog/{id}'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling read.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "SampleLog");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in read!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow READ list
     * @param begin Beginning (skip) number of records (to page)
     * @param max Maximum number of records to return
     */
    reads(begin, max) {
        const localVarPath = this.basePath + '/SampleLogs/{begin}/{max}'
            .replace('{' + 'begin' + '}', encodeURIComponent(String(begin)))
            .replace('{' + 'max' + '}', encodeURIComponent(String(max)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'begin' is not null or undefined
        if (begin === null || begin === undefined) {
            throw new Error('Required parameter begin was null or undefined when calling reads.');
        }
        // verify required parameter 'max' is not null or undefined
        if (max === null || max === undefined) {
            throw new Error('Required parameter max was null or undefined when calling reads.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "Array<SampleLog>");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in reads!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow READ filtered list
     * @param filter FBV meadow filter
     * @param begin Beginning (skip) number of records (to page)
     * @param max Maximum number of records to return
     */
    readsFiltered(filter, begin, max) {
        const localVarPath = this.basePath + '/SampleLogs/FilteredTo/{filter}/{begin}/{max}'
            .replace('{' + 'filter' + '}', encodeURIComponent(String(filter)))
            .replace('{' + 'begin' + '}', encodeURIComponent(String(begin)))
            .replace('{' + 'max' + '}', encodeURIComponent(String(max)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'filter' is not null or undefined
        if (filter === null || filter === undefined) {
            throw new Error('Required parameter filter was null or undefined when calling readsFiltered.');
        }
        // verify required parameter 'begin' is not null or undefined
        if (begin === null || begin === undefined) {
            throw new Error('Required parameter begin was null or undefined when calling readsFiltered.');
        }
        // verify required parameter 'max' is not null or undefined
        if (max === null || max === undefined) {
            throw new Error('Required parameter max was null or undefined when calling readsFiltered.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "Array<SampleLog>");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in readsFiltered!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow PUT (Update)
     * @param body
     */
    update(body) {
        const localVarPath = this.basePath + '/SampleLog';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling update.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'PUT',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "SampleLog")
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "SampleLog");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in update!`);
                    }
                }
            });
        }));
    }
    getLastResponse() {
        let response = this._lastResponse;
        this._lastResponse = null;
        return response;
    }
}
exports.SampleLogApi = SampleLogApi;
var TestApiApiKeys;
(function (TestApiApiKeys) {
})(TestApiApiKeys = exports.TestApiApiKeys || (exports.TestApiApiKeys = {}));
class TestApi {
    constructor(basePathOrUsername, password, basePath) {
        this._basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this._lastResponse = null;
        this._timeout = DEFAULT_TIMEOUT;
        this.authentications = {
            'default': new VoidAuth(),
        };
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    set useQuerystring(value) {
        this._useQuerystring = value;
    }
    set basePath(basePath) {
        this._basePath = basePath;
    }
    get basePath() {
        return this._basePath;
    }
    set timeout(pTimeout) {
        this._timeout = pTimeout;
    }
    get timeout() {
        return this._timeout;
    }
    setDefaultAuthentication(auth) {
        this.authentications.default = auth;
    }
    setApiKey(key, value) {
        this.authentications[TestApiApiKeys[key]].apiKey = value;
    }
    /**
     * Meadow DELETE
     * @param id ID of record
     */
    _delete(id) {
        const localVarPath = this.basePath + '/Test/{id}'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling _delete.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'DELETE',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "boolean");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in _delete!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow COUNT
     */
    count() {
        const localVarPath = this.basePath + '/Tests/Count';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "InlineResponse200");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in count!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow COUNT with filter
     * @param filter FBV meadow filter
     */
    countFiltered(filter) {
        const localVarPath = this.basePath + '/Tests/FilteredTo/{filter}/Count'
            .replace('{' + 'filter' + '}', encodeURIComponent(String(filter)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'filter' is not null or undefined
        if (filter === null || filter === undefined) {
            throw new Error('Required parameter filter was null or undefined when calling countFiltered.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "InlineResponse200");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in countFiltered!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow POST (Create)
     * @param body
     */
    create(body) {
        const localVarPath = this.basePath + '/Test';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling create.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'POST',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "Test")
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "Test");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in create!`);
                    }
                }
            });
        }));
    }
    /**
     *
     * @param body
     */
    postReadCountQuery(body) {
        const localVarPath = this.basePath + '/Test/query/count';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling postReadCountQuery.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'POST',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "QueryRequest")
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "InlineResponse200");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in postReadCountQuery!`);
                    }
                }
            });
        }));
    }
    /**
     *
     * @param body
     */
    postReadQuery(body) {
        const localVarPath = this.basePath + '/Test/query/read';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling postReadQuery.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'POST',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "QueryRequest")
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "Array<Test>");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in postReadQuery!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow READ
     * @param id ID of record
     */
    read(id) {
        const localVarPath = this.basePath + '/Test/{id}'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling read.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "Test");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in read!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow READ list
     * @param begin Beginning (skip) number of records (to page)
     * @param max Maximum number of records to return
     */
    reads(begin, max) {
        const localVarPath = this.basePath + '/Tests/{begin}/{max}'
            .replace('{' + 'begin' + '}', encodeURIComponent(String(begin)))
            .replace('{' + 'max' + '}', encodeURIComponent(String(max)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'begin' is not null or undefined
        if (begin === null || begin === undefined) {
            throw new Error('Required parameter begin was null or undefined when calling reads.');
        }
        // verify required parameter 'max' is not null or undefined
        if (max === null || max === undefined) {
            throw new Error('Required parameter max was null or undefined when calling reads.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "Array<Test>");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in reads!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow READ filtered list
     * @param filter FBV meadow filter
     * @param begin Beginning (skip) number of records (to page)
     * @param max Maximum number of records to return
     */
    readsFiltered(filter, begin, max) {
        const localVarPath = this.basePath + '/Tests/FilteredTo/{filter}/{begin}/{max}'
            .replace('{' + 'filter' + '}', encodeURIComponent(String(filter)))
            .replace('{' + 'begin' + '}', encodeURIComponent(String(begin)))
            .replace('{' + 'max' + '}', encodeURIComponent(String(max)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'filter' is not null or undefined
        if (filter === null || filter === undefined) {
            throw new Error('Required parameter filter was null or undefined when calling readsFiltered.');
        }
        // verify required parameter 'begin' is not null or undefined
        if (begin === null || begin === undefined) {
            throw new Error('Required parameter begin was null or undefined when calling readsFiltered.');
        }
        // verify required parameter 'max' is not null or undefined
        if (max === null || max === undefined) {
            throw new Error('Required parameter max was null or undefined when calling readsFiltered.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "Array<Test>");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in readsFiltered!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow PUT (Update)
     * @param body
     */
    update(body) {
        const localVarPath = this.basePath + '/Test';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling update.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'PUT',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "Test")
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "Test");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in update!`);
                    }
                }
            });
        }));
    }
    getLastResponse() {
        let response = this._lastResponse;
        this._lastResponse = null;
        return response;
    }
}
exports.TestApi = TestApi;
var TestDataApiApiKeys;
(function (TestDataApiApiKeys) {
})(TestDataApiApiKeys = exports.TestDataApiApiKeys || (exports.TestDataApiApiKeys = {}));
class TestDataApi {
    constructor(basePathOrUsername, password, basePath) {
        this._basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this._lastResponse = null;
        this._timeout = DEFAULT_TIMEOUT;
        this.authentications = {
            'default': new VoidAuth(),
        };
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    set useQuerystring(value) {
        this._useQuerystring = value;
    }
    set basePath(basePath) {
        this._basePath = basePath;
    }
    get basePath() {
        return this._basePath;
    }
    set timeout(pTimeout) {
        this._timeout = pTimeout;
    }
    get timeout() {
        return this._timeout;
    }
    setDefaultAuthentication(auth) {
        this.authentications.default = auth;
    }
    setApiKey(key, value) {
        this.authentications[TestDataApiApiKeys[key]].apiKey = value;
    }
    /**
     * Meadow DELETE
     * @param id ID of record
     */
    _delete(id) {
        const localVarPath = this.basePath + '/TestData/{id}'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling _delete.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'DELETE',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "boolean");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in _delete!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow COUNT
     */
    count() {
        const localVarPath = this.basePath + '/TestDatas/Count';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "InlineResponse200");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in count!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow COUNT with filter
     * @param filter FBV meadow filter
     */
    countFiltered(filter) {
        const localVarPath = this.basePath + '/TestDatas/FilteredTo/{filter}/Count'
            .replace('{' + 'filter' + '}', encodeURIComponent(String(filter)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'filter' is not null or undefined
        if (filter === null || filter === undefined) {
            throw new Error('Required parameter filter was null or undefined when calling countFiltered.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "InlineResponse200");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in countFiltered!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow POST (Create)
     * @param body
     */
    create(body) {
        const localVarPath = this.basePath + '/TestData';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling create.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'POST',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "TestData")
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "TestData");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in create!`);
                    }
                }
            });
        }));
    }
    /**
     *
     * @param body
     */
    postReadCountQuery(body) {
        const localVarPath = this.basePath + '/TestData/query/count';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling postReadCountQuery.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'POST',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "QueryRequest")
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "InlineResponse200");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in postReadCountQuery!`);
                    }
                }
            });
        }));
    }
    /**
     *
     * @param body
     */
    postReadQuery(body) {
        const localVarPath = this.basePath + '/TestData/query/read';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling postReadQuery.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'POST',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "QueryRequest")
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "Array<TestData>");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in postReadQuery!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow READ
     * @param id ID of record
     */
    read(id) {
        const localVarPath = this.basePath + '/TestData/{id}'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling read.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "TestData");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in read!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow READ list
     * @param begin Beginning (skip) number of records (to page)
     * @param max Maximum number of records to return
     */
    reads(begin, max) {
        const localVarPath = this.basePath + '/TestDatas/{begin}/{max}'
            .replace('{' + 'begin' + '}', encodeURIComponent(String(begin)))
            .replace('{' + 'max' + '}', encodeURIComponent(String(max)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'begin' is not null or undefined
        if (begin === null || begin === undefined) {
            throw new Error('Required parameter begin was null or undefined when calling reads.');
        }
        // verify required parameter 'max' is not null or undefined
        if (max === null || max === undefined) {
            throw new Error('Required parameter max was null or undefined when calling reads.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "Array<TestData>");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in reads!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow READ filtered list
     * @param filter FBV meadow filter
     * @param begin Beginning (skip) number of records (to page)
     * @param max Maximum number of records to return
     */
    readsFiltered(filter, begin, max) {
        const localVarPath = this.basePath + '/TestDatas/FilteredTo/{filter}/{begin}/{max}'
            .replace('{' + 'filter' + '}', encodeURIComponent(String(filter)))
            .replace('{' + 'begin' + '}', encodeURIComponent(String(begin)))
            .replace('{' + 'max' + '}', encodeURIComponent(String(max)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'filter' is not null or undefined
        if (filter === null || filter === undefined) {
            throw new Error('Required parameter filter was null or undefined when calling readsFiltered.');
        }
        // verify required parameter 'begin' is not null or undefined
        if (begin === null || begin === undefined) {
            throw new Error('Required parameter begin was null or undefined when calling readsFiltered.');
        }
        // verify required parameter 'max' is not null or undefined
        if (max === null || max === undefined) {
            throw new Error('Required parameter max was null or undefined when calling readsFiltered.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "Array<TestData>");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in readsFiltered!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow PUT (Update)
     * @param body
     */
    update(body) {
        const localVarPath = this.basePath + '/TestData';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling update.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'PUT',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "TestData")
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "TestData");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in update!`);
                    }
                }
            });
        }));
    }
    getLastResponse() {
        let response = this._lastResponse;
        this._lastResponse = null;
        return response;
    }
}
exports.TestDataApi = TestDataApi;
var TestInstanceApiApiKeys;
(function (TestInstanceApiApiKeys) {
})(TestInstanceApiApiKeys = exports.TestInstanceApiApiKeys || (exports.TestInstanceApiApiKeys = {}));
class TestInstanceApi {
    constructor(basePathOrUsername, password, basePath) {
        this._basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this._lastResponse = null;
        this._timeout = DEFAULT_TIMEOUT;
        this.authentications = {
            'default': new VoidAuth(),
        };
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    set useQuerystring(value) {
        this._useQuerystring = value;
    }
    set basePath(basePath) {
        this._basePath = basePath;
    }
    get basePath() {
        return this._basePath;
    }
    set timeout(pTimeout) {
        this._timeout = pTimeout;
    }
    get timeout() {
        return this._timeout;
    }
    setDefaultAuthentication(auth) {
        this.authentications.default = auth;
    }
    setApiKey(key, value) {
        this.authentications[TestInstanceApiApiKeys[key]].apiKey = value;
    }
    /**
     * Meadow DELETE
     * @param id ID of record
     */
    _delete(id) {
        const localVarPath = this.basePath + '/TestInstance/{id}'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling _delete.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'DELETE',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "boolean");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in _delete!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow COUNT
     */
    count() {
        const localVarPath = this.basePath + '/TestInstances/Count';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "InlineResponse200");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in count!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow COUNT with filter
     * @param filter FBV meadow filter
     */
    countFiltered(filter) {
        const localVarPath = this.basePath + '/TestInstances/FilteredTo/{filter}/Count'
            .replace('{' + 'filter' + '}', encodeURIComponent(String(filter)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'filter' is not null or undefined
        if (filter === null || filter === undefined) {
            throw new Error('Required parameter filter was null or undefined when calling countFiltered.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "InlineResponse200");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in countFiltered!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow POST (Create)
     * @param body
     */
    create(body) {
        const localVarPath = this.basePath + '/TestInstance';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling create.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'POST',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "TestInstance")
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "TestInstance");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in create!`);
                    }
                }
            });
        }));
    }
    /**
     *
     * @param body
     */
    postReadCountQuery(body) {
        const localVarPath = this.basePath + '/TestInstance/query/count';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling postReadCountQuery.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'POST',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "QueryRequest")
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "InlineResponse200");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in postReadCountQuery!`);
                    }
                }
            });
        }));
    }
    /**
     *
     * @param body
     */
    postReadQuery(body) {
        const localVarPath = this.basePath + '/TestInstance/query/read';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling postReadQuery.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'POST',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "QueryRequest")
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "Array<TestInstance>");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in postReadQuery!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow READ
     * @param id ID of record
     */
    read(id) {
        const localVarPath = this.basePath + '/TestInstance/{id}'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling read.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "TestInstance");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in read!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow READ list
     * @param begin Beginning (skip) number of records (to page)
     * @param max Maximum number of records to return
     */
    reads(begin, max) {
        const localVarPath = this.basePath + '/TestInstances/{begin}/{max}'
            .replace('{' + 'begin' + '}', encodeURIComponent(String(begin)))
            .replace('{' + 'max' + '}', encodeURIComponent(String(max)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'begin' is not null or undefined
        if (begin === null || begin === undefined) {
            throw new Error('Required parameter begin was null or undefined when calling reads.');
        }
        // verify required parameter 'max' is not null or undefined
        if (max === null || max === undefined) {
            throw new Error('Required parameter max was null or undefined when calling reads.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "Array<TestInstance>");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in reads!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow READ filtered list
     * @param filter FBV meadow filter
     * @param begin Beginning (skip) number of records (to page)
     * @param max Maximum number of records to return
     */
    readsFiltered(filter, begin, max) {
        const localVarPath = this.basePath + '/TestInstances/FilteredTo/{filter}/{begin}/{max}'
            .replace('{' + 'filter' + '}', encodeURIComponent(String(filter)))
            .replace('{' + 'begin' + '}', encodeURIComponent(String(begin)))
            .replace('{' + 'max' + '}', encodeURIComponent(String(max)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'filter' is not null or undefined
        if (filter === null || filter === undefined) {
            throw new Error('Required parameter filter was null or undefined when calling readsFiltered.');
        }
        // verify required parameter 'begin' is not null or undefined
        if (begin === null || begin === undefined) {
            throw new Error('Required parameter begin was null or undefined when calling readsFiltered.');
        }
        // verify required parameter 'max' is not null or undefined
        if (max === null || max === undefined) {
            throw new Error('Required parameter max was null or undefined when calling readsFiltered.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "Array<TestInstance>");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in readsFiltered!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow PUT (Update)
     * @param body
     */
    update(body) {
        const localVarPath = this.basePath + '/TestInstance';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling update.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'PUT',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "TestInstance")
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "TestInstance");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in update!`);
                    }
                }
            });
        }));
    }
    getLastResponse() {
        let response = this._lastResponse;
        this._lastResponse = null;
        return response;
    }
}
exports.TestInstanceApi = TestInstanceApi;
var TestInstanceDataApiApiKeys;
(function (TestInstanceDataApiApiKeys) {
})(TestInstanceDataApiApiKeys = exports.TestInstanceDataApiApiKeys || (exports.TestInstanceDataApiApiKeys = {}));
class TestInstanceDataApi {
    constructor(basePathOrUsername, password, basePath) {
        this._basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this._lastResponse = null;
        this._timeout = DEFAULT_TIMEOUT;
        this.authentications = {
            'default': new VoidAuth(),
        };
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    set useQuerystring(value) {
        this._useQuerystring = value;
    }
    set basePath(basePath) {
        this._basePath = basePath;
    }
    get basePath() {
        return this._basePath;
    }
    set timeout(pTimeout) {
        this._timeout = pTimeout;
    }
    get timeout() {
        return this._timeout;
    }
    setDefaultAuthentication(auth) {
        this.authentications.default = auth;
    }
    setApiKey(key, value) {
        this.authentications[TestInstanceDataApiApiKeys[key]].apiKey = value;
    }
    /**
     * Meadow DELETE
     * @param id ID of record
     */
    _delete(id) {
        const localVarPath = this.basePath + '/TestInstanceData/{id}'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling _delete.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'DELETE',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "boolean");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in _delete!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow COUNT
     */
    count() {
        const localVarPath = this.basePath + '/TestInstanceDatas/Count';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "InlineResponse200");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in count!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow COUNT with filter
     * @param filter FBV meadow filter
     */
    countFiltered(filter) {
        const localVarPath = this.basePath + '/TestInstanceDatas/FilteredTo/{filter}/Count'
            .replace('{' + 'filter' + '}', encodeURIComponent(String(filter)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'filter' is not null or undefined
        if (filter === null || filter === undefined) {
            throw new Error('Required parameter filter was null or undefined when calling countFiltered.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "InlineResponse200");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in countFiltered!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow POST (Create)
     * @param body
     */
    create(body) {
        const localVarPath = this.basePath + '/TestInstanceData';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling create.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'POST',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "TestInstanceData")
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "TestInstanceData");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in create!`);
                    }
                }
            });
        }));
    }
    /**
     *
     * @param body
     */
    postReadCountQuery(body) {
        const localVarPath = this.basePath + '/TestInstanceData/query/count';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling postReadCountQuery.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'POST',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "QueryRequest")
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "InlineResponse200");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in postReadCountQuery!`);
                    }
                }
            });
        }));
    }
    /**
     *
     * @param body
     */
    postReadQuery(body) {
        const localVarPath = this.basePath + '/TestInstanceData/query/read';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling postReadQuery.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'POST',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "QueryRequest")
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "Array<TestInstanceData>");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in postReadQuery!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow READ
     * @param id ID of record
     */
    read(id) {
        const localVarPath = this.basePath + '/TestInstanceData/{id}'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling read.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "TestInstanceData");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in read!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow READ list
     * @param begin Beginning (skip) number of records (to page)
     * @param max Maximum number of records to return
     */
    reads(begin, max) {
        const localVarPath = this.basePath + '/TestInstanceDatas/{begin}/{max}'
            .replace('{' + 'begin' + '}', encodeURIComponent(String(begin)))
            .replace('{' + 'max' + '}', encodeURIComponent(String(max)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'begin' is not null or undefined
        if (begin === null || begin === undefined) {
            throw new Error('Required parameter begin was null or undefined when calling reads.');
        }
        // verify required parameter 'max' is not null or undefined
        if (max === null || max === undefined) {
            throw new Error('Required parameter max was null or undefined when calling reads.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "Array<TestInstanceData>");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in reads!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow READ filtered list
     * @param filter FBV meadow filter
     * @param begin Beginning (skip) number of records (to page)
     * @param max Maximum number of records to return
     */
    readsFiltered(filter, begin, max) {
        const localVarPath = this.basePath + '/TestInstanceDatas/FilteredTo/{filter}/{begin}/{max}'
            .replace('{' + 'filter' + '}', encodeURIComponent(String(filter)))
            .replace('{' + 'begin' + '}', encodeURIComponent(String(begin)))
            .replace('{' + 'max' + '}', encodeURIComponent(String(max)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'filter' is not null or undefined
        if (filter === null || filter === undefined) {
            throw new Error('Required parameter filter was null or undefined when calling readsFiltered.');
        }
        // verify required parameter 'begin' is not null or undefined
        if (begin === null || begin === undefined) {
            throw new Error('Required parameter begin was null or undefined when calling readsFiltered.');
        }
        // verify required parameter 'max' is not null or undefined
        if (max === null || max === undefined) {
            throw new Error('Required parameter max was null or undefined when calling readsFiltered.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "Array<TestInstanceData>");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in readsFiltered!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow PUT (Update)
     * @param body
     */
    update(body) {
        const localVarPath = this.basePath + '/TestInstanceData';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling update.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'PUT',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "TestInstanceData")
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "TestInstanceData");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in update!`);
                    }
                }
            });
        }));
    }
    getLastResponse() {
        let response = this._lastResponse;
        this._lastResponse = null;
        return response;
    }
}
exports.TestInstanceDataApi = TestInstanceDataApi;
var TestInstanceDataArchiveApiApiKeys;
(function (TestInstanceDataArchiveApiApiKeys) {
})(TestInstanceDataArchiveApiApiKeys = exports.TestInstanceDataArchiveApiApiKeys || (exports.TestInstanceDataArchiveApiApiKeys = {}));
class TestInstanceDataArchiveApi {
    constructor(basePathOrUsername, password, basePath) {
        this._basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this._lastResponse = null;
        this._timeout = DEFAULT_TIMEOUT;
        this.authentications = {
            'default': new VoidAuth(),
        };
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    set useQuerystring(value) {
        this._useQuerystring = value;
    }
    set basePath(basePath) {
        this._basePath = basePath;
    }
    get basePath() {
        return this._basePath;
    }
    set timeout(pTimeout) {
        this._timeout = pTimeout;
    }
    get timeout() {
        return this._timeout;
    }
    setDefaultAuthentication(auth) {
        this.authentications.default = auth;
    }
    setApiKey(key, value) {
        this.authentications[TestInstanceDataArchiveApiApiKeys[key]].apiKey = value;
    }
    /**
     * Meadow DELETE
     * @param id ID of record
     */
    _delete(id) {
        const localVarPath = this.basePath + '/TestInstanceDataArchive/{id}'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling _delete.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'DELETE',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "boolean");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in _delete!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow COUNT
     */
    count() {
        const localVarPath = this.basePath + '/TestInstanceDataArchives/Count';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "InlineResponse200");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in count!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow COUNT with filter
     * @param filter FBV meadow filter
     */
    countFiltered(filter) {
        const localVarPath = this.basePath + '/TestInstanceDataArchives/FilteredTo/{filter}/Count'
            .replace('{' + 'filter' + '}', encodeURIComponent(String(filter)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'filter' is not null or undefined
        if (filter === null || filter === undefined) {
            throw new Error('Required parameter filter was null or undefined when calling countFiltered.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "InlineResponse200");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in countFiltered!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow POST (Create)
     * @param body
     */
    create(body) {
        const localVarPath = this.basePath + '/TestInstanceDataArchive';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling create.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'POST',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "TestInstanceDataArchive")
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "TestInstanceDataArchive");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in create!`);
                    }
                }
            });
        }));
    }
    /**
     *
     * @param body
     */
    postReadCountQuery(body) {
        const localVarPath = this.basePath + '/TestInstanceDataArchive/query/count';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling postReadCountQuery.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'POST',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "QueryRequest")
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "InlineResponse200");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in postReadCountQuery!`);
                    }
                }
            });
        }));
    }
    /**
     *
     * @param body
     */
    postReadQuery(body) {
        const localVarPath = this.basePath + '/TestInstanceDataArchive/query/read';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling postReadQuery.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'POST',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "QueryRequest")
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "Array<TestInstanceDataArchive>");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in postReadQuery!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow READ
     * @param id ID of record
     */
    read(id) {
        const localVarPath = this.basePath + '/TestInstanceDataArchive/{id}'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling read.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "TestInstanceDataArchive");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in read!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow READ list
     * @param begin Beginning (skip) number of records (to page)
     * @param max Maximum number of records to return
     */
    reads(begin, max) {
        const localVarPath = this.basePath + '/TestInstanceDataArchives/{begin}/{max}'
            .replace('{' + 'begin' + '}', encodeURIComponent(String(begin)))
            .replace('{' + 'max' + '}', encodeURIComponent(String(max)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'begin' is not null or undefined
        if (begin === null || begin === undefined) {
            throw new Error('Required parameter begin was null or undefined when calling reads.');
        }
        // verify required parameter 'max' is not null or undefined
        if (max === null || max === undefined) {
            throw new Error('Required parameter max was null or undefined when calling reads.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "Array<TestInstanceDataArchive>");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in reads!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow READ filtered list
     * @param filter FBV meadow filter
     * @param begin Beginning (skip) number of records (to page)
     * @param max Maximum number of records to return
     */
    readsFiltered(filter, begin, max) {
        const localVarPath = this.basePath + '/TestInstanceDataArchives/FilteredTo/{filter}/{begin}/{max}'
            .replace('{' + 'filter' + '}', encodeURIComponent(String(filter)))
            .replace('{' + 'begin' + '}', encodeURIComponent(String(begin)))
            .replace('{' + 'max' + '}', encodeURIComponent(String(max)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'filter' is not null or undefined
        if (filter === null || filter === undefined) {
            throw new Error('Required parameter filter was null or undefined when calling readsFiltered.');
        }
        // verify required parameter 'begin' is not null or undefined
        if (begin === null || begin === undefined) {
            throw new Error('Required parameter begin was null or undefined when calling readsFiltered.');
        }
        // verify required parameter 'max' is not null or undefined
        if (max === null || max === undefined) {
            throw new Error('Required parameter max was null or undefined when calling readsFiltered.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "Array<TestInstanceDataArchive>");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in readsFiltered!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow PUT (Update)
     * @param body
     */
    update(body) {
        const localVarPath = this.basePath + '/TestInstanceDataArchive';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling update.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'PUT',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "TestInstanceDataArchive")
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "TestInstanceDataArchive");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in update!`);
                    }
                }
            });
        }));
    }
    getLastResponse() {
        let response = this._lastResponse;
        this._lastResponse = null;
        return response;
    }
}
exports.TestInstanceDataArchiveApi = TestInstanceDataArchiveApi;
var TestInstanceLabJoinApiApiKeys;
(function (TestInstanceLabJoinApiApiKeys) {
})(TestInstanceLabJoinApiApiKeys = exports.TestInstanceLabJoinApiApiKeys || (exports.TestInstanceLabJoinApiApiKeys = {}));
class TestInstanceLabJoinApi {
    constructor(basePathOrUsername, password, basePath) {
        this._basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this._lastResponse = null;
        this._timeout = DEFAULT_TIMEOUT;
        this.authentications = {
            'default': new VoidAuth(),
        };
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    set useQuerystring(value) {
        this._useQuerystring = value;
    }
    set basePath(basePath) {
        this._basePath = basePath;
    }
    get basePath() {
        return this._basePath;
    }
    set timeout(pTimeout) {
        this._timeout = pTimeout;
    }
    get timeout() {
        return this._timeout;
    }
    setDefaultAuthentication(auth) {
        this.authentications.default = auth;
    }
    setApiKey(key, value) {
        this.authentications[TestInstanceLabJoinApiApiKeys[key]].apiKey = value;
    }
    /**
     * Meadow DELETE
     * @param id ID of record
     */
    _delete(id) {
        const localVarPath = this.basePath + '/TestInstanceLabJoin/{id}'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling _delete.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'DELETE',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "boolean");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in _delete!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow COUNT
     */
    count() {
        const localVarPath = this.basePath + '/TestInstanceLabJoins/Count';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "InlineResponse200");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in count!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow COUNT with filter
     * @param filter FBV meadow filter
     */
    countFiltered(filter) {
        const localVarPath = this.basePath + '/TestInstanceLabJoins/FilteredTo/{filter}/Count'
            .replace('{' + 'filter' + '}', encodeURIComponent(String(filter)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'filter' is not null or undefined
        if (filter === null || filter === undefined) {
            throw new Error('Required parameter filter was null or undefined when calling countFiltered.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "InlineResponse200");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in countFiltered!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow POST (Create)
     * @param body
     */
    create(body) {
        const localVarPath = this.basePath + '/TestInstanceLabJoin';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling create.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'POST',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "TestInstanceLabJoin")
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "TestInstanceLabJoin");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in create!`);
                    }
                }
            });
        }));
    }
    /**
     *
     * @param body
     */
    postReadCountQuery(body) {
        const localVarPath = this.basePath + '/TestInstanceLabJoin/query/count';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling postReadCountQuery.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'POST',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "QueryRequest")
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "InlineResponse200");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in postReadCountQuery!`);
                    }
                }
            });
        }));
    }
    /**
     *
     * @param body
     */
    postReadQuery(body) {
        const localVarPath = this.basePath + '/TestInstanceLabJoin/query/read';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling postReadQuery.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'POST',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "QueryRequest")
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "Array<TestInstanceLabJoin>");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in postReadQuery!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow READ
     * @param id ID of record
     */
    read(id) {
        const localVarPath = this.basePath + '/TestInstanceLabJoin/{id}'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling read.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "TestInstanceLabJoin");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in read!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow READ list
     * @param begin Beginning (skip) number of records (to page)
     * @param max Maximum number of records to return
     */
    reads(begin, max) {
        const localVarPath = this.basePath + '/TestInstanceLabJoins/{begin}/{max}'
            .replace('{' + 'begin' + '}', encodeURIComponent(String(begin)))
            .replace('{' + 'max' + '}', encodeURIComponent(String(max)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'begin' is not null or undefined
        if (begin === null || begin === undefined) {
            throw new Error('Required parameter begin was null or undefined when calling reads.');
        }
        // verify required parameter 'max' is not null or undefined
        if (max === null || max === undefined) {
            throw new Error('Required parameter max was null or undefined when calling reads.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "Array<TestInstanceLabJoin>");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in reads!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow READ filtered list
     * @param filter FBV meadow filter
     * @param begin Beginning (skip) number of records (to page)
     * @param max Maximum number of records to return
     */
    readsFiltered(filter, begin, max) {
        const localVarPath = this.basePath + '/TestInstanceLabJoins/FilteredTo/{filter}/{begin}/{max}'
            .replace('{' + 'filter' + '}', encodeURIComponent(String(filter)))
            .replace('{' + 'begin' + '}', encodeURIComponent(String(begin)))
            .replace('{' + 'max' + '}', encodeURIComponent(String(max)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'filter' is not null or undefined
        if (filter === null || filter === undefined) {
            throw new Error('Required parameter filter was null or undefined when calling readsFiltered.');
        }
        // verify required parameter 'begin' is not null or undefined
        if (begin === null || begin === undefined) {
            throw new Error('Required parameter begin was null or undefined when calling readsFiltered.');
        }
        // verify required parameter 'max' is not null or undefined
        if (max === null || max === undefined) {
            throw new Error('Required parameter max was null or undefined when calling readsFiltered.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "Array<TestInstanceLabJoin>");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in readsFiltered!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow PUT (Update)
     * @param body
     */
    update(body) {
        const localVarPath = this.basePath + '/TestInstanceLabJoin';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling update.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'PUT',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "TestInstanceLabJoin")
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "TestInstanceLabJoin");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in update!`);
                    }
                }
            });
        }));
    }
    getLastResponse() {
        let response = this._lastResponse;
        this._lastResponse = null;
        return response;
    }
}
exports.TestInstanceLabJoinApi = TestInstanceLabJoinApi;
var TestInstanceSampleJoinApiApiKeys;
(function (TestInstanceSampleJoinApiApiKeys) {
})(TestInstanceSampleJoinApiApiKeys = exports.TestInstanceSampleJoinApiApiKeys || (exports.TestInstanceSampleJoinApiApiKeys = {}));
class TestInstanceSampleJoinApi {
    constructor(basePathOrUsername, password, basePath) {
        this._basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this._lastResponse = null;
        this._timeout = DEFAULT_TIMEOUT;
        this.authentications = {
            'default': new VoidAuth(),
        };
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    set useQuerystring(value) {
        this._useQuerystring = value;
    }
    set basePath(basePath) {
        this._basePath = basePath;
    }
    get basePath() {
        return this._basePath;
    }
    set timeout(pTimeout) {
        this._timeout = pTimeout;
    }
    get timeout() {
        return this._timeout;
    }
    setDefaultAuthentication(auth) {
        this.authentications.default = auth;
    }
    setApiKey(key, value) {
        this.authentications[TestInstanceSampleJoinApiApiKeys[key]].apiKey = value;
    }
    /**
     * Meadow DELETE
     * @param id ID of record
     */
    _delete(id) {
        const localVarPath = this.basePath + '/TestInstanceSampleJoin/{id}'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling _delete.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'DELETE',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "boolean");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in _delete!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow COUNT
     */
    count() {
        const localVarPath = this.basePath + '/TestInstanceSampleJoins/Count';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "InlineResponse200");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in count!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow COUNT with filter
     * @param filter FBV meadow filter
     */
    countFiltered(filter) {
        const localVarPath = this.basePath + '/TestInstanceSampleJoins/FilteredTo/{filter}/Count'
            .replace('{' + 'filter' + '}', encodeURIComponent(String(filter)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'filter' is not null or undefined
        if (filter === null || filter === undefined) {
            throw new Error('Required parameter filter was null or undefined when calling countFiltered.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "InlineResponse200");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in countFiltered!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow POST (Create)
     * @param body
     */
    create(body) {
        const localVarPath = this.basePath + '/TestInstanceSampleJoin';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling create.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'POST',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "TestInstanceSampleJoin")
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "TestInstanceSampleJoin");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in create!`);
                    }
                }
            });
        }));
    }
    /**
     *
     * @param body
     */
    postReadCountQuery(body) {
        const localVarPath = this.basePath + '/TestInstanceSampleJoin/query/count';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling postReadCountQuery.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'POST',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "QueryRequest")
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "InlineResponse200");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in postReadCountQuery!`);
                    }
                }
            });
        }));
    }
    /**
     *
     * @param body
     */
    postReadQuery(body) {
        const localVarPath = this.basePath + '/TestInstanceSampleJoin/query/read';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling postReadQuery.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'POST',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "QueryRequest")
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "Array<TestInstanceSampleJoin>");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in postReadQuery!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow READ
     * @param id ID of record
     */
    read(id) {
        const localVarPath = this.basePath + '/TestInstanceSampleJoin/{id}'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling read.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "TestInstanceSampleJoin");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in read!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow READ list
     * @param begin Beginning (skip) number of records (to page)
     * @param max Maximum number of records to return
     */
    reads(begin, max) {
        const localVarPath = this.basePath + '/TestInstanceSampleJoins/{begin}/{max}'
            .replace('{' + 'begin' + '}', encodeURIComponent(String(begin)))
            .replace('{' + 'max' + '}', encodeURIComponent(String(max)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'begin' is not null or undefined
        if (begin === null || begin === undefined) {
            throw new Error('Required parameter begin was null or undefined when calling reads.');
        }
        // verify required parameter 'max' is not null or undefined
        if (max === null || max === undefined) {
            throw new Error('Required parameter max was null or undefined when calling reads.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "Array<TestInstanceSampleJoin>");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in reads!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow READ filtered list
     * @param filter FBV meadow filter
     * @param begin Beginning (skip) number of records (to page)
     * @param max Maximum number of records to return
     */
    readsFiltered(filter, begin, max) {
        const localVarPath = this.basePath + '/TestInstanceSampleJoins/FilteredTo/{filter}/{begin}/{max}'
            .replace('{' + 'filter' + '}', encodeURIComponent(String(filter)))
            .replace('{' + 'begin' + '}', encodeURIComponent(String(begin)))
            .replace('{' + 'max' + '}', encodeURIComponent(String(max)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'filter' is not null or undefined
        if (filter === null || filter === undefined) {
            throw new Error('Required parameter filter was null or undefined when calling readsFiltered.');
        }
        // verify required parameter 'begin' is not null or undefined
        if (begin === null || begin === undefined) {
            throw new Error('Required parameter begin was null or undefined when calling readsFiltered.');
        }
        // verify required parameter 'max' is not null or undefined
        if (max === null || max === undefined) {
            throw new Error('Required parameter max was null or undefined when calling readsFiltered.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "Array<TestInstanceSampleJoin>");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in readsFiltered!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow PUT (Update)
     * @param body
     */
    update(body) {
        const localVarPath = this.basePath + '/TestInstanceSampleJoin';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling update.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'PUT',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "TestInstanceSampleJoin")
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "TestInstanceSampleJoin");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in update!`);
                    }
                }
            });
        }));
    }
    getLastResponse() {
        let response = this._lastResponse;
        this._lastResponse = null;
        return response;
    }
}
exports.TestInstanceSampleJoinApi = TestInstanceSampleJoinApi;
var TestLabJoinApiApiKeys;
(function (TestLabJoinApiApiKeys) {
})(TestLabJoinApiApiKeys = exports.TestLabJoinApiApiKeys || (exports.TestLabJoinApiApiKeys = {}));
class TestLabJoinApi {
    constructor(basePathOrUsername, password, basePath) {
        this._basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this._lastResponse = null;
        this._timeout = DEFAULT_TIMEOUT;
        this.authentications = {
            'default': new VoidAuth(),
        };
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    set useQuerystring(value) {
        this._useQuerystring = value;
    }
    set basePath(basePath) {
        this._basePath = basePath;
    }
    get basePath() {
        return this._basePath;
    }
    set timeout(pTimeout) {
        this._timeout = pTimeout;
    }
    get timeout() {
        return this._timeout;
    }
    setDefaultAuthentication(auth) {
        this.authentications.default = auth;
    }
    setApiKey(key, value) {
        this.authentications[TestLabJoinApiApiKeys[key]].apiKey = value;
    }
    /**
     * Meadow DELETE
     * @param id ID of record
     */
    _delete(id) {
        const localVarPath = this.basePath + '/TestLabJoin/{id}'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling _delete.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'DELETE',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "boolean");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in _delete!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow COUNT
     */
    count() {
        const localVarPath = this.basePath + '/TestLabJoins/Count';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "InlineResponse200");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in count!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow COUNT with filter
     * @param filter FBV meadow filter
     */
    countFiltered(filter) {
        const localVarPath = this.basePath + '/TestLabJoins/FilteredTo/{filter}/Count'
            .replace('{' + 'filter' + '}', encodeURIComponent(String(filter)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'filter' is not null or undefined
        if (filter === null || filter === undefined) {
            throw new Error('Required parameter filter was null or undefined when calling countFiltered.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "InlineResponse200");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in countFiltered!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow POST (Create)
     * @param body
     */
    create(body) {
        const localVarPath = this.basePath + '/TestLabJoin';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling create.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'POST',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "TestLabJoin")
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "TestLabJoin");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in create!`);
                    }
                }
            });
        }));
    }
    /**
     *
     * @param body
     */
    postReadCountQuery(body) {
        const localVarPath = this.basePath + '/TestLabJoin/query/count';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling postReadCountQuery.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'POST',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "QueryRequest")
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "InlineResponse200");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in postReadCountQuery!`);
                    }
                }
            });
        }));
    }
    /**
     *
     * @param body
     */
    postReadQuery(body) {
        const localVarPath = this.basePath + '/TestLabJoin/query/read';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling postReadQuery.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'POST',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "QueryRequest")
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "Array<TestLabJoin>");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in postReadQuery!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow READ
     * @param id ID of record
     */
    read(id) {
        const localVarPath = this.basePath + '/TestLabJoin/{id}'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling read.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "TestLabJoin");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in read!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow READ list
     * @param begin Beginning (skip) number of records (to page)
     * @param max Maximum number of records to return
     */
    reads(begin, max) {
        const localVarPath = this.basePath + '/TestLabJoins/{begin}/{max}'
            .replace('{' + 'begin' + '}', encodeURIComponent(String(begin)))
            .replace('{' + 'max' + '}', encodeURIComponent(String(max)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'begin' is not null or undefined
        if (begin === null || begin === undefined) {
            throw new Error('Required parameter begin was null or undefined when calling reads.');
        }
        // verify required parameter 'max' is not null or undefined
        if (max === null || max === undefined) {
            throw new Error('Required parameter max was null or undefined when calling reads.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "Array<TestLabJoin>");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in reads!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow READ filtered list
     * @param filter FBV meadow filter
     * @param begin Beginning (skip) number of records (to page)
     * @param max Maximum number of records to return
     */
    readsFiltered(filter, begin, max) {
        const localVarPath = this.basePath + '/TestLabJoins/FilteredTo/{filter}/{begin}/{max}'
            .replace('{' + 'filter' + '}', encodeURIComponent(String(filter)))
            .replace('{' + 'begin' + '}', encodeURIComponent(String(begin)))
            .replace('{' + 'max' + '}', encodeURIComponent(String(max)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'filter' is not null or undefined
        if (filter === null || filter === undefined) {
            throw new Error('Required parameter filter was null or undefined when calling readsFiltered.');
        }
        // verify required parameter 'begin' is not null or undefined
        if (begin === null || begin === undefined) {
            throw new Error('Required parameter begin was null or undefined when calling readsFiltered.');
        }
        // verify required parameter 'max' is not null or undefined
        if (max === null || max === undefined) {
            throw new Error('Required parameter max was null or undefined when calling readsFiltered.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "Array<TestLabJoin>");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in readsFiltered!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow PUT (Update)
     * @param body
     */
    update(body) {
        const localVarPath = this.basePath + '/TestLabJoin';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling update.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'PUT',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "TestLabJoin")
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "TestLabJoin");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in update!`);
                    }
                }
            });
        }));
    }
    getLastResponse() {
        let response = this._lastResponse;
        this._lastResponse = null;
        return response;
    }
}
exports.TestLabJoinApi = TestLabJoinApi;
var TestPlanApiApiKeys;
(function (TestPlanApiApiKeys) {
})(TestPlanApiApiKeys = exports.TestPlanApiApiKeys || (exports.TestPlanApiApiKeys = {}));
class TestPlanApi {
    constructor(basePathOrUsername, password, basePath) {
        this._basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this._lastResponse = null;
        this._timeout = DEFAULT_TIMEOUT;
        this.authentications = {
            'default': new VoidAuth(),
        };
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    set useQuerystring(value) {
        this._useQuerystring = value;
    }
    set basePath(basePath) {
        this._basePath = basePath;
    }
    get basePath() {
        return this._basePath;
    }
    set timeout(pTimeout) {
        this._timeout = pTimeout;
    }
    get timeout() {
        return this._timeout;
    }
    setDefaultAuthentication(auth) {
        this.authentications.default = auth;
    }
    setApiKey(key, value) {
        this.authentications[TestPlanApiApiKeys[key]].apiKey = value;
    }
    /**
     * Meadow DELETE
     * @param id ID of record
     */
    _delete(id) {
        const localVarPath = this.basePath + '/TestPlan/{id}'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling _delete.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'DELETE',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "boolean");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in _delete!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow COUNT
     */
    count() {
        const localVarPath = this.basePath + '/TestPlans/Count';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "InlineResponse200");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in count!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow COUNT with filter
     * @param filter FBV meadow filter
     */
    countFiltered(filter) {
        const localVarPath = this.basePath + '/TestPlans/FilteredTo/{filter}/Count'
            .replace('{' + 'filter' + '}', encodeURIComponent(String(filter)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'filter' is not null or undefined
        if (filter === null || filter === undefined) {
            throw new Error('Required parameter filter was null or undefined when calling countFiltered.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "InlineResponse200");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in countFiltered!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow POST (Create)
     * @param body
     */
    create(body) {
        const localVarPath = this.basePath + '/TestPlan';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling create.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'POST',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "TestPlan")
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "TestPlan");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in create!`);
                    }
                }
            });
        }));
    }
    /**
     *
     * @param body
     */
    postReadCountQuery(body) {
        const localVarPath = this.basePath + '/TestPlan/query/count';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling postReadCountQuery.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'POST',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "QueryRequest")
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "InlineResponse200");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in postReadCountQuery!`);
                    }
                }
            });
        }));
    }
    /**
     *
     * @param body
     */
    postReadQuery(body) {
        const localVarPath = this.basePath + '/TestPlan/query/read';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling postReadQuery.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'POST',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "QueryRequest")
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "Array<TestPlan>");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in postReadQuery!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow READ
     * @param id ID of record
     */
    read(id) {
        const localVarPath = this.basePath + '/TestPlan/{id}'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling read.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "TestPlan");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in read!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow READ list
     * @param begin Beginning (skip) number of records (to page)
     * @param max Maximum number of records to return
     */
    reads(begin, max) {
        const localVarPath = this.basePath + '/TestPlans/{begin}/{max}'
            .replace('{' + 'begin' + '}', encodeURIComponent(String(begin)))
            .replace('{' + 'max' + '}', encodeURIComponent(String(max)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'begin' is not null or undefined
        if (begin === null || begin === undefined) {
            throw new Error('Required parameter begin was null or undefined when calling reads.');
        }
        // verify required parameter 'max' is not null or undefined
        if (max === null || max === undefined) {
            throw new Error('Required parameter max was null or undefined when calling reads.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "Array<TestPlan>");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in reads!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow READ filtered list
     * @param filter FBV meadow filter
     * @param begin Beginning (skip) number of records (to page)
     * @param max Maximum number of records to return
     */
    readsFiltered(filter, begin, max) {
        const localVarPath = this.basePath + '/TestPlans/FilteredTo/{filter}/{begin}/{max}'
            .replace('{' + 'filter' + '}', encodeURIComponent(String(filter)))
            .replace('{' + 'begin' + '}', encodeURIComponent(String(begin)))
            .replace('{' + 'max' + '}', encodeURIComponent(String(max)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'filter' is not null or undefined
        if (filter === null || filter === undefined) {
            throw new Error('Required parameter filter was null or undefined when calling readsFiltered.');
        }
        // verify required parameter 'begin' is not null or undefined
        if (begin === null || begin === undefined) {
            throw new Error('Required parameter begin was null or undefined when calling readsFiltered.');
        }
        // verify required parameter 'max' is not null or undefined
        if (max === null || max === undefined) {
            throw new Error('Required parameter max was null or undefined when calling readsFiltered.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "Array<TestPlan>");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in readsFiltered!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow PUT (Update)
     * @param body
     */
    update(body) {
        const localVarPath = this.basePath + '/TestPlan';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling update.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'PUT',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "TestPlan")
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "TestPlan");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in update!`);
                    }
                }
            });
        }));
    }
    getLastResponse() {
        let response = this._lastResponse;
        this._lastResponse = null;
        return response;
    }
}
exports.TestPlanApi = TestPlanApi;
var TestRecordOfMaterialEntryJoinApiApiKeys;
(function (TestRecordOfMaterialEntryJoinApiApiKeys) {
})(TestRecordOfMaterialEntryJoinApiApiKeys = exports.TestRecordOfMaterialEntryJoinApiApiKeys || (exports.TestRecordOfMaterialEntryJoinApiApiKeys = {}));
class TestRecordOfMaterialEntryJoinApi {
    constructor(basePathOrUsername, password, basePath) {
        this._basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this._lastResponse = null;
        this._timeout = DEFAULT_TIMEOUT;
        this.authentications = {
            'default': new VoidAuth(),
        };
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    set useQuerystring(value) {
        this._useQuerystring = value;
    }
    set basePath(basePath) {
        this._basePath = basePath;
    }
    get basePath() {
        return this._basePath;
    }
    set timeout(pTimeout) {
        this._timeout = pTimeout;
    }
    get timeout() {
        return this._timeout;
    }
    setDefaultAuthentication(auth) {
        this.authentications.default = auth;
    }
    setApiKey(key, value) {
        this.authentications[TestRecordOfMaterialEntryJoinApiApiKeys[key]].apiKey = value;
    }
    /**
     * Meadow DELETE
     * @param id ID of record
     */
    _delete(id) {
        const localVarPath = this.basePath + '/TestRecordOfMaterialEntryJoin/{id}'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling _delete.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'DELETE',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "boolean");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in _delete!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow COUNT
     */
    count() {
        const localVarPath = this.basePath + '/TestRecordOfMaterialEntryJoins/Count';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "InlineResponse200");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in count!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow COUNT with filter
     * @param filter FBV meadow filter
     */
    countFiltered(filter) {
        const localVarPath = this.basePath + '/TestRecordOfMaterialEntryJoins/FilteredTo/{filter}/Count'
            .replace('{' + 'filter' + '}', encodeURIComponent(String(filter)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'filter' is not null or undefined
        if (filter === null || filter === undefined) {
            throw new Error('Required parameter filter was null or undefined when calling countFiltered.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "InlineResponse200");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in countFiltered!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow POST (Create)
     * @param body
     */
    create(body) {
        const localVarPath = this.basePath + '/TestRecordOfMaterialEntryJoin';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling create.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'POST',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "TestRecordOfMaterialEntryJoin")
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "TestRecordOfMaterialEntryJoin");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in create!`);
                    }
                }
            });
        }));
    }
    /**
     *
     * @param body
     */
    postReadCountQuery(body) {
        const localVarPath = this.basePath + '/TestRecordOfMaterialEntryJoin/query/count';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling postReadCountQuery.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'POST',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "QueryRequest")
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "InlineResponse200");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in postReadCountQuery!`);
                    }
                }
            });
        }));
    }
    /**
     *
     * @param body
     */
    postReadQuery(body) {
        const localVarPath = this.basePath + '/TestRecordOfMaterialEntryJoin/query/read';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling postReadQuery.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'POST',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "QueryRequest")
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "Array<TestRecordOfMaterialEntryJoin>");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in postReadQuery!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow READ
     * @param id ID of record
     */
    read(id) {
        const localVarPath = this.basePath + '/TestRecordOfMaterialEntryJoin/{id}'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling read.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "TestRecordOfMaterialEntryJoin");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in read!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow READ list
     * @param begin Beginning (skip) number of records (to page)
     * @param max Maximum number of records to return
     */
    reads(begin, max) {
        const localVarPath = this.basePath + '/TestRecordOfMaterialEntryJoins/{begin}/{max}'
            .replace('{' + 'begin' + '}', encodeURIComponent(String(begin)))
            .replace('{' + 'max' + '}', encodeURIComponent(String(max)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'begin' is not null or undefined
        if (begin === null || begin === undefined) {
            throw new Error('Required parameter begin was null or undefined when calling reads.');
        }
        // verify required parameter 'max' is not null or undefined
        if (max === null || max === undefined) {
            throw new Error('Required parameter max was null or undefined when calling reads.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "Array<TestRecordOfMaterialEntryJoin>");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in reads!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow READ filtered list
     * @param filter FBV meadow filter
     * @param begin Beginning (skip) number of records (to page)
     * @param max Maximum number of records to return
     */
    readsFiltered(filter, begin, max) {
        const localVarPath = this.basePath + '/TestRecordOfMaterialEntryJoins/FilteredTo/{filter}/{begin}/{max}'
            .replace('{' + 'filter' + '}', encodeURIComponent(String(filter)))
            .replace('{' + 'begin' + '}', encodeURIComponent(String(begin)))
            .replace('{' + 'max' + '}', encodeURIComponent(String(max)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'filter' is not null or undefined
        if (filter === null || filter === undefined) {
            throw new Error('Required parameter filter was null or undefined when calling readsFiltered.');
        }
        // verify required parameter 'begin' is not null or undefined
        if (begin === null || begin === undefined) {
            throw new Error('Required parameter begin was null or undefined when calling readsFiltered.');
        }
        // verify required parameter 'max' is not null or undefined
        if (max === null || max === undefined) {
            throw new Error('Required parameter max was null or undefined when calling readsFiltered.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "Array<TestRecordOfMaterialEntryJoin>");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in readsFiltered!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow PUT (Update)
     * @param body
     */
    update(body) {
        const localVarPath = this.basePath + '/TestRecordOfMaterialEntryJoin';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling update.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'PUT',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "TestRecordOfMaterialEntryJoin")
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "TestRecordOfMaterialEntryJoin");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in update!`);
                    }
                }
            });
        }));
    }
    getLastResponse() {
        let response = this._lastResponse;
        this._lastResponse = null;
        return response;
    }
}
exports.TestRecordOfMaterialEntryJoinApi = TestRecordOfMaterialEntryJoinApi;
var TestSpecificationApiApiKeys;
(function (TestSpecificationApiApiKeys) {
})(TestSpecificationApiApiKeys = exports.TestSpecificationApiApiKeys || (exports.TestSpecificationApiApiKeys = {}));
class TestSpecificationApi {
    constructor(basePathOrUsername, password, basePath) {
        this._basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this._lastResponse = null;
        this._timeout = DEFAULT_TIMEOUT;
        this.authentications = {
            'default': new VoidAuth(),
        };
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    set useQuerystring(value) {
        this._useQuerystring = value;
    }
    set basePath(basePath) {
        this._basePath = basePath;
    }
    get basePath() {
        return this._basePath;
    }
    set timeout(pTimeout) {
        this._timeout = pTimeout;
    }
    get timeout() {
        return this._timeout;
    }
    setDefaultAuthentication(auth) {
        this.authentications.default = auth;
    }
    setApiKey(key, value) {
        this.authentications[TestSpecificationApiApiKeys[key]].apiKey = value;
    }
    /**
     * Meadow DELETE
     * @param id ID of record
     */
    _delete(id) {
        const localVarPath = this.basePath + '/TestSpecification/{id}'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling _delete.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'DELETE',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "boolean");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in _delete!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow COUNT
     */
    count() {
        const localVarPath = this.basePath + '/TestSpecifications/Count';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "InlineResponse200");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in count!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow COUNT with filter
     * @param filter FBV meadow filter
     */
    countFiltered(filter) {
        const localVarPath = this.basePath + '/TestSpecifications/FilteredTo/{filter}/Count'
            .replace('{' + 'filter' + '}', encodeURIComponent(String(filter)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'filter' is not null or undefined
        if (filter === null || filter === undefined) {
            throw new Error('Required parameter filter was null or undefined when calling countFiltered.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "InlineResponse200");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in countFiltered!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow POST (Create)
     * @param body
     */
    create(body) {
        const localVarPath = this.basePath + '/TestSpecification';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling create.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'POST',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "TestSpecification")
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "TestSpecification");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in create!`);
                    }
                }
            });
        }));
    }
    /**
     *
     * @param body
     */
    postReadCountQuery(body) {
        const localVarPath = this.basePath + '/TestSpecification/query/count';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling postReadCountQuery.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'POST',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "QueryRequest")
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "InlineResponse200");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in postReadCountQuery!`);
                    }
                }
            });
        }));
    }
    /**
     *
     * @param body
     */
    postReadQuery(body) {
        const localVarPath = this.basePath + '/TestSpecification/query/read';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling postReadQuery.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'POST',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "QueryRequest")
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "Array<TestSpecification>");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in postReadQuery!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow READ
     * @param id ID of record
     */
    read(id) {
        const localVarPath = this.basePath + '/TestSpecification/{id}'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling read.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "TestSpecification");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in read!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow READ list
     * @param begin Beginning (skip) number of records (to page)
     * @param max Maximum number of records to return
     */
    reads(begin, max) {
        const localVarPath = this.basePath + '/TestSpecifications/{begin}/{max}'
            .replace('{' + 'begin' + '}', encodeURIComponent(String(begin)))
            .replace('{' + 'max' + '}', encodeURIComponent(String(max)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'begin' is not null or undefined
        if (begin === null || begin === undefined) {
            throw new Error('Required parameter begin was null or undefined when calling reads.');
        }
        // verify required parameter 'max' is not null or undefined
        if (max === null || max === undefined) {
            throw new Error('Required parameter max was null or undefined when calling reads.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "Array<TestSpecification>");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in reads!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow READ filtered list
     * @param filter FBV meadow filter
     * @param begin Beginning (skip) number of records (to page)
     * @param max Maximum number of records to return
     */
    readsFiltered(filter, begin, max) {
        const localVarPath = this.basePath + '/TestSpecifications/FilteredTo/{filter}/{begin}/{max}'
            .replace('{' + 'filter' + '}', encodeURIComponent(String(filter)))
            .replace('{' + 'begin' + '}', encodeURIComponent(String(begin)))
            .replace('{' + 'max' + '}', encodeURIComponent(String(max)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'filter' is not null or undefined
        if (filter === null || filter === undefined) {
            throw new Error('Required parameter filter was null or undefined when calling readsFiltered.');
        }
        // verify required parameter 'begin' is not null or undefined
        if (begin === null || begin === undefined) {
            throw new Error('Required parameter begin was null or undefined when calling readsFiltered.');
        }
        // verify required parameter 'max' is not null or undefined
        if (max === null || max === undefined) {
            throw new Error('Required parameter max was null or undefined when calling readsFiltered.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "Array<TestSpecification>");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in readsFiltered!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow PUT (Update)
     * @param body
     */
    update(body) {
        const localVarPath = this.basePath + '/TestSpecification';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling update.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'PUT',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "TestSpecification")
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "TestSpecification");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in update!`);
                    }
                }
            });
        }));
    }
    getLastResponse() {
        let response = this._lastResponse;
        this._lastResponse = null;
        return response;
    }
}
exports.TestSpecificationApi = TestSpecificationApi;
var TestSpecificationMaterialTestJoinApiApiKeys;
(function (TestSpecificationMaterialTestJoinApiApiKeys) {
})(TestSpecificationMaterialTestJoinApiApiKeys = exports.TestSpecificationMaterialTestJoinApiApiKeys || (exports.TestSpecificationMaterialTestJoinApiApiKeys = {}));
class TestSpecificationMaterialTestJoinApi {
    constructor(basePathOrUsername, password, basePath) {
        this._basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this._lastResponse = null;
        this._timeout = DEFAULT_TIMEOUT;
        this.authentications = {
            'default': new VoidAuth(),
        };
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    set useQuerystring(value) {
        this._useQuerystring = value;
    }
    set basePath(basePath) {
        this._basePath = basePath;
    }
    get basePath() {
        return this._basePath;
    }
    set timeout(pTimeout) {
        this._timeout = pTimeout;
    }
    get timeout() {
        return this._timeout;
    }
    setDefaultAuthentication(auth) {
        this.authentications.default = auth;
    }
    setApiKey(key, value) {
        this.authentications[TestSpecificationMaterialTestJoinApiApiKeys[key]].apiKey = value;
    }
    /**
     * Meadow DELETE
     * @param id ID of record
     */
    _delete(id) {
        const localVarPath = this.basePath + '/TestSpecificationMaterialTestJoin/{id}'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling _delete.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'DELETE',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "boolean");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in _delete!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow COUNT
     */
    count() {
        const localVarPath = this.basePath + '/TestSpecificationMaterialTestJoins/Count';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "InlineResponse200");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in count!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow COUNT with filter
     * @param filter FBV meadow filter
     */
    countFiltered(filter) {
        const localVarPath = this.basePath + '/TestSpecificationMaterialTestJoins/FilteredTo/{filter}/Count'
            .replace('{' + 'filter' + '}', encodeURIComponent(String(filter)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'filter' is not null or undefined
        if (filter === null || filter === undefined) {
            throw new Error('Required parameter filter was null or undefined when calling countFiltered.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "InlineResponse200");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in countFiltered!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow POST (Create)
     * @param body
     */
    create(body) {
        const localVarPath = this.basePath + '/TestSpecificationMaterialTestJoin';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling create.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'POST',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "TestSpecificationMaterialTestJoin")
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "TestSpecificationMaterialTestJoin");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in create!`);
                    }
                }
            });
        }));
    }
    /**
     *
     * @param body
     */
    postReadCountQuery(body) {
        const localVarPath = this.basePath + '/TestSpecificationMaterialTestJoin/query/count';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling postReadCountQuery.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'POST',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "QueryRequest")
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "InlineResponse200");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in postReadCountQuery!`);
                    }
                }
            });
        }));
    }
    /**
     *
     * @param body
     */
    postReadQuery(body) {
        const localVarPath = this.basePath + '/TestSpecificationMaterialTestJoin/query/read';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling postReadQuery.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'POST',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "QueryRequest")
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "Array<TestSpecificationMaterialTestJoin>");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in postReadQuery!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow READ
     * @param id ID of record
     */
    read(id) {
        const localVarPath = this.basePath + '/TestSpecificationMaterialTestJoin/{id}'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling read.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "TestSpecificationMaterialTestJoin");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in read!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow READ list
     * @param begin Beginning (skip) number of records (to page)
     * @param max Maximum number of records to return
     */
    reads(begin, max) {
        const localVarPath = this.basePath + '/TestSpecificationMaterialTestJoins/{begin}/{max}'
            .replace('{' + 'begin' + '}', encodeURIComponent(String(begin)))
            .replace('{' + 'max' + '}', encodeURIComponent(String(max)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'begin' is not null or undefined
        if (begin === null || begin === undefined) {
            throw new Error('Required parameter begin was null or undefined when calling reads.');
        }
        // verify required parameter 'max' is not null or undefined
        if (max === null || max === undefined) {
            throw new Error('Required parameter max was null or undefined when calling reads.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "Array<TestSpecificationMaterialTestJoin>");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in reads!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow READ filtered list
     * @param filter FBV meadow filter
     * @param begin Beginning (skip) number of records (to page)
     * @param max Maximum number of records to return
     */
    readsFiltered(filter, begin, max) {
        const localVarPath = this.basePath + '/TestSpecificationMaterialTestJoins/FilteredTo/{filter}/{begin}/{max}'
            .replace('{' + 'filter' + '}', encodeURIComponent(String(filter)))
            .replace('{' + 'begin' + '}', encodeURIComponent(String(begin)))
            .replace('{' + 'max' + '}', encodeURIComponent(String(max)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'filter' is not null or undefined
        if (filter === null || filter === undefined) {
            throw new Error('Required parameter filter was null or undefined when calling readsFiltered.');
        }
        // verify required parameter 'begin' is not null or undefined
        if (begin === null || begin === undefined) {
            throw new Error('Required parameter begin was null or undefined when calling readsFiltered.');
        }
        // verify required parameter 'max' is not null or undefined
        if (max === null || max === undefined) {
            throw new Error('Required parameter max was null or undefined when calling readsFiltered.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "Array<TestSpecificationMaterialTestJoin>");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in readsFiltered!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow PUT (Update)
     * @param body
     */
    update(body) {
        const localVarPath = this.basePath + '/TestSpecificationMaterialTestJoin';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling update.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'PUT',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "TestSpecificationMaterialTestJoin")
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "TestSpecificationMaterialTestJoin");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in update!`);
                    }
                }
            });
        }));
    }
    getLastResponse() {
        let response = this._lastResponse;
        this._lastResponse = null;
        return response;
    }
}
exports.TestSpecificationMaterialTestJoinApi = TestSpecificationMaterialTestJoinApi;
var TestSpecificationRequirementApiApiKeys;
(function (TestSpecificationRequirementApiApiKeys) {
})(TestSpecificationRequirementApiApiKeys = exports.TestSpecificationRequirementApiApiKeys || (exports.TestSpecificationRequirementApiApiKeys = {}));
class TestSpecificationRequirementApi {
    constructor(basePathOrUsername, password, basePath) {
        this._basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this._lastResponse = null;
        this._timeout = DEFAULT_TIMEOUT;
        this.authentications = {
            'default': new VoidAuth(),
        };
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    set useQuerystring(value) {
        this._useQuerystring = value;
    }
    set basePath(basePath) {
        this._basePath = basePath;
    }
    get basePath() {
        return this._basePath;
    }
    set timeout(pTimeout) {
        this._timeout = pTimeout;
    }
    get timeout() {
        return this._timeout;
    }
    setDefaultAuthentication(auth) {
        this.authentications.default = auth;
    }
    setApiKey(key, value) {
        this.authentications[TestSpecificationRequirementApiApiKeys[key]].apiKey = value;
    }
    /**
     * Meadow DELETE
     * @param id ID of record
     */
    _delete(id) {
        const localVarPath = this.basePath + '/TestSpecificationRequirement/{id}'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling _delete.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'DELETE',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "boolean");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in _delete!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow COUNT
     */
    count() {
        const localVarPath = this.basePath + '/TestSpecificationRequirements/Count';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "InlineResponse200");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in count!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow COUNT with filter
     * @param filter FBV meadow filter
     */
    countFiltered(filter) {
        const localVarPath = this.basePath + '/TestSpecificationRequirements/FilteredTo/{filter}/Count'
            .replace('{' + 'filter' + '}', encodeURIComponent(String(filter)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'filter' is not null or undefined
        if (filter === null || filter === undefined) {
            throw new Error('Required parameter filter was null or undefined when calling countFiltered.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "InlineResponse200");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in countFiltered!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow POST (Create)
     * @param body
     */
    create(body) {
        const localVarPath = this.basePath + '/TestSpecificationRequirement';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling create.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'POST',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "TestSpecificationRequirement")
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "TestSpecificationRequirement");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in create!`);
                    }
                }
            });
        }));
    }
    /**
     *
     * @param body
     */
    postReadCountQuery(body) {
        const localVarPath = this.basePath + '/TestSpecificationRequirement/query/count';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling postReadCountQuery.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'POST',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "QueryRequest")
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "InlineResponse200");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in postReadCountQuery!`);
                    }
                }
            });
        }));
    }
    /**
     *
     * @param body
     */
    postReadQuery(body) {
        const localVarPath = this.basePath + '/TestSpecificationRequirement/query/read';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling postReadQuery.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'POST',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "QueryRequest")
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "Array<TestSpecificationRequirement>");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in postReadQuery!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow READ
     * @param id ID of record
     */
    read(id) {
        const localVarPath = this.basePath + '/TestSpecificationRequirement/{id}'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling read.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "TestSpecificationRequirement");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in read!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow READ list
     * @param begin Beginning (skip) number of records (to page)
     * @param max Maximum number of records to return
     */
    reads(begin, max) {
        const localVarPath = this.basePath + '/TestSpecificationRequirements/{begin}/{max}'
            .replace('{' + 'begin' + '}', encodeURIComponent(String(begin)))
            .replace('{' + 'max' + '}', encodeURIComponent(String(max)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'begin' is not null or undefined
        if (begin === null || begin === undefined) {
            throw new Error('Required parameter begin was null or undefined when calling reads.');
        }
        // verify required parameter 'max' is not null or undefined
        if (max === null || max === undefined) {
            throw new Error('Required parameter max was null or undefined when calling reads.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "Array<TestSpecificationRequirement>");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in reads!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow READ filtered list
     * @param filter FBV meadow filter
     * @param begin Beginning (skip) number of records (to page)
     * @param max Maximum number of records to return
     */
    readsFiltered(filter, begin, max) {
        const localVarPath = this.basePath + '/TestSpecificationRequirements/FilteredTo/{filter}/{begin}/{max}'
            .replace('{' + 'filter' + '}', encodeURIComponent(String(filter)))
            .replace('{' + 'begin' + '}', encodeURIComponent(String(begin)))
            .replace('{' + 'max' + '}', encodeURIComponent(String(max)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'filter' is not null or undefined
        if (filter === null || filter === undefined) {
            throw new Error('Required parameter filter was null or undefined when calling readsFiltered.');
        }
        // verify required parameter 'begin' is not null or undefined
        if (begin === null || begin === undefined) {
            throw new Error('Required parameter begin was null or undefined when calling readsFiltered.');
        }
        // verify required parameter 'max' is not null or undefined
        if (max === null || max === undefined) {
            throw new Error('Required parameter max was null or undefined when calling readsFiltered.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "Array<TestSpecificationRequirement>");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in readsFiltered!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow PUT (Update)
     * @param body
     */
    update(body) {
        const localVarPath = this.basePath + '/TestSpecificationRequirement';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling update.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'PUT',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "TestSpecificationRequirement")
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "TestSpecificationRequirement");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in update!`);
                    }
                }
            });
        }));
    }
    getLastResponse() {
        let response = this._lastResponse;
        this._lastResponse = null;
        return response;
    }
}
exports.TestSpecificationRequirementApi = TestSpecificationRequirementApi;
var TestSpecificationSetApiApiKeys;
(function (TestSpecificationSetApiApiKeys) {
})(TestSpecificationSetApiApiKeys = exports.TestSpecificationSetApiApiKeys || (exports.TestSpecificationSetApiApiKeys = {}));
class TestSpecificationSetApi {
    constructor(basePathOrUsername, password, basePath) {
        this._basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this._lastResponse = null;
        this._timeout = DEFAULT_TIMEOUT;
        this.authentications = {
            'default': new VoidAuth(),
        };
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    set useQuerystring(value) {
        this._useQuerystring = value;
    }
    set basePath(basePath) {
        this._basePath = basePath;
    }
    get basePath() {
        return this._basePath;
    }
    set timeout(pTimeout) {
        this._timeout = pTimeout;
    }
    get timeout() {
        return this._timeout;
    }
    setDefaultAuthentication(auth) {
        this.authentications.default = auth;
    }
    setApiKey(key, value) {
        this.authentications[TestSpecificationSetApiApiKeys[key]].apiKey = value;
    }
    /**
     * Meadow DELETE
     * @param id ID of record
     */
    _delete(id) {
        const localVarPath = this.basePath + '/TestSpecificationSet/{id}'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling _delete.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'DELETE',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "boolean");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in _delete!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow COUNT
     */
    count() {
        const localVarPath = this.basePath + '/TestSpecificationSets/Count';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "InlineResponse200");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in count!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow COUNT with filter
     * @param filter FBV meadow filter
     */
    countFiltered(filter) {
        const localVarPath = this.basePath + '/TestSpecificationSets/FilteredTo/{filter}/Count'
            .replace('{' + 'filter' + '}', encodeURIComponent(String(filter)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'filter' is not null or undefined
        if (filter === null || filter === undefined) {
            throw new Error('Required parameter filter was null or undefined when calling countFiltered.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "InlineResponse200");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in countFiltered!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow POST (Create)
     * @param body
     */
    create(body) {
        const localVarPath = this.basePath + '/TestSpecificationSet';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling create.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'POST',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "TestSpecificationSet")
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "TestSpecificationSet");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in create!`);
                    }
                }
            });
        }));
    }
    /**
     *
     * @param body
     */
    postReadCountQuery(body) {
        const localVarPath = this.basePath + '/TestSpecificationSet/query/count';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling postReadCountQuery.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'POST',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "QueryRequest")
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "InlineResponse200");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in postReadCountQuery!`);
                    }
                }
            });
        }));
    }
    /**
     *
     * @param body
     */
    postReadQuery(body) {
        const localVarPath = this.basePath + '/TestSpecificationSet/query/read';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling postReadQuery.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'POST',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "QueryRequest")
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "Array<TestSpecificationSet>");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in postReadQuery!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow READ
     * @param id ID of record
     */
    read(id) {
        const localVarPath = this.basePath + '/TestSpecificationSet/{id}'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling read.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "TestSpecificationSet");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in read!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow READ list
     * @param begin Beginning (skip) number of records (to page)
     * @param max Maximum number of records to return
     */
    reads(begin, max) {
        const localVarPath = this.basePath + '/TestSpecificationSets/{begin}/{max}'
            .replace('{' + 'begin' + '}', encodeURIComponent(String(begin)))
            .replace('{' + 'max' + '}', encodeURIComponent(String(max)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'begin' is not null or undefined
        if (begin === null || begin === undefined) {
            throw new Error('Required parameter begin was null or undefined when calling reads.');
        }
        // verify required parameter 'max' is not null or undefined
        if (max === null || max === undefined) {
            throw new Error('Required parameter max was null or undefined when calling reads.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "Array<TestSpecificationSet>");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in reads!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow READ filtered list
     * @param filter FBV meadow filter
     * @param begin Beginning (skip) number of records (to page)
     * @param max Maximum number of records to return
     */
    readsFiltered(filter, begin, max) {
        const localVarPath = this.basePath + '/TestSpecificationSets/FilteredTo/{filter}/{begin}/{max}'
            .replace('{' + 'filter' + '}', encodeURIComponent(String(filter)))
            .replace('{' + 'begin' + '}', encodeURIComponent(String(begin)))
            .replace('{' + 'max' + '}', encodeURIComponent(String(max)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'filter' is not null or undefined
        if (filter === null || filter === undefined) {
            throw new Error('Required parameter filter was null or undefined when calling readsFiltered.');
        }
        // verify required parameter 'begin' is not null or undefined
        if (begin === null || begin === undefined) {
            throw new Error('Required parameter begin was null or undefined when calling readsFiltered.');
        }
        // verify required parameter 'max' is not null or undefined
        if (max === null || max === undefined) {
            throw new Error('Required parameter max was null or undefined when calling readsFiltered.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "Array<TestSpecificationSet>");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in readsFiltered!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow PUT (Update)
     * @param body
     */
    update(body) {
        const localVarPath = this.basePath + '/TestSpecificationSet';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling update.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'PUT',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "TestSpecificationSet")
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "TestSpecificationSet");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in update!`);
                    }
                }
            });
        }));
    }
    getLastResponse() {
        let response = this._lastResponse;
        this._lastResponse = null;
        return response;
    }
}
exports.TestSpecificationSetApi = TestSpecificationSetApi;
var TestSpecificationSetTestJoinApiApiKeys;
(function (TestSpecificationSetTestJoinApiApiKeys) {
})(TestSpecificationSetTestJoinApiApiKeys = exports.TestSpecificationSetTestJoinApiApiKeys || (exports.TestSpecificationSetTestJoinApiApiKeys = {}));
class TestSpecificationSetTestJoinApi {
    constructor(basePathOrUsername, password, basePath) {
        this._basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this._lastResponse = null;
        this._timeout = DEFAULT_TIMEOUT;
        this.authentications = {
            'default': new VoidAuth(),
        };
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    set useQuerystring(value) {
        this._useQuerystring = value;
    }
    set basePath(basePath) {
        this._basePath = basePath;
    }
    get basePath() {
        return this._basePath;
    }
    set timeout(pTimeout) {
        this._timeout = pTimeout;
    }
    get timeout() {
        return this._timeout;
    }
    setDefaultAuthentication(auth) {
        this.authentications.default = auth;
    }
    setApiKey(key, value) {
        this.authentications[TestSpecificationSetTestJoinApiApiKeys[key]].apiKey = value;
    }
    /**
     * Meadow DELETE
     * @param id ID of record
     */
    _delete(id) {
        const localVarPath = this.basePath + '/TestSpecificationSetTestJoin/{id}'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling _delete.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'DELETE',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "boolean");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in _delete!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow COUNT
     */
    count() {
        const localVarPath = this.basePath + '/TestSpecificationSetTestJoins/Count';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "InlineResponse200");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in count!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow COUNT with filter
     * @param filter FBV meadow filter
     */
    countFiltered(filter) {
        const localVarPath = this.basePath + '/TestSpecificationSetTestJoins/FilteredTo/{filter}/Count'
            .replace('{' + 'filter' + '}', encodeURIComponent(String(filter)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'filter' is not null or undefined
        if (filter === null || filter === undefined) {
            throw new Error('Required parameter filter was null or undefined when calling countFiltered.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "InlineResponse200");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in countFiltered!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow POST (Create)
     * @param body
     */
    create(body) {
        const localVarPath = this.basePath + '/TestSpecificationSetTestJoin';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling create.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'POST',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "TestSpecificationSetTestJoin")
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "TestSpecificationSetTestJoin");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in create!`);
                    }
                }
            });
        }));
    }
    /**
     *
     * @param body
     */
    postReadCountQuery(body) {
        const localVarPath = this.basePath + '/TestSpecificationSetTestJoin/query/count';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling postReadCountQuery.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'POST',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "QueryRequest")
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "InlineResponse200");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in postReadCountQuery!`);
                    }
                }
            });
        }));
    }
    /**
     *
     * @param body
     */
    postReadQuery(body) {
        const localVarPath = this.basePath + '/TestSpecificationSetTestJoin/query/read';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling postReadQuery.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'POST',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "QueryRequest")
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "Array<TestSpecificationSetTestJoin>");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in postReadQuery!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow READ
     * @param id ID of record
     */
    read(id) {
        const localVarPath = this.basePath + '/TestSpecificationSetTestJoin/{id}'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling read.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "TestSpecificationSetTestJoin");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in read!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow READ list
     * @param begin Beginning (skip) number of records (to page)
     * @param max Maximum number of records to return
     */
    reads(begin, max) {
        const localVarPath = this.basePath + '/TestSpecificationSetTestJoins/{begin}/{max}'
            .replace('{' + 'begin' + '}', encodeURIComponent(String(begin)))
            .replace('{' + 'max' + '}', encodeURIComponent(String(max)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'begin' is not null or undefined
        if (begin === null || begin === undefined) {
            throw new Error('Required parameter begin was null or undefined when calling reads.');
        }
        // verify required parameter 'max' is not null or undefined
        if (max === null || max === undefined) {
            throw new Error('Required parameter max was null or undefined when calling reads.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "Array<TestSpecificationSetTestJoin>");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in reads!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow READ filtered list
     * @param filter FBV meadow filter
     * @param begin Beginning (skip) number of records (to page)
     * @param max Maximum number of records to return
     */
    readsFiltered(filter, begin, max) {
        const localVarPath = this.basePath + '/TestSpecificationSetTestJoins/FilteredTo/{filter}/{begin}/{max}'
            .replace('{' + 'filter' + '}', encodeURIComponent(String(filter)))
            .replace('{' + 'begin' + '}', encodeURIComponent(String(begin)))
            .replace('{' + 'max' + '}', encodeURIComponent(String(max)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'filter' is not null or undefined
        if (filter === null || filter === undefined) {
            throw new Error('Required parameter filter was null or undefined when calling readsFiltered.');
        }
        // verify required parameter 'begin' is not null or undefined
        if (begin === null || begin === undefined) {
            throw new Error('Required parameter begin was null or undefined when calling readsFiltered.');
        }
        // verify required parameter 'max' is not null or undefined
        if (max === null || max === undefined) {
            throw new Error('Required parameter max was null or undefined when calling readsFiltered.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "Array<TestSpecificationSetTestJoin>");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in readsFiltered!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow PUT (Update)
     * @param body
     */
    update(body) {
        const localVarPath = this.basePath + '/TestSpecificationSetTestJoin';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling update.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'PUT',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "TestSpecificationSetTestJoin")
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "TestSpecificationSetTestJoin");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in update!`);
                    }
                }
            });
        }));
    }
    getLastResponse() {
        let response = this._lastResponse;
        this._lastResponse = null;
        return response;
    }
}
exports.TestSpecificationSetTestJoinApi = TestSpecificationSetTestJoinApi;
var TestStepApiApiKeys;
(function (TestStepApiApiKeys) {
})(TestStepApiApiKeys = exports.TestStepApiApiKeys || (exports.TestStepApiApiKeys = {}));
class TestStepApi {
    constructor(basePathOrUsername, password, basePath) {
        this._basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this._lastResponse = null;
        this._timeout = DEFAULT_TIMEOUT;
        this.authentications = {
            'default': new VoidAuth(),
        };
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    set useQuerystring(value) {
        this._useQuerystring = value;
    }
    set basePath(basePath) {
        this._basePath = basePath;
    }
    get basePath() {
        return this._basePath;
    }
    set timeout(pTimeout) {
        this._timeout = pTimeout;
    }
    get timeout() {
        return this._timeout;
    }
    setDefaultAuthentication(auth) {
        this.authentications.default = auth;
    }
    setApiKey(key, value) {
        this.authentications[TestStepApiApiKeys[key]].apiKey = value;
    }
    /**
     * Meadow DELETE
     * @param id ID of record
     */
    _delete(id) {
        const localVarPath = this.basePath + '/TestStep/{id}'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling _delete.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'DELETE',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "boolean");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in _delete!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow COUNT
     */
    count() {
        const localVarPath = this.basePath + '/TestSteps/Count';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "InlineResponse200");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in count!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow COUNT with filter
     * @param filter FBV meadow filter
     */
    countFiltered(filter) {
        const localVarPath = this.basePath + '/TestSteps/FilteredTo/{filter}/Count'
            .replace('{' + 'filter' + '}', encodeURIComponent(String(filter)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'filter' is not null or undefined
        if (filter === null || filter === undefined) {
            throw new Error('Required parameter filter was null or undefined when calling countFiltered.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "InlineResponse200");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in countFiltered!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow POST (Create)
     * @param body
     */
    create(body) {
        const localVarPath = this.basePath + '/TestStep';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling create.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'POST',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "TestStep")
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "TestStep");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in create!`);
                    }
                }
            });
        }));
    }
    /**
     *
     * @param body
     */
    postReadCountQuery(body) {
        const localVarPath = this.basePath + '/TestStep/query/count';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling postReadCountQuery.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'POST',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "QueryRequest")
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "InlineResponse200");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in postReadCountQuery!`);
                    }
                }
            });
        }));
    }
    /**
     *
     * @param body
     */
    postReadQuery(body) {
        const localVarPath = this.basePath + '/TestStep/query/read';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling postReadQuery.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'POST',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "QueryRequest")
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "Array<TestStep>");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in postReadQuery!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow READ
     * @param id ID of record
     */
    read(id) {
        const localVarPath = this.basePath + '/TestStep/{id}'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling read.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "TestStep");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in read!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow READ list
     * @param begin Beginning (skip) number of records (to page)
     * @param max Maximum number of records to return
     */
    reads(begin, max) {
        const localVarPath = this.basePath + '/TestSteps/{begin}/{max}'
            .replace('{' + 'begin' + '}', encodeURIComponent(String(begin)))
            .replace('{' + 'max' + '}', encodeURIComponent(String(max)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'begin' is not null or undefined
        if (begin === null || begin === undefined) {
            throw new Error('Required parameter begin was null or undefined when calling reads.');
        }
        // verify required parameter 'max' is not null or undefined
        if (max === null || max === undefined) {
            throw new Error('Required parameter max was null or undefined when calling reads.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "Array<TestStep>");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in reads!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow READ filtered list
     * @param filter FBV meadow filter
     * @param begin Beginning (skip) number of records (to page)
     * @param max Maximum number of records to return
     */
    readsFiltered(filter, begin, max) {
        const localVarPath = this.basePath + '/TestSteps/FilteredTo/{filter}/{begin}/{max}'
            .replace('{' + 'filter' + '}', encodeURIComponent(String(filter)))
            .replace('{' + 'begin' + '}', encodeURIComponent(String(begin)))
            .replace('{' + 'max' + '}', encodeURIComponent(String(max)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'filter' is not null or undefined
        if (filter === null || filter === undefined) {
            throw new Error('Required parameter filter was null or undefined when calling readsFiltered.');
        }
        // verify required parameter 'begin' is not null or undefined
        if (begin === null || begin === undefined) {
            throw new Error('Required parameter begin was null or undefined when calling readsFiltered.');
        }
        // verify required parameter 'max' is not null or undefined
        if (max === null || max === undefined) {
            throw new Error('Required parameter max was null or undefined when calling readsFiltered.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "Array<TestStep>");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in readsFiltered!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow PUT (Update)
     * @param body
     */
    update(body) {
        const localVarPath = this.basePath + '/TestStep';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling update.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'PUT',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "TestStep")
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "TestStep");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in update!`);
                    }
                }
            });
        }));
    }
    getLastResponse() {
        let response = this._lastResponse;
        this._lastResponse = null;
        return response;
    }
}
exports.TestStepApi = TestStepApi;
var UserApiApiKeys;
(function (UserApiApiKeys) {
})(UserApiApiKeys = exports.UserApiApiKeys || (exports.UserApiApiKeys = {}));
class UserApi {
    constructor(basePathOrUsername, password, basePath) {
        this._basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this._lastResponse = null;
        this._timeout = DEFAULT_TIMEOUT;
        this.authentications = {
            'default': new VoidAuth(),
        };
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    set useQuerystring(value) {
        this._useQuerystring = value;
    }
    set basePath(basePath) {
        this._basePath = basePath;
    }
    get basePath() {
        return this._basePath;
    }
    set timeout(pTimeout) {
        this._timeout = pTimeout;
    }
    get timeout() {
        return this._timeout;
    }
    setDefaultAuthentication(auth) {
        this.authentications.default = auth;
    }
    setApiKey(key, value) {
        this.authentications[UserApiApiKeys[key]].apiKey = value;
    }
    /**
     * Meadow DELETE
     * @param id ID of record
     */
    _delete(id) {
        const localVarPath = this.basePath + '/User/{id}'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling _delete.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'DELETE',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "boolean");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in _delete!`);
                    }
                }
            });
        }));
    }
    /**
     * Check if an email is already in use
     * @param Email
     */
    checkEmail(Email) {
        const localVarPath = this.basePath + '/User/CheckEmail/{Email}'
            .replace('{' + 'Email' + '}', encodeURIComponent(String(Email)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'Email' is not null or undefined
        if (Email === null || Email === undefined) {
            throw new Error('Required parameter Email was null or undefined when calling checkEmail.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in checkEmail!`);
                    }
                }
            });
        }));
    }
    /**
     * Check if a LoginID is already in use
     * @param LoginID
     */
    checkLoginID(LoginID) {
        const localVarPath = this.basePath + '/User/CheckLoginID/{LoginID}'
            .replace('{' + 'LoginID' + '}', encodeURIComponent(String(LoginID)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'LoginID' is not null or undefined
        if (LoginID === null || LoginID === undefined) {
            throw new Error('Required parameter LoginID was null or undefined when calling checkLoginID.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in checkLoginID!`);
                    }
                }
            });
        }));
    }
    /**
     * Email confirmation link for self-signup user
     * @param EmailConfirmHash Hash code sent in confirmation email
     */
    confirmEmail(EmailConfirmHash) {
        const localVarPath = this.basePath + '/User/ConfirmEmail/{EmailConfirmHash}'
            .replace('{' + 'EmailConfirmHash' + '}', encodeURIComponent(String(EmailConfirmHash)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'EmailConfirmHash' is not null or undefined
        if (EmailConfirmHash === null || EmailConfirmHash === undefined) {
            throw new Error('Required parameter EmailConfirmHash was null or undefined when calling confirmEmail.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in confirmEmail!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow COUNT
     */
    count() {
        const localVarPath = this.basePath + '/Users/Count';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "InlineResponse200");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in count!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow COUNT with filter
     * @param filter FBV meadow filter
     */
    countFiltered(filter) {
        const localVarPath = this.basePath + '/Users/FilteredTo/{filter}/Count'
            .replace('{' + 'filter' + '}', encodeURIComponent(String(filter)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'filter' is not null or undefined
        if (filter === null || filter === undefined) {
            throw new Error('Required parameter filter was null or undefined when calling countFiltered.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "InlineResponse200");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in countFiltered!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow POST (Create)
     * @param body
     */
    create(body) {
        const localVarPath = this.basePath + '/User';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling create.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'POST',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "UserModel")
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "UserModel");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in create!`);
                    }
                }
            });
        }));
    }
    /**
     * User forgot password email with link
     * @param Email
     */
    forgotPassword(Email) {
        const localVarPath = this.basePath + '/User/ForgotPassword/{Email}'
            .replace('{' + 'Email' + '}', encodeURIComponent(String(Email)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'Email' is not null or undefined
        if (Email === null || Email === undefined) {
            throw new Error('Required parameter Email was null or undefined when calling forgotPassword.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in forgotPassword!`);
                    }
                }
            });
        }));
    }
    /**
     * Get Avtive Users list
     */
    getActiveUsers() {
        const localVarPath = this.basePath + '/User/Active';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in getActiveUsers!`);
                    }
                }
            });
        }));
    }
    /**
     * Send version and last update dates for various
     */
    getSyncIndicator() {
        const localVarPath = this.basePath + '/User/SyncIndicator';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in getSyncIndicator!`);
                    }
                }
            });
        }));
    }
    /**
     *
     * @param body
     */
    postReadCountQuery(body) {
        const localVarPath = this.basePath + '/User/query/count';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling postReadCountQuery.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'POST',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "QueryRequest")
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "InlineResponse200");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in postReadCountQuery!`);
                    }
                }
            });
        }));
    }
    /**
     *
     * @param body
     */
    postReadQuery(body) {
        const localVarPath = this.basePath + '/User/query/read';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling postReadQuery.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'POST',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "QueryRequest")
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "Array<UserModel>");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in postReadQuery!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow READ
     * @param id ID of record
     */
    read(id) {
        const localVarPath = this.basePath + '/User/{id}'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling read.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "UserModel");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in read!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow READ list
     * @param begin Beginning (skip) number of records (to page)
     * @param max Maximum number of records to return
     */
    reads(begin, max) {
        const localVarPath = this.basePath + '/Users/{begin}/{max}'
            .replace('{' + 'begin' + '}', encodeURIComponent(String(begin)))
            .replace('{' + 'max' + '}', encodeURIComponent(String(max)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'begin' is not null or undefined
        if (begin === null || begin === undefined) {
            throw new Error('Required parameter begin was null or undefined when calling reads.');
        }
        // verify required parameter 'max' is not null or undefined
        if (max === null || max === undefined) {
            throw new Error('Required parameter max was null or undefined when calling reads.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "Array<UserModel>");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in reads!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow READ filtered list
     * @param filter FBV meadow filter
     * @param begin Beginning (skip) number of records (to page)
     * @param max Maximum number of records to return
     */
    readsFiltered(filter, begin, max) {
        const localVarPath = this.basePath + '/Users/FilteredTo/{filter}/{begin}/{max}'
            .replace('{' + 'filter' + '}', encodeURIComponent(String(filter)))
            .replace('{' + 'begin' + '}', encodeURIComponent(String(begin)))
            .replace('{' + 'max' + '}', encodeURIComponent(String(max)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'filter' is not null or undefined
        if (filter === null || filter === undefined) {
            throw new Error('Required parameter filter was null or undefined when calling readsFiltered.');
        }
        // verify required parameter 'begin' is not null or undefined
        if (begin === null || begin === undefined) {
            throw new Error('Required parameter begin was null or undefined when calling readsFiltered.');
        }
        // verify required parameter 'max' is not null or undefined
        if (max === null || max === undefined) {
            throw new Error('Required parameter max was null or undefined when calling readsFiltered.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "Array<UserModel>");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in readsFiltered!`);
                    }
                }
            });
        }));
    }
    /**
     * Request to resend confirmation email (user email must not be confirmed yet)
     * @param Email
     */
    resendConfirmationEmail(Email) {
        const localVarPath = this.basePath + '/User/ResendConfirmationEmail/{Email}'
            .replace('{' + 'Email' + '}', encodeURIComponent(String(Email)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'Email' is not null or undefined
        if (Email === null || Email === undefined) {
            throw new Error('Required parameter Email was null or undefined when calling resendConfirmationEmail.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in resendConfirmationEmail!`);
                    }
                }
            });
        }));
    }
    /**
     * User self-signup
     * @param body
     */
    signupUser(body) {
        const localVarPath = this.basePath + '/User/Signup';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling signupUser.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'POST',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "UserSignupRequest")
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in signupUser!`);
                    }
                }
            });
        }));
    }
    /**
     * Meadow PUT (Update)
     * @param body
     */
    update(body) {
        const localVarPath = this.basePath + '/User';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling update.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'PUT',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "UserModel")
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "UserModel");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in update!`);
                    }
                }
            });
        }));
    }
    /**
     * Change user password *
     * @param body
     */
    updatePassword(body) {
        const localVarPath = this.basePath + '/Password';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        //clear last response before initiating next operation
        this._lastResponse = null;
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling updatePassword.');
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'POST',
            timeout: this._timeout,
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "ChangePasswordRequest")
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return this.authentications.default.executeWithAuth(localVarRequestOptions, () => new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                this._lastResponse = response;
                if (error || (body && body.Error)) {
                    reject(error || body.Error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve(body);
                    }
                    else {
                        reject(`Request Error ${response.statusCode} in updatePassword!`);
                    }
                }
            });
        }));
    }
    getLastResponse() {
        let response = this._lastResponse;
        this._lastResponse = null;
        return response;
    }
}
exports.UserApi = UserApi;
//# sourceMappingURL=data:application/json;base64,